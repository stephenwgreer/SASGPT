requestUrl = baseUrl1 + "/subjectContacts/contacts/" + objIDrespBodyOBJ,respHeaders = get(requestUrl, accessToken1, acceptType)# Convert the response to a JSON object, and # extract the ETag value. respBodyObjJSON = json.loads(respBodyOBJ)ETag = respHeaders['ETag']# The variable respBodyObjJSON will contain all of the updates # that need to be added to the subject contact record.# Add the conclusionRepsonseValue and conclusionResponseType # to the updates.respBodyObjJSON.update(recordUpdates)# For each treatment in the record, add the treatment data to # the object respBodyObjJSON. For the treatment that is being # updated, append the updates. treatmentList=[]for item in respBodyObjJSON['treatmentsForConsideration']:    if item['id'] == treatmentToUpdate:        item.update(treatmentUpdates)    treatmentList.append(item)contactUpdate = {"treatmentsForConsideration" : treatmentList}respBodyObjJSON.update(contactUpdate)# Convert the updated object to a string.requestBody = json.dumps(respBodyObjJSON)#Update the subject contact history record.contentType = "application/vnd.sas.decision.subject.contact+json"putResponse = put(requestUrl, contentType, acceptType, \                  accessToken1, "If-Match", ETag, requestBody)print(putResponse, end='\n\n')print ("putResponse = ","\n", json.dumps(json.loads(putResponse.content),        indent=4), end='\n\n')
Responses
The initial response is the original, unmodified content of the subject contact history 
record.response body =   {    "links": [        <<lines deleted>>        ],    "name": "contacts",    "accept": "application/vnd.sas.decision.subject.contact",    "start": 0,    "count": 1,    "items": [
Responses 47