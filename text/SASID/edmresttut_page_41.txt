# Lock the current version of the decision and create a new, # numbered, major version.requestUrl= baseUrl1 + "/decisions/flows/" + objectID + \            "/revisions?revisionType=major"lockResponse= post (requestUrl, "application/vnd.sas.decision+json",                        "application/vnd.sas.decision+json",                        accessToken1, decisionContent)print ("lock response = ", lockResponse, end='\n\n')# The object ID now points to the locked version of the decision.respContent = json.loads(lockResponse.content)newVersion=str(respContent['majorRevision']) + "." + \           str(respContent['minorRevision'])print("Created new version", newVersion, "  ID =",        respContent['id'], end='\n\n')# Get the generated DS2 code for the locked version of the decision.requestUrl= baseUrl1 + "/decisions/flows/" + objectID + \"/code?lookupMode=inline&traversedPathFlag=false\&isGeneratingRuleFiredColumn=false&codeTarget=microAnalyticService"decisionCodeContent,rspheads = get(requestUrl, accessToken1,    "text/vnd.sas.source.ds2")# Convert the byte object to a string.decisionCodeString= decisionCodeContent.decode()# Escape control characters and double quotation marks.decisionCodeSource = decisionCodeString.replace("\\","\\\\").replace("\n", "\\n")\.replace('"', '\\"')# Define the URI to the source code for the decision.sourceUri = "/decisions/flows/" + objectID + "/code"# Create the request body.publishRequestBody = '''{   "type": "microAnalyticService",   "destinationName": "maslocal",   "name": "%s",   "modelContents": [      {      "code": "%s",      "codeType": "ds2",      "modelName": "%s",      "publishLevel": "decision",      "analyticStoreUri": [],      "analyticStores": [],      "sourceUri": "%s"      }    ]}''' % (requestName, decisionCodeSource, modelName, sourceUri)# Publish the decision.
36Chapter 6 / Publish a Decision to the maslocal Destination