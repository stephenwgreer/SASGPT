,text,n_tokens
0,1. SAS® Intelligent Decisioning: Administrator’s Guide 2023.04 This document might apply to additional versions of the software. Open this document in SAS Help Center and click on the version in the banner to see all available versions. Performing Post-installation Tasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Verify Configuration Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 View or Set Configuration Properties for SAS Intelligent Decisioning Services . . . . . . . . . 3 Business Rules Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Decisions Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,291
1,. . . . . . . . . 8 Micro Analytic Score Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 Reference Data Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 Score Execution Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 Subject Contact Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 Treatment Definition Service Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,266
2,. . . . . 18 Properties for Third-Party Subject Contacts and Treatment Definition Databases . . . . . 21 Properties for Multi-tenancy Environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 Content Security Policy Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Configuring Publishing Destinations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 About Configuring Publishing Destinations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Configuring Git Publishing Destinations by Using the REST API . . . . . . . . . . . . . . . . . . . . . 25 Verifying Publishing Destinations . . . . . . . . . .,283
3,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 Configuring Support for Querying Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 Configuring Support for Python Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 Set creation_dttm Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 Managing Third-Party Database Configurations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 About the Subject Contacts and Treatment Definition Databases . . . . . . . . . . . .,274
4,"10. sas.decisions.clearOutputOnlyDataGridSubDecision Specifies whether existing data is cleared in output-only data grids that are used in subdecisions before the subdecision executes. When this property is set to On, the data in the data grids is cleared. When this property is set to Off, data from previous runs is not cleared in the data grids.DefaultOff sas.decisions.dataGridMetadataGenerating Specifies whether DS2 packages that are published to SAS Micro Analytic Service destinations have two methods (step IDs), datagrid_metadata and datagrid_metadata_skel , that you can use to determine the data grid metadata that is applicable to the decision flow. When this property is set to On, you can post a request to these steps to get data grid metadata. See Execute a step in the SAS Viya REST API documentation. Note: If you enable this property, SAS Intelligent Decisioning generates more code for published objects and might increase the time required to publish an object to SAS Micro Analytic Service destinations. Enabling this option does not significantly affect the time required to execute published objects.DefaultOff sas.decisions.deleteVersions Enables users who have permission to delete decisions to delete specific versions of decisions.DefaultOn sas.decisions.disableLineReporting Specifies whether line numbers are included in DS2 error messages. When this option is turned off, lines numbers are included in error messages. When this option is turned on, lines numbers are not included in error messages.DefaultOff sas.decisions.execution.threadCount Specifies the maximum number of threads that can be allocated for executing DS2 code packages. TIP When the Enable variable assignment logging option is selected for a scenario test, this configuration option is ignored. The default thread count for the test is set to 1 in order to avoid duplicate and interleaved log entries. For more information, see “Enable Variable Assignment Logging” on page 39.Default4 sas.decisions.includeLoggingInGeneratedCode Enables all logging, including performance logging, for decisions that are running in the Micro Analytic Score service.DefaultOnSee“Enabling Performance Logging” on page 36 9",424
5,"11. sas.decisions.includeRuleFiredInformationForSubdecisions specifies whether rule-fired information is recorded for subdecisions when a decision is tested. This option must be turned on in order to specify the INCLUDESUBDECISIONRULEFIRE=YES option on the %DCM_RULEFIRE_DETAIL macro.DefaultOffTipIf you turn on this option, it is recommended that you re-run any existing tests or scenario tests for decisions that contain subdecisions.See“%DCM_RULEFIRE_DETAIL Macro” in SAS Intelligent Decisioning: Macro Guide sas.decisions.inlineGlobalVariableValues specifies whether the current values of global variables are included inline in generated code when you publish a decision to CAS or to SAS Micro Analytic Service destinations. When this property is set to On, the current value of each global variable is included in the code that is generated for these destinations. Changes to the values of the variables do not affect published decisions. When this property is set to Off, the generated code uses a SAS format or SAS Micro Analytic Service module to retrieve the current value of the global variable when the decision is run.DefaultOnSee“Activating a Global Variable” in SAS Intelligent Decisioning: User’s Guide sas.decisions.logicalExpression Specifies whether SAS Intelligent Decisioning adds the DS2 option LOGICALEXPR= to the code that it generates for decisions. The LOGICALEXPR= option specifies how logical AND and OR expressions are evaluated. Valid option values are STANDARD and OPTIMIZED.STANDARDspecifies that DS2 can evaluate both operands of a logical AND or OR expression before returning a result.OPTIMIZEDspecifies that DS2 optimizes the evaluation of the operands of logical AND and OR expressions by returning a result that is based on the first operand when possible.",362
6,"12. RestrictionThis configuration option is valid only when sas.decisions.messageOrder is set to TEMPORAL.See“MSGLIMIT=n | MIN | MAX” in SAS DS2 Language Reference sas.decisions.messageOrder Specifies whether SAS Intelligent Decisioning adds the DS2 option MSGORDER= to the code that it generates for decisions. The MSGORDER= option specifies whether DS2 writes error, warning, and note messages to the SAS log as they are produced or after the code executes. Valid option values are STANDARD and TEMPORAL.STANDARDspecifies that DS2 writes the messages after the code executes. PUT statement messages precede the diagnostic messages in the log.TEMPORALspecifies that DS2 writes the messages as they are produced. PUT statement messages are interspersed with the diagnostic messages in the log.DefaultSTANDARDNoteThis option applies to both published code and test code.See“MSGORDER=STANDARD | TEMPORAL” in SAS DS2 Language Reference sas.decisions.scond Specifies whether SAS Intelligent Decisioning adds the DS2 option SCOND= to the code that it generates for decisions. The SCOND= option specifies the level of the messages that are displayed in the SAS log for the DS2 variable declaration strict mode. This mode requires that every variable must be declared in the DS2 program. This option affects basic tests, scenario tests, and publishing validation tests for decisions. You can specify the following values:WARNINGwrites warning messages to the SAS log.NONEno messages are written to the SAS log.NOTEwrites notes to the SAS log.ERRORwrites error messages to the SAS log.DefaultWARNINGNoteWhen the decision contains a model, SAS Intelligent Decisioning sets SCOND=NONE before the code for the model package is generated. After the model code is generated, SAS Intelligent Decisioning resets the SCOND= option to the value that is specified by this option.See“SCOND” in SAS DS2 Language Reference sas.decisions.taskExecutor.maxThreadsPerRequest Specifies the maximum number of threads that can be used by SAS Intelligent Decisioning to generate the DS2 code for a decision.Default4 sas.decisions.taskExecutor.minItemsPerThread Specifies the minimum number of items that can be processed inside the same thread when SAS Intelligent Decisioning is generating the DS2 code for a decision.Default5 11",474
7,"13. sas.decisions.validation.validationCoreThreadPoolSize Specifies the maximum number of threads that SAS Intelligent Decisioning can use to validate decisions. If you routinely validate very large decisions, increasing the number of threads available to the validation process can improve performance.Default8 sas.decisions.variableLengthOverridden Specifies whether you can override the default length for input-only and input-output character variables in decisions and code files. When this property is set to Off, the lengths for these variables are based on the length of the input columns to which the variables are mapped. When this property is set to On, SAS Intelligent Decisioning uses the lengths that you specify when you create the variables.DefaultOffSee“Managing the Variables in a Decision” in SAS Intelligent Decisioning: User’s Guide sas.decisions.checkout sas.decisions.checkout.allowConcurrentCheckout Controls whether the same decision or code file can be checked-out by multiple users at the same time.DefaultONSee“Concurrently Checking Out and Committing Code File Versions” in SAS Intelligent Decisioning: User’s Guide“Concurrently Checking Out and Committing Decision Versions” in SAS Intelligent Decisioning: User’s Guide sas.decisions.checkout.checkoutEnabledFolderPaths Specifies the list of folder paths whose decisions and code files can be or must be checked out before they can be edited. Separate path names with commas.Default/Decision Repository TipPermissions are set on the default folder, /Decision Repository , so that users are required to check out the objects in this folder before they can be edited. Similar permissions are not automatically set on any additional folders that you specify with this configuration option. You must explicitly set the permissions in order to require that the objects in the additional folders are checked out before they are modified. See “Set Permissions for Check-Out Folders” on page 59 for more information.Example/Public/checkout sas.decisions.codefiles Click New Configuration to define this configuration instance. sas.decisions.codefiles.deleteVersions Enables users who have permission to delete custom code files to delete specific versions of custom code files.12",416
8,"14. DefaultOn sas.decisions.codefiles.quoteStudioQueryIdentifiers Specifies whether SAS Intelligent Decisioning encloses table and column identifiers in quotation marks when it generates DS2 code for custom data query files. It is recommended that you turn this option on if you do not have existing query files that rely on table or column names that are not enclosed in quotation marks. For more information, see “Handling Table and Column Names in Data Query Files” in SAS Intelligent Decisioning: User’s Guide .DefaultOff sas.decisions.masnode Click New Configuration to define this configuration instance. sas.decisions.masnode.removeTrailingUnderscoresFromInput Determines whether underscores are appended to input-output and input-only variable names that are passed to the SAS Micro Analytic Service when a Micro Analytic Module node in a decision is executed. If this property is set to Off, SAS Intelligent Decisioning adds an underscore to the names of the variables. If this property is set to On, SAS Intelligent Decisioning does not add underscores.DefaultOffRequirementThe setting of this configuration property must match the setting of the service.removetrailingunderscoresfrominputs property for the SAS Micro Analytic Service.NoteWhen both this property and the service.removetrailingunderscoresfrominputs property are set to On, publishing validation tests will fail for content that has been published to a SAS Micro Analytic Service destination.See“sas.microanalyticservice.system: supplementalProperties” in SAS Micro Analytic Service: Programming and Administration Guide“Executing Content Published to SAS Micro Analytic Service Destinations” in SAS Intelligent Decisioning: User’s Guide sas.decisions.nodetraces Click New Configuration to define this configuration instance. sas.decisions.nodetraces.includeRuleFiredPathTrackInfoInVariableAssignmentLogging Determines whether rule-fired information and path-tracking information is included in the log when variable assignment logging is enabled.DefaultOnTipTurning this option off reduces the size of the log and the space that is required to store it.See“Enabling Variable Assignment Logging” on page 38 13",417
9,"15. “Using Variable Assignment Logging” in SAS Intelligent Decisioning: User’s Guide sas.decisions.variable.length Click New Configuration to define this configuration instance. honorOutputLengthInMAS Specifies whether output-only decision variables of type Character honor the length that is specified in the user interface. This option affects only the code that is generated for container destinations and for SAS Micro Analytic Service destinations. IMPORTANT When this option is turned on and the value of an output variable is longer than the length specified by this option, the output value is truncated. When this option is turned off or is not defined, the length specified in the user interface is ignored in container destinations and in SAS Micro Analytic Service destinations. sas.decisions.workflow sas.decisions.workflow.authorMayApprove Specifies that a user who is a member of both the SIDWFAuthor and the SIDWFReviewer custom user groups can approve work that they authored. If a user is not a member of the SIDWFReviewer group, then that user cannot approve decisions. This property is ignored if the sas.decisions.workflow.enabled property is turned off.DefaultOffSee“Define Asset Approval Workflow User Groups” on page 57 sas.decisions.workflow.enabled Specifies whether decisions are developed in the SAS Intelligent Decisioning approval workflow. When this property is turned on, a new instance of the workflow is started when a new decision or a new version of an existing decision is created. Decision versions that existed before the workflow was enabled are not automatically put into the workflow.DefaultOffSee“Enable the Asset Approval Workflow” on page 41 “Using SAS Workflow with SAS Intelligent Decisioning” in SAS Intelligent Decisioning: User’s Guide sas.subjectcontacts.datagrid sas.subjectcontacts.datagrid.length Specifies the default length of the serialized data grid, including the JSON syntax, that is generated for subject contacts. Specifying a shorter length can reduce memory usage and might improve performance.Default10,485,760 14",391
10,"16. See“Introduction to Data Grids” in SAS Intelligent Decisioning: Using Data Grids sas.treatmentdefinitions.datagrid sas.treatmentdefinitions.datagrid.length Specifies the default length of the serialized data grid, including the JSON syntax, that is generated for treatment groups. Specifying a shorter length can reduce memory usage and might improve performance.Default10,485,760See“Introduction to Data Grids” in SAS Intelligent Decisioning: Using Data Grids Micro Analytic Score Service Properties sas.microanalyticservice.system.asychronousexecution Controls asynchronous communication between the SAS Micro Analytic Service and the subject contact service. For more information, see “sas.microanalyticservice.system: asynchronousexecution ” in SAS Micro Analytic Service: Programming and Administration Guide . sas.microanalyticservice.system.historyscheduler Controls the extraction and publishing of subject contact history records. For information, see “sas.microanalyticservice.system: historyscheduler” in SAS Micro Analytic Service: Programming and Administration Guide . Reference Data Service Properties Verify the settings for the following configuration instances: n“sas.referencedata” n“sas.referencedata.casformats” n“sas.referencedata.checkout” on page 17 n“sas.referencedata.publish” sas.referencedata sas.referencedata.activation.activateGlobalVariableOnImport Specifies whether a global variable that was active in the source environment is automatically activated in the target environment when it is imported by using the SAS Viya CLI (sas-viya)SAS administrative CLI (sas-admin).DefaultOffNoteTurning this option on might increase the time required to import content. 15",345
11,"17. sas.referencedata.activation.activateLookupOnImport Specifies whether a lookup table that was active in the source environment is automatically activated in the target environment when it is imported by using the SAS Viya Command-Line (sas-viya)SAS administrative CLI (sas-admin).DefaultOffNoteTurning this option on might increase the time required to import content. sas.referencedata.activation.destinations Specifies the SAS Micro Analytic Service publishing destinations in which lookup tables are activated. Only one SAS Micro Analytic Service destination is supported on localhost . By default, that destination is named maslocal. This property is ignored if no SAS Micro Analytic Service publishing destinations exist.DefaultmaslocalSee“Activating a Lookup Table” in SAS Intelligent Decisioning: User’s Guide “Controlling Where Lookup Tables Are Activated And How They Are Used” in SAS Intelligent Decisioning: User’s Guide sas.referencedata.activation.timeout Specifies the time limit in seconds after which an attempt to activate a lookup table or a global variable is considered to have failed.Default3600 sas.referencedata.deleteVersions Enables users who have permission to delete lookup tables to delete specific versions of lookup tables.DefaultOn sas.referencedata.casformats sas.referencedata.casformats.backupLibrary Specifies the CAS library in which to store a backup of the formats library that is identified in the formatsLibrary property.DefaultFormats sas.referencedata.casformats.formatsLibrary Specifies the name of the formats library that contains the CAS formats that are associated with production lookup tables. If you change this property, and you have previously modified the cas- shared-default: startup configuration instance to reload lookup tables, you must update the configuration instance to match this property.Defaultuserformats3See“Reloading Lookup Tables When CAS Is Restarted” on page 63 16",376
12,"18. sas.referencedata.checkout sas.referencedata.checkout.allowConcurrentCheckout Controls whether the same lookup table can be checked-out by multiple users at the same time.DefaultONSee“Concurrently Checking Out and Committing Lookup Table Versions” in SAS Intelligent Decisioning: User’s Guide sas.referencedata.checkout.checkoutEnabledFolderPaths Specifies the list of folder paths whose lookup tables can be or must be checked out before they can be edited. Separate path names with commas. This option is available starting with 2021.1.6.Default/Decision Repository TipPermissions are set on the default folder, /Decision Repository , so that users are required to check out the objects in this folder before they can be edited. Similar permissions are not automatically set on any additional folders that you specify with this configuration option. You must explicitly set the permissions in order to require that the objects in the additional folders are checked out before they are modified. See “Set Permissions for Check-Out Folders” on page 59 for more information.Example/Public/checkout sas.referencedata.publish sas.referencedata.publish.lookupDisableMasPublish Controls whether lookup tables are activated in SAS Micro Analytic Service destinations. When this option is set to Off and you activate a lookup table, it is activated in all of the SAS Micro Analytic Service destinations that are defined at your site. If this option is set to On, then lookup tables are not activated in these destinations, and your administrator must set the sas.businessrules.lookupStaticBinding option to On in order to include static copies of lookup tables in generated code and to ensure that published content executes correctly.DefaultOffSee“Controlling Where Lookup Tables Are Activated And How They Are Used” in SAS Intelligent Decisioning: User’s Guide Score Execution Service Properties sas.scoreexecution.deleteExecutions Specifies whether existing test results for a rule set, model, or decision test are deleted before the test is re-run. By default, existing results are not deleted when a test is re-run.DefaultOffSee“Managing Test Data” on page 64 17",428
13,"19. Subject Contact Service Properties Verify the settings for the following configuration instances: n“jvm” n“sas.subjectcontacts” jvm Click New Configuration to define this configuration instance. jvm.java_option_hibernate_extra_table Specifies the table type for partitioned PostgreSQL tables. Specify-Dhibernate.hbm2dll.extra_physical_table_types=PARTITIONED TABLE . If you partition the subject contacts table, you must specify this option in order for the SubjectContacts service to restart correctly. Note: This option has no effect if your database is not partitioned or if you are using Oracle for your database. jvm.java_option_xmx Specifies the JVM heap size of the Subject Contact service. sas.subjectcontacts Click New Configuration to define this configuration instance. sas.subjectcontacts.nodetraces.maxLifeTime Specifies whether to automatically delete the node trace information in the subject contacts database that is older than the maximum lifetime specified by the nodetraces.maxLifeTimeDays setting.DefaultOff sas.subjectcontacts.nodetraces.maxLifeTimeDays Specifies the maximum number of days that you want to retain the node trace information in the subject contacts database. If the nodetraces.maxLifeTime configuration setting is set to On, then node trace information that is older than this number of days is automatically deleted.Default7 Treatment Definition Service Properties Verify the settings for the following configuration instances: n“sas.treatmentdefinitions”18",285
14,2. Configure Third-Party Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 Partition the Subject Contacts Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 Revert to the Default PostgreSQL Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 Delete Third-Party Database Configurations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 Enable the Check-Out and Commit Feature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 Enabling Performance Logging . . . . . . . . . . . . . .,274
15,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 About Performance Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 Enable Performance Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 Create the App.tk.SID.Perf Logger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 Enabling Variable Assignment Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,264
16,. 38 About Variable Assignment Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 About The sessionlogconfig Configuration Instance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 Enable Variable Assignment Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 Enable the Asset Approval Workflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Migrating Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,267
17,. . . . . . . 41 About Migration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Transfer Business Rules Content from SAS 9.4 to SAS Viya . . . . . . . . . . . . . . . . . . . . . . . . 42 Transfer Treatments from SAS 9.4 to SAS Viya . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Transfer Content from SAS Viya 3.5 Environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Transfer Content between SAS Viya 4 Environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 Transfer Content That Was Published to a CAS Destination . . . . . . . . . . . . . . . . .,286
18,. . . . . . . . 46 Managing Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 About Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 Default Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Modifying Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,259
19,. . . . . . . . . . . 49 About Permission Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 Best Practices for Setting Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 Folder-Based Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 Rules-Based Permissions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 Full Access and Service Endpoints . . . . . . . . .,265
20,"20. n“sas.treatmentdefinitions.checkout” on page 20 n“sas.treatmentdefinitions.datagrid” n“sas.treatmentdefinitions.import” sas.treatmentdefinitions sas.treatmentdefinitions.activation.activateTreatmentGroupOnImport Specifies whether the version of a treatment group that was active in the source environment is automatically activated in the target environment when it is imported by using the SAS Viya Command-Line (sas-viya)SAS administrative CLI (sas-admin). IMPORTANT When this option is set to On, you must transfer the treatments that are used in the treatment group before you transfer the group. If you do not transfer the individual treatments first, attempts to transfer the treatment group will fail when the group tries to activate itself. Because you must transfer objects in a specific order, the recommended setting is Off.DefaultOffNoteTurning this option on might increase the time required to import content.See“sas.treatmentdefinitions.import.resetActiveVersionOfTreatmentGroupOnImport ” on page 20“Activate a Treatment Group” in SAS Intelligent Decisioning: User’s Guide sas.treatmentdefinitions.activation.destinations Specifies the SAS Micro Analytic Service publishing destinations in which treatment groups are activated. Only one SAS Micro Analytic Service destination is supported on localhost . By default, that destination is named maslocal. This property is ignored if no SAS Micro Analytic Service publishing destinations exist.DefaultmaslocalSee“Activate a Treatment Group” in SAS Intelligent Decisioning: User’s Guide sas.treatmentdefinitions.activation.timeout Specifies the time limit in seconds after which an attempt to activate a treatment group is considered to have failed.Default3600 sas.treatmentdefinitions.deleteVersions Enables users who have permission to delete treatments or treatment groups to delete specific versions of treatments or treatment groups.DefaultOn 19",361
21,"21. sas.treatmentdefinitions.checkout sas.treatmentdefinitions.checkout.allowConcurrentCheckout Controls whether the same treatment or treatment group can be checked-out by multiple users at the same time.DefaultONSee“Concurrently Checking Out and Committing a Treatment or Treatment Group Versions” in SAS Intelligent Decisioning: User’s Guide sas.treatmentdefinitions.checkout.checkoutEnabledFolderPaths Specifies the list of folder paths whose treatments and treatment groups can be or must be checked out before they can be edited. Separate path names with commas.Default/Decision Repository TipPermissions are set on the default folder, /Decision Repository , so that users are required to check out the objects in this folder before they can be edited. Similar permissions are not automatically set on any additional folders that you specify with this configuration option. You must explicitly set the permissions in order to require that the objects in the additional folders are checked out before they are modified. See “Set Permissions for Check-Out Folders” on page 59 for more information.Example/Public/checkout sas.treatmentdefinitions.datagrid sas.treatmentdefinitions.datagrid.length Specifies the default length of the serialized data grid, including the JSON syntax, that is generated for treatment groups. Specifying a shorter length can reduce memory usage and might improve performance. For more information, see “Introduction to Data Grids” in SAS Intelligent Decisioning: Using Data Grids .Default10,485,760 sas.treatmentdefinitions.import sas.treatmentdefinitions.import.resetActiveVersionOfTreatmentGroupOnImport Specifies whether the status of a treatment group is set to Active when it is imported by using the SAS Viya Command-Line (sas-viya)SAS administrative CLI (sas-admin). This option is useful when you are importing a treatment group that was already active when it was exported. The treatment group is not reactivated. Only the status is changed.DefaultOffSee“Activate a Treatment Group” in SAS Intelligent Decisioning: User’s Guide “sas.treatmentdefinitions.activation.activateTreatmentGroupOnImport ” on page 19 20",417
22,"22. Properties for Third-Party Subject Contacts and Treatment Definition Databases About the Databases and Schemas By default, the subject contacts and treatment definitions are stored in the PostgreSQL instance that was installed with SAS Viya. You can use Oracle or a different instance of PostgreSQL for these databases. The best practice for configuring third-party databases for subject contacts and treatment definitions is to use different schemas (owners and passwords) for each database. SAS Intelligent Decisioning uses Liquibase to manage a database changelog. Liquibase uses this changelog to determine how to update the database on your behalf during installation and updates. If you use a different schema for each database, then the database changelog tables that are used by Liquibase are not shared. Using different schemas makes it easier to destroy all of the tables that are associated with a service in case you need to re-create a database. An Oracle user has only one schema, and it has the same name as the user. To use different schemas in Oracle, different users must own the databases. Third-Party Database Properties Note: SAS Intelligent Decisioning provides database drivers for PostgreSQL and Oracle within the containers for each database. You cannot customize the database drivers. To use a third-party database, you must add the configuration properties for the appropriate service in SAS Environment Manager. Note: Before you configure a third-party database for subject contacts or treatment definitions, verify that the SharedServices database and the schemas for your third-party databases (subjectcontacts or treatmentdefinitions) are already configured with the correct ID and privileges. 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning, access SAS Environment Manager by clicking and selecting Manage Environment . 2Click to navigate to the Configuration category view. 3In the View menu, select Definitions . 4Complete these steps for each definition listed in Table 1 on page 22: aSelect the definition. Definitions are listed in Table 1 on page 22. bClick New Configuration . The New Configuration window appears. By default, the new configurations apply to both the Subject Contacts service and the Treatment Definition service.21",432
23,"23. c(Optional) Click and remove a service from the list of services to which this new configuration applies. dFor the remaining properties, enter the appropriate values from Table 1 on page 22. eClick Save to save the definition. SAS Environment Manager displays the ID of the configuration instance. fRecord the ID of the configuration instance. If the third-party configuration is not specified correctly, the service will not start. In this case, you might need to remove the third-party configuration instances and re-configure the database. For more information, see “Delete Third-Party Database Configurations” on page 33.Table 1 Third-Party Database Properties DefinitionPropertyValid ValuesDescriptionapplicationschemaFor PostgreSQL, specify subjectcontacts or treatmentdefinitions . For Oracle, specify the user ID that will be used to log in to the database.Specifies the database schema. Note: For PostgreSQL, you cannot use a custom schema.sas.datasource. initializerenabledtrue falseSpecifies whether to initialize the third-party database that is specified by the spring.datasource definition. The default setting for the internal PostgreSQL database is True. For Oracle and third- party PostgreSQL databases, specify False.sas.verify .resource databasetrue falseEnables the third-party database that is specified by spring.datasource to be verified. When this resource is set to True, a test connection pool is created. The default setting for the internal PostgreSQL database is True. This pool is created automatically for the default PostgreSQL database. For Oracle and third-party PostgreSQL databases, specify False.spring.datasourceplatformpostgresql oracleSpecifies the database type.driver-class- nameorg.postgresql.Driver oracle.jdbc.OracleDriverSpecifies the data source JDBC driver for the database.22",336
24,"24. DefinitionPropertyValid ValuesDescriptionusernameSpecifies the user ID that will be used to log in to the database.passwordSpecifies the password for the user ID specified by the username property.urljdbc:postgresql:// host:port/ database jdbc:oracle: driver :@server :portOracle-service-nameSpecifies the JDBC URI to the database. For example: jdbc:postgresql:// mydbhost.com:5432/ SharedServices? ApplicationName=subjectCont acts&currentSchema=subjectc ontacts jdbc:postgresql:// mydbhost.com:5432/ SharedServices? ApplicationName=treatmentDe finitions&currentSchema=treat mentdefinitions jdbc:oracle:oci:@edmt2.myco mp.com:1521/EDMT2 Properties for Multi-tenancy Environments After you onboard a tenant, you can set tenant-specific values for the following configuration options for the Decisions service: nsas.decisions.checkout nsas.decisions.codefiles nsas.decisions.masnode nsas.decisions.nodetraces nsas.decisions.workflow nsas.subjectcontacts.datagrid To set these options, sign in to the tenant SAS Environment Manager as an administrator for the tenant environment, and follow the instructions in “View or Set Configuration Properties for SAS Intelligent Decisioning Services” on page 3. Note: For the provider tenant, these configuration options are populated in the configuration menu. For all other tenants, these options must be added as a new configuration. For more information about multi-tenancy in SAS Viya, see “Multi-tenancy: Overview” in SAS Viya: Multi-tenancy .23",324
25,"25. Content Security Policy Properties A Content Security Policy (CSP) provides protection against cross-site scripting, clickjacking, and cross-site leak vulnerabilities. SAS Intelligent Decisioning provides a default CSP that uses the latest secure CSP recommendations. To override the default CSP: 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning, access SAS Environment Manager by clicking and selecting Manage Environment . 2Click to navigate to the Configuration category view. 3In the View menu, select Definitions . 4Enter commons in the filter field, and select sas.commons.web.security from the list. 5Click beside the SAS Intelligent Decisioning configuration instance in order to edit its properties. 6Modify the configuration instance properties as needed. See “SAS Intelligent Decisioning” in SAS Viya Platform: Configuration Properties for a description of the properties. 7Click Save to save your changes. Configuring Publishing Destinations About Configuring Publishing Destinations You can publish content to destinations on SAS Cloud Analytic Services (CAS), Apache Hadoop, SAS Micro Analytic Service, Teradata, and Git. You can also publish content to container destinations on Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP) and private Docker repositories. By default, a SAS Micro Analytic Service destination named maslocal is defined for you. You must configure all other publishing destinations. You can define and manage publishing destinations by using the following application or interfaces: nPublishing Destinations page in SAS Environment Manager. nSAS Viya: Models Command-Line Interface . nModel Publish API . For additional information about using the API, see the following resources: oModel Publish API examples on GitHub oPython examples for defining CAS and Git publishing destinations24",362
26,"26. o“Configuring Git Publishing Destinations by Using the REST API” on page 25 For information about configuring a publishing destination to support querying a database, see “Configuring Support for Querying Databases” on page 25. Configuring Git Publishing Destinations by Using the REST API When you define a Git publishing destination by using the REST API, you can specify whether the code that is generated for the destination is compatible with CAS environments (CAS ) or with SAS Micro Analytic Service (MAS ) environments. The code that is generated for an object when it is published can be run only in a destination that matches the destination type for which the code generated. If you deploy a published object to a destination with which it is not compatible, an error occurs when you run the code. To specify the destination type for which you want SAS Intelligent Decisioning to generate the code that is published to the Git destination, include the codeGenerationMode property in the specification for the target destination. Specify CAS or MAS as the value of the property. For example:targetDestination= { ""properties"":[  {""name"": ""codeGenerationMode"",  ""value"": ""CAS""} ]} The default setting is MAS . If you do not include this property, the code that is generated for the destination will be compatible with SAS Micro Analytic Service destinations. Verifying Publishing Destinations You can use the SAS Intelligent Decisioning tutorials to verify that your publishing destinations are configured properly. For more information, see SAS Intelligent Decisioning: Tutorials . Configuring Support for Querying Databases You can publish decisions that use data query files, DS2 code files that contain SQL queries, or custom code files that contain data queries to SAS Micro Analytic Service destinations and to container destinations. For SAS Micro Analytic Service destinations, you must configure SAS Micro Analytic Service support for your database. You can supply the database connection string in code, but SAS recommends that you supply it by using the sas.microanalyticservice.service.connectionstring property for the Micro 25",410
27,"27. Analytic Score service in SAS Environment Manager. For information, see “Database Access with DS2” in SAS Micro Analytic Service: Programming and Administration Guide . In container destinations, only certain database types can be queried by using data query files, DS2 code files that contain SQL queries, or custom context files that contain SQL queries. If a decision requires database access, SAS Container Runtime includes the required database-supported driver when it creates the image. To identify the required database, specify the --databaseDriver property when you create the publishing destination. If you do not specify the --databaseDriver property, the driver for Oracle is included in the image. For information about creating a publishing destination and specifying the --databaseDriver property, see “models Plug-In” in SAS Viya: Models Command-Line Interface . For information about configuring database access, see “Configuring a Database Connection” in SAS Container Runtime: Programming and Administration Guide . Configuring Support for Python Code Files To support decisions that contain custom Python code files, you must enable PyMAS package support. For more information, see “Configuring Python for SAS Micro Analytic Service” in SAS Micro Analytic Service: Programming and Administration Guide . To use Python code files in SAS Intelligent Decisioning, user authentication must be enabled in one of the following ways: nUsers who are working with Python code files must be added to the CASHostAccountRequired custom group. For more information, see the following topics: o“The CASHostAccountRequired Custom Group” in SAS Viya: Identity Management o“Manage Custom Groups” in SAS Environment Manager: User’s Guide nThe CASALLHOSTACCOUNTS environment variable must be set. For information, see “env.CASALLHOSTACCOUNTS” in SAS Viya: SAS Cloud Analytic Services . The MAS_M2PATH, MAS_PYPATH, and MAS_PYWAIT environment variables must be set. They are usually set during the deployment process. See “Environment Variables” in SAS Micro Analytic Service: Programming and Administration Guide for more information. Additional information is available in the file $deploy/sas-bases/docs/configure_python_for_sas_viya.html . Set creation_dttm Values Note: You do not need to set the creation_dttm values for new installations of SAS Intelligent Decisioning on SAS Viya. This task is required only for databases that were created with SAS Intelligent Decisioning 5.4 and earlier on SAS Viya.26",494
28,"28. Beginning with SAS Intelligent Decisioning 5.5, the schema for the subject contacts database is converted to a schema that enables you to partition the database when SAS Intelligent Decisioning is installed. The new schema adds a creation_dttm column to the following tables: ndcm_consideration_treatment ndcm_custom_treatment ndcm_object_values ndcm_object_variables ndcm_subject_context When you restart the subject contacts service during deployment, a placeholder value is assigned to the creation_dttm cell in all of the existing rows in these tables. After the service has restarted, you must set the values in these cells to match the values in the creation_dttm column in either the dcm_contact_communication table or the dcm_consideration_treatment table. IMPORTANT Set the creation_dttm values in the database tables only after you migrate data from SAS Intelligent Decisioning 5.4 and earlier to the latest release of SAS Intelligent Decisioning. You do not need to repeat this task each time the subject contacts service is restarted. As a Kubernetes cluster administrator, complete the following steps: 1On the primary node of the Kubernetes cluster, export the KUBECONFIG environment variable, and set the value of the Kubernetes namespace (such as d9997 ):export KUBECONFIG=/etc/kubernetes/admin.confnamespace=k8s_namespace_value 2Obtain the password to the PostgresSQL instance that was installed with SAS Viya:kubectl -n $namespace exec -it $(kubectl get pods -n $namespace |  grep sas-consul-server | cut -f 1 -d ' ') -c sas-consul-server  -- /opt/sas/viya/home/bin/sas-bootstrap-config kv read --recurse config |  grep '^config/application/sas-crunchy-data-postgres/password' | cut -f 2 -d '=' 3Export the PostgreSQL password to the PGPASSWORD environment variable.",391
29,"29. update subjectcontacts.dcm_object_variables set creation_dttm = contact.creation_dttm from subjectcontacts.dcm_contact_communication contact where dcm_object_variables.contact_id=contact.contact_id;update subjectcontacts.dcm_object_values set creation_dttm = contact.creation_dttm from subjectcontacts.dcm_contact_communication contact where dcm_object_values.contact_id=contact.contact_id;update subjectcontacts.dcm_subject_context set creation_dttm = contact.creation_dttm from subjectcontacts.dcm_contact_communication contact where dcm_subject_context.contact_id=contact.contact_id; Managing Third-Party Database Configurations About the Subject Contacts and Treatment Definition Databases By default, the subject contacts and treatment definitions are stored in the PostgreSQL instance that was installed with SAS Viya. You can use Oracle or a different instance of PostgreSQL for these databases. For more information, see “Configure Third-Party Databases” on page 28. IMPORTANT SAS Intelligent Decisioning does not support third-party configurations in environments that are configured for multi-tenancy. Configure Third-Party Databases By default, the subject contacts database and the treatment definitions database are stored in the PostgresSQL instance that was installed with SAS Viya. If you want to use that instance of PostgreSQL for your subject contacts and treatment definitions databases, no additional configuration is required. Alternatively, you can use Oracle or a different instance of PostgresSQL for either or both of these databases. Complete these steps to configure a third-party database: 1(Optional) To preserve treatment groups that are stored in the PostgresSQL instance that was installed with SAS Viya, use SAS Environment Manager or the transfer plug-in to the sas-viya CLI to export the treatment groups. Select the Include dependencies check box in SAS Environment 28",360
30,3. Full Access and Service Endpoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 Tasks Enabled by Default Rules for Object URIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 Granting Access to Test Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Define Asset Approval Workflow User Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 Granting Access to the History of Workflow Status Changes . . . . . . . . . . . . . . . . . . . . . . . . 58 Set Permissions for Check-Out Folders . . . . . . . . . . . . . . . . . . . . . . . . . . .,278
31,"30. Manager, or specify the --include-dependencies option in the sas-viya CLI. If you include dependencies in the transfer package, the package includes the eligibility rule sets for the treatments and any version notes that are associated with different versions of the treatments. For more information about exporting and importing content, see SAS Viya Platform: Content Migration from SAS Viya 4 . Note: You cannot transfer subject contacts records between databases. 2Delete any existing third-party configuration settings for the database. For more information, see “Delete Third-Party Database Configurations” on page 33. 3In SAS Environment Manager, edit the configuration properties for the database. For more information, see “Properties for Third-Party Subject Contacts and Treatment Definition Databases” on page 21. 4On the primary node of the Kubernetes cluster, export the KUBECONFIG environment variable, and set the value of the Kubernetes namespace (such as d9997 ):export KUBECONFIG=/etc/kubernetes/admin.conf# List all the available namespaces. Find the namespace of the SAS Viya deployment.kubectl get namespace# Set the namespace of the SAS Viya deployment.namespace=k8s_namespace_value 5Shut down the subject contacts service, the treatment definitions service, or both services, depending on which databases you are reconfiguring:kubectl scale deployment sas-subject-contacts -n $namespace --replicas=0kubectl scale deployment sas-decisions-definitions -n $namespace --replicas=0 6Start new instances of the services that you shut down in Step 5 :kubectl scale deployment sas-subject-contacts -n $namespace --replicas=1kubectl scale deployment sas-decisions-definitions -n $namespace --replicas=1 7(Optional) Import the treatment groups that you exported in Step 1 into the third-party database. IMPORTANT After a treatment group is imported into a new database, you must activate the group in order to use the group in a decision. For more information, see “Activate a Treatment Group” in SAS Intelligent Decisioning: User’s Guide or “Activate Treatment Groups” in SAS Intelligent Decisioning: Decision Management REST API Examples . IMPORTANT The backup and restore processes described in SAS Viya Platform: Backup and Restore apply only to services that do not use a third-party configuration. They do not apply to third-party configuration settings or to content stored in a third-party database.",492
32,"31. Partition the Subject Contacts Database IMPORTANT Partitioning the subject contacts database requires that PostgreSQL databases are based on PostgreSQL 12. Oracle databases must be based on Oracle 12c Release 2 or higher. Partitioning and Trimming the Database The number of records stored in the subject contacts database can grow at a fast pace. However, as time passes, older records typically become less relevant. In order to avoid storing large amounts of stale data, consider periodically trimming the database. How often you trim your database depends on how fast the database grows and how quickly the data becomes stale. It is easier to remove older, less relevant data if the database is partitioned. With a partitioned database, you can drop the partitions that contain the older data instead of searching for and deleting older records. IMPORTANT If you are using PostgreSQL and you partition the subject contacts database, you must specify the jvm.java_option_hibernate_extra_table property for the Subject Contact service. For more information, see “Subject Contact Service Properties” on page 18. The amount of disk space used by the subject contacts database can grow rapidly. Closely monitor the disk space that is used by the database. It is recommended that you partition the subject contacts database and periodically drop older partitions. If the number of partitions is very high, you might experience degraded performance, and calls to the subject contacts database might time out. SAS provides scripts that generate SQL statements that partition the subject contacts database. There is one script for PostgreSQL databases and one script for Oracle databases. You can use the scripts to generate the SQL statements, and then use a database client application to execute the generated SQL. For more information, see “About the Partitioning Scripts” on page 30. Note: You must be familiar with how partitioning works for your database. Refer to the documentation for your version of PostgreSQL at https://www.postgresql.org/docs/current/ddl-partitioning.html or for your version of Oracle at https://www.oracle.com/database/technologies/partitioning.html . About the Partitioning Scripts The partitionScripts ZIP file contains two scripts: generatePostgreSQLPartitions.sh and generateOracleSQLPartitions.sh. This ZIP file is available at https://support.sas.com/downloads/ browse.htm?fil=&cat=612 . You can download the ZIP file and extract the contents to your local machine. These scripts generate sample SQL statements to partition your subject contacts database based on datetime ranges.30",491
33,"32. PostgreSQL does not support the partitioning of existing tables, so you must re-create the subject contacts tables as partitioned tables. In the SQL code that is generated by generatePostgreSQLPartitions.sh, IF statements are enclosed by the begin transaction and commit transaction directives. If an error occurs, changes to the database are rolled back by PostgreSQL. Syntax To execute the generatePostgreSQLPartitions script, enter the following command:generatePostgreSQLPartitions.sh dbschema  ""first_partition_start_timestamp""  partition_granularity  partition_size  partition_number  > output_file_name.sql To execute the generateOraclePartitions script, enter the following command:generateOraclePartitions.sh dbschema  ""first_partition_start_date""  partition_granularity  partition_size  > output_file_name.sql Arguments dbschema specify subjectcontacts . first_partition_start_date specifies the start date of the first partition. Enclose the date in single quotation marks. Specify the date in the following format:YYYY-MM-DD Applies togenerateOraclePartitions script onlyExample'2020–06–02' first_partition_start_timestamp specifies the starting timestamp of the first partition. Enclose the timestamp in single quotation marks. Specify the timestamp in the following format:YYYY-MM-DD hh:mm:ss [AM|PM] Applies togeneratePostgreSQLPartitions script onlyExample'2020-04-15 12:00:00 AM' partition_granularity specifies the granularity of the partitions. Specify hour , day , month , or year . partition_size specifies the number of hours, days, months, or years that you want to include in each partition. For example, if you specify month for the partition granularity and 3 for the partition size, then each partition includes the data for three months. Specify a whole number greater than zero.31",365
34,"33. partition_number specifies how many partitions you want to create. Specify a whole number greater than zero.Applies togeneratePostgreSQLPartitions script only output_file_name .sql specifies the name of the file where you want to write the SQL statements. Examples The following command writes SQL statements that partition a PostgreSQL subject contacts database. It writes the statements to the file /tmp/partition.sql . These statements partition the database into five partitions. The first partitions starts on June 1st, 2020, and each partition contains the data for a single three-month period (quarter). You can execute the generated SQL statements in /tmp/partition.sql by using a database client program such as psql.generatePostgreSQLPartitions.sh subjectcontacts ""2020-6-01 12:00:00 AM"" month 3 5  > /tmp/partition.sql The following command writes SQL statements that partition an Oracle subject contacts database. It writes the statements to the file partitionSubjectContacts.sql in the directory where the script is run. The first partitions starts on July 1st, 2020, and each partition contains data for 15 days. You can execute the generated SQL statements in partitionSubjectContacts.sql by using a database client that is compatible with your database.generateOraclePartitions.sh subjectcontacts ""2020-07-01"" day 15 > partitionSubjectContacts.sql Revert to the Default PostgreSQL Database By default, the subject contacts and treatment definitions databases are stored in the PostgresSQL instance that was installed with SAS Viya. If you have previously chosen to use Oracle or a different instance of PostgresSQL for either or both of these databases, you can reconfigure these databases to use the default instance of PostgreSQL. 1On the primary node of the Kubernetes cluster, export the KUBECONFIG environment variable, and set the value of the Kubernetes namespace (such as d9997 ):export KUBECONFIG=/etc/kubernetes/admin.conf# List all the available namespaces.",399
35,"34. kubectl -n $namespace get service sas-crunchy-data-postgres -o wide Specify this cluster ID as the host ID in the JDBC URI when you define the spring.datasource.uri property in Step 4 . 4In SAS Environment Manager, edit the configuration properties for the database. For more information, see “Properties for Third-Party Subject Contacts and Treatment Definition Databases” on page 21. 5Shut down the subject contacts service, the treatment definitions service, or both services, depending on which databases you are reconfiguring:kubectl scale deployment sas-subject-contacts -n $namespace --replicas=0kubectl scale deployment sas-decisions-definitions -n $namespace --replicas=0 6Start new instances of the services that you shut down in Step 5 :kubectl scale deployment sas-subject-contacts -n $namespace --replicas=1kubectl scale deployment sas-decisions-definitions -n $namespace --replicas=1 For more information, see “SAS Infrastructure Data Server” in SAS Viya: Infrastructure Servers and Crunchy PostgreSQL Operator . Delete Third-Party Database Configurations If a configuration instance is not specified correctly, and the associated services do not start, remove all the third-party database configurations. 1Determine the configuration instance IDs for your third-party database. You might have recorded the configuration instance IDs when you completed Step 4f in “Third- Party Database Properties” on page 21. If you did not record the IDs when you configured the database, you can retrieve the instance IDs by completing these steps: aOn the primary node of the Kubernetes cluster, export the KUBECONFIG environment variable, and set the value of the Kubernetes namespace (such as d9997 ):export KUBECONFIG=/etc/kubernetes/admin.conf# List all the available namespaces.",377
36,35.,2
37,"36. TIP If your subject contacts and treatment definition databases were configured together, then these four configuration instances apply to both databases. If your databases were configured separately, then you will find four configuration instances for each database. eFor each configuration instance, record the instance ID. In the following example, the ID for the sas.datasource.initializer configuration instance is 0b16f426-aaa2-42a8-a0bc-047c69f93cab.configurationservice/configurations/0b16f426-aaa2-42a8-a0bc-047c69f93cab={ ""version"" : 1, ""id"" : ""0b16f426-aaa2-42a8-a0bc-047c69f93cab"", ""metadata"" : { ""isDefault"" : false, ""services"" : [ ""subjectContacts"" ], ""mediaType"" : ""application/vnd.sas.configuration.config.sas.datasource.initializer+json;     version=1"", ""createdBy"" : ""edmdev"", ""modifiedBy"" : ""edmdev"", ""creationTimeStamp"" : 1605463464064, ""modifiedTimeStamp"" : 1605463464064 }, ""enabled"" : false} IMPORTANT Verify that the configuration instance is for the correct media type before you proceed. 2Use REST API calls to delete the configuration instances associated with each ID. For example, you can use the following CURL command to delete a configuration instance. Substitute the appropriate values for your site for the token, host, port, and ID.curl -header ""Authorization: bearer token"" -X DELETE http://host:port/configuration/configurations/ID 3(Optional) Repeat Step 1b and Step 1d to verify that the configuration instances have been deleted. 4Restart the services (sas-subject-contacts, sas-decisions-definitions, or both) for which you deleted the database configuration instances. For more information, see “Managing a Specific Server or Service” in SAS Viya Platform: General Management of Servers and Services . 5Delete the temporary file that was created in Step 1b . This file contains sensitive information.rm /tmp/consul.txt 35",454
38,"37. Enable the Check-Out and Commit Feature To enable the check-out and commit feature for a folder: 1Specify the folder path in the checkout.checkoutEnabledFolderPaths configuration option for the appropriate service. Set the option for the services that are associated with the object types that you want to save in the folder.Table 2 Check-Out and Commit Configuration Options Object TypesConfiguration PropertiesRule sets“sas.businessrules.checkout”Decisions Code files“sas.decisions.checkout”Lookup tables“sas.referencedata.checkout”Treatments Treatment groups“sas.treatmentdefinitions.checkout” 2(Optional) Set the permissions for the folders that you add to the checkout.checkoutEnabledFolderPaths configuration properties if you want to force users to check out objects in those folders before they are modified. For instructions, see “Set Permissions for Check-Out Folders” on page 59. Enabling Performance Logging About Performance Logging When performance logging is enabled, the Micro Analytic Score service records the total execution time for decisions. The service also records individual times for each node in the decisions except for branch nodes and condition nodes. Times are also logged for nodes that are inside subdecisions. The service writes these times to the SAS Micro Analytic Service log file. Log entries can include the following information:36",267
39,"38. package name the name of the generated DS2 package. node name the name of node that is displayed in the SAS Intelligent Decisioning user interface. The log entry for the entire decision does not include the node name. node ID a unique ID for each node. When multiple decisions are running simultaneously, the logging for both decisions might be interleaved in the SAS Micro Analytic Service log file. If those decisions both contain a node with the same name, you can use the node ID to identify the node. The log entry for the entire decision does not include the node name. total duration the elapsed time, in seconds, that it took the node or package to execute. If the number is very small, it is displayed in scientific notation such as 1.9073486328125E-6. For example, the following log entry shows the execution time for the node named cellPhone_demo in the package cellPhone_demo_0:2019-07-03T15:46:56,659 [00000008] DEBUG App.tk.SID.Perf - Package Name: cellPhone_demo_0, Node Name: cellPhone_demo, Node ID: cbe4d5ea-05fe-442a-a2d2-26d5d2d754ea, TOTAL DURATION:0.04584789276123 The following log entry shows the execution time for the node named AggregatePromoPredicator in a subdecision, for which the time is very small:2019-07-03T15:46:56,615 [00000008] DEBUG App.tk.SID.Perf - Package Name: c_VY76XRZ7GFEP3DRTS3BVA6SPLM, Node Name: AggregatePromoPredicator, Node ID: 04200f5f-2903-44aa-90a2-156890a7fc18, TOTAL DURATION:1.9073486328125E-6 The following entry shows the total execution time for the cellPhone_demo_0 package:2019-07-03T15:47:01,264 [00000008] DEBUG App.tk.SID.Perf - Package Name: cellPhone_demo_0, TOTAL DURATION:1.5830275082711 Enable Performance Logging 1Create the App.tk.SID.Perf logger. This logger captures the execution times for the decision nodes.",494
40,"39. 3Select All services in the View menu, and then select Micro Analytic Score service . 4Click New Configuration . The Select Definition window appears. 5Select logging.level . The New logging.level Configuration window appears. 6Select DEBUG for the logging level. 7Enter App.tk.SID.Perf for the logger name, and click Save . 8Restart the SAS Micro Analytic Score service. Use the Kubernetes commands that are described in “Managing a Specific Server or Service” in SAS Viya Platform: General Management of Servers and Services . Enabling Variable Assignment Logging About Variable Assignment Logging When variable assignment logging is enabled, users can select the Enable variable assignment logging option for scenario tests, which are run in CAS. This option adds the following statement to the code that is generated when the test is run:DS2_OPTIONS TRACEVARIABLES; Variable assignment logging writes detailed information to a CAS log each time the value of a variable changes. This information enables the user to track how a variable’s value changes as a decision executes. For more information, see “Using Variable Assignment Logging” in SAS Intelligent Decisioning: User’s Guide . About The sessionlogconfig Configuration Instance The contents of the sas.cas.instance.config: sessionlogconfig configuration instance for the cas-shared-default service has the following structure:<?xml version=""1.0"" encoding=""UTF-8""?><logging:configuration xmlns:logging=""http://www.sas.com/xml/logging/1.0/"">appender and logger definitions<!--Root logger --><root> root logger definition</root></logging:configuration> By default, the contents defines an example configuration for an appender named ProcessFile and the root logger. The example appender, if enabled, causes CAS sessions to write debug log files to 38",363
41,"4. 2Configure publishing destinations . 3(Optional) Configure support for SQL query files . 4(Optional) Configure support for Python code files . 5(Optional) Set the creation_dttm values in the subject contacts database . 6(Optional) Set up third-party databases for subject contacts or treatments or both: aConfigure the subject contacts database or the treatment definition database or both databases . b(Optional) Partition the subject contacts database . 7(Optional) Enable the check-out and commit feature . 8(Optional) Enable performance logging . 9(Optional) Enable variable assignment logging . 10(Optional) Enable the asset approval workflow . 11(Optional) Transfer content to the new environment . 12(Optional) Enable lookup tables to be reloaded automatically . 13Verify that permissions are correct for your site . Verify Configuration Properties View or Set Configuration Properties for SAS Intelligent Decisioning Services After you install SAS Intelligent Decisioning, review the configuration properties to ensure that the values are appropriate for your environment. 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning as an administrator, access SAS Environment Manager by clicking and selecting Manage Environment . 2Click to navigate to the Configuration category view. 3In the View menu, select All Services . 4Select a service to view its properties. Click to edit the properties. Verify the property settings for each of the following services: nBusiness Rules3",292
42,"40. the /tmp directory when a new session starts. Setting the CAS_SESSION_LOGGING environment variable to True enables this appender. You must also set this variable to True in order to enable the appender for variable assignment logging. If do not want to enable the ProcessFile appender, delete or comment out the example appender definition and modify the root logger definition. See Step 2 of “Enable Variable Assignment Logging” . Enable Variable Assignment Logging IMPORTANT All the CAS configuration instances are disabled by default, which means that processing is not enabled for any modifications to the configuration instances in SAS Environment Manager. In order to modify the cas-shared-default configuration instances, a Kubernetes administrator must set SAS_ALLOW_ADMIN_SCRIPTS to True in sas-shared-config configMap . For instructions, see the file $deploy/sas-bases/overlays/sas-programming-environment/README.md . For more information, see “Edit Server Configuration Instances” in SAS Environment Manager: User’s Guide . Also, you must restart the CAS server after you make changes to the cas-shared-default configuration settings. To enable variable assignment logging, make the following configuration changes: 1In SAS Environment Manager, edit the sas.cas.instance.config: sessionlogconfig configuration instance for the cas-shared-default service. 2(Optional) Delete or comment out the ProcessFile example appender definition , and delete or comment out the following line from the root logger definition:<appender-ref ref=""ProcessFile""/> 3Add the App.TableServices.DS2.Runtime.TraceVariables logger.",310
43,"41. <param name=""payload.version#"" value=""%S{eventModel.payload.version}""/> <param name=""payload.level"" value=""%S{eventModel.payload.level}""/> <param name=""payload.source"" value=""%S{OSENV.SAS_PAYLOAD_SOURCE|sas}""/> <param name=""payload.messageID"" value=""%S{eventModel.payload.messageId}""/> <param name=""payload.message"" value=""%m""/> <param name=""payload.timeStamp"" value=""%d{LEMZone}""/> <param name=""payload.parameters{}"" value=""%S{eventModel.payload.parameters}""/> <param name=""payload.properties.thread"" value=""%t""/> <param name=""payload.properties._lineNumber_"" value=""%L""/> <param name=""payload.properties._sourceFile_"" value=""%F""/> <param name=""payload.properties.hostname"" value=""%S{hostname}""/> </layout></appender><logger name=""App.TableServices.DS2.Runtime.TraceVariables""> <appender-ref ref=""CASArkeAppender""/> <level value=""Trace""/></logger> For more specific instructions, see “Manage CAS Server Logging” in SAS Viya: Logging . TIP You can specify debug instead of trace . For more information about the logger, see “App.TableServices.DS2.Runtime.TraceVariables” in SAS DS2 Programmer’s Guide and “Example: Logging Trace Variables” in SAS DS2 Programmer’s Guide . 4Edit the contents of the sas.cas.instance.config: settings configuration instance for the cas-shared-default service in SAS Environment Manager. To enable CAS session logging, uncomment the following line:export CAS_SESSION_LOGGING=""true"" Note: If you did not delete the example appender definition in Step 2 , then the ProcessFile example appender is also enabled when you export this variable. 5To include rule-fired information and path-tracking information in the log files, turn on the sas.decisions.nodetraces.includeRuleFiredPathTrackInfoInVariableAssignmentLogging configuration property. If this option is turned off, users cannot run rule-fired analyses or path- tracking analyses for scenario tests. For more information, see “sas.decisions.nodetraces” on page 13. TIP If the log files that are generated by either the Enable variable change path logging option or the Enable variable assignment logging option are very large, you might need to increase the JVM heap size for the Subject Contact and Files services.",496
44,"42. Enable the Asset Approval Workflow SAS Intelligent Decisioning provides a predefined approval workflow for decisions. This workflow is named SID Asset Approval. When the workflow is enabled, a new instance of the workflow is started each time a new decision or a new version of an existing decision is created in SAS Intelligent Decisioning. The Move to status button appears in the interface when a user opens a decision that is in a workflow. As the users that are responsible for developing, testing, reviewing, approving, deploying the decision version each finish their tasks, they set the status of the workflow to the appropriate value, such as Developing, Approved, or Deployment-ready. For more information about the workflow, see “Using SAS Workflow with SAS Intelligent Decisioning” in SAS Intelligent Decisioning: User’s Guide . To enable this workflow for decisions in SAS Intelligent Decisioning: 1Turn on the sas.decisions.workflow.enabled configuration property. 2(Optional) Turn on the sas.decisions.workflow.authorMayApprove configuration property. This property specifies whether a user who authors a decision can also approve the decision. 3(Recommended) Turn on the sas.businessrules.publish.hideRuleSetPublish configuration property. This property specifies whether the Publish button is hidden for rule sets. It is recommended that you turn on this property so that all published content is developed in the workflow. 4Define the custom user groups for the workflow, and assign the appropriate users to each group. For more information, see “Define Asset Approval Workflow User Groups” on page 57. 5Grant the appropriate users access to the workflow history. For more information, see “Granting Access to the History of Workflow Status Changes” on page 58. 6(Optional) Configure the length of time that workflow history items are retained. For more information, see “Configure History Event Properties” in SAS Workflow Manager: Administrator’s Guide . Migrating Content About Migration You can move from previous releases or versions of SAS to the latest version. You can move from SAS 9.4 to SAS Viya, from SAS Viya 3.5 to SAS Viya 4, or from SAS Viya 4 to a different SAS Viya 4 deployment. You can migrate content, or you can migrate a full system. For information about the SAS Viya migration processes, see System Migration and Content Migration . For information about migrating SAS Intelligent Decisioning content, see the following topics:41",492
45,"43. n“Transfer Business Rules Content from SAS 9.4 to SAS Viya” n“Transfer Treatments from SAS 9.4 to SAS Viya” n“Transfer Content from SAS Viya 3.5 Environments” n“Transfer Content between SAS Viya 4 Environments” n“Transfer Content That Was Published to a CAS Destination” Transfer Business Rules Content from SAS 9.4 to SAS Viya Note: The transfer process does not support transferring content to SAS Viya from SAS Business Rules Manager 2.2, or earlier or from SAS Decision Manager 2.2. To transfer content from SAS Business Rules Manager on SAS 9.4 or SAS Decision Manager on SAS 9.4 to SAS Intelligent Decisioning on SAS Viya, use the dcmtransfer plug-in to the sas-viya command-line interface.To transfer content from SAS Business Rules Manager on SAS 9.4 or SAS Decision Manager on SAS 9.4 to SAS Intelligent Decisioning on SAS Viya, use the dcmtransfer plug- in to the sas-admin command-line interface. For more information, see the following topics: n“About the SAS Intelligent Decisioning CLIs” in SAS Intelligent Decisioning: Command-Line Interfaces n“Command-Line Interface: Preliminary Instructions” in SAS Viya Platform: Using the Command- Line Interface n“dcmtransfer Plug-In” in SAS Intelligent Decisioning: Command-Line Interfaces IMPORTANT SAS Intelligent Decisioning on SAS Viya does not support rule flows. Simple rule flows are transferred as decisions. You cannot transfer complex rule flows (rule flows that use BY-group processing) from SAS 9.4 to SAS Viya. You must recreate these rule flows as rule sets in the target environment. Note: For rule expressions that use macros, the macros are transferred, but you must replace the macros in the rule sets after the rule sets are imported to SAS Viya. IMPORTANT In order to use a lookup table that has been transferred to a new environment, you must do one of the following: nactivate the table in the new environment. For instructions for activating a lookup table by using the user interface, see “Activating a Lookup Table” in SAS Intelligent Decisioning: User’s Guide . ntransfer the formats data on SAS Cloud Analytic Services (CAS) and the SAS Micro Analytic Service module for the SAS Micro Analytic Service destination.",488
46,"44. Test definitions and test results for rule sets, models, and decisions are not transferred automatically when rule sets, models, and decisions are transferred. To transfer test definitions and test results that are in a folder, you can transfer the folder. To transfer test definitions and test results that were not saved in a folder, you must list the URI for each definition and results table in the transfer request. (Beginning with SAS Intelligent Decisioning 5.3, you can save test definitions and test results in a folder.) Output tables in CAS must be transferred manually. However, it is recommended that you re-create and rerun the test in the target environment instead of transferring the old output tables and test information. Transfer Treatments from SAS 9.4 to SAS Viya You can transfer treatments from SAS Real-Time Decision Manager on SAS 9.4 to SAS Intelligent Decisioning on SAS Viya. This process uses the sasmaextract integration utility that is distributed with SAS Customer Intelligence. The transfer process transfers custom detail names, values, and whether the custom details are dynamic or static. Custom details in SAS Real-Time Decision Manager become treatment attributes in SAS Intelligent Decisioning. The detail label becomes the attribute name. Static details become fixed attributes. Some custom detail properties such as whether a detail is required and the number of decimal places for a detail value are not applicable in SAS Intelligent Decisioning and are not transferred. Some custom detail properties are transferred but handled differently in SAS Intelligent Decisioning. nSAS Intelligent Decisioning does not support the data types time, week, month, quarter, or year. Custom details of these types become character attributes in SAS Intelligent Decisioning. nThe Decision Management API enables you to create attributes that define a range of values, but the SAS Intelligent Decisioning user interface displays range values as [object Object] . nIf a custom detail has a drop-down list of numeric values, the detail is transferred as an attribute that has a list of values. However, the list of attribute values contains only the default value from the drop-down list in SAS Real-Time Decision Manager. nIf a custom detail has a drop-down list of date values, the detail is not transferred as a list. It is transferred as a date attribute with the default value from the drop-down list in SAS Real-Time Decision Manager.",467
47,"45. 3Change to the directory C:\Program Files\SASHome\SASMarketingAutomationIntegrationUtilities\release . 4Copy the two stylesheets from the download package into the current directory. 5Create a file named extract_request.xml that contains the <MAExtractRequest> extract request. Specify the criteria for the treatments that you want to transfer. For example, to extract all of the treatments in the folder MyTreatments, specify the following request:<?xml version=""1.0""?><MAExtractRequest detail=""ALL""> <TreatmentDO>  <Folder operator=""="">   <Name operator=""="">MyTreatments</Name>  </Folder> </TreatmentDO></MAExtractRequest> You can also extract treatments based on treatment names, IDs, descriptions, and other criteria. For more information about information on specifying the criteria in this file, see “Treatments” in SAS Customer Intelligence Integration Utilities: User’s Guide . 6Execute the sasmaextract command. Specify pass_thru.xslt as the input style sheet and transform_treatments.xslt as the output style sheet.sasmaextract domain\user-ID password authorization-domain  business-context-of-the-treatments  extract_request.xml  output-filename  pass_thru.xslt  transform_treatments.xslt For more information about the sasmaextract command, see “Using the Extract Utility (Sasmaextract)” in SAS Customer Intelligence Integration Utilities: User’s Guide . 7Copy the output file to a location where it can be accessed by the sas-rtdmobjectmigration-cli CLI. 8Log off from the machine where SAS 9.4 is installed. 9On SAS Viya, run the sas-rtdmobjectmigration-cli CLI to import the treatments. For more information, see “Transfer Objects from SAS 9.4 to SAS Viya” in SAS Intelligent Decisioning: Command-Line Interfaces . Transfer Content from SAS Viya 3.5 Environments To transfer content from SAS Decision Manager 5.x or SAS Intelligent Decisioning 5.x on Viya 3.5 to the latest release of SAS Intelligent Decisioning on SAS Viya 4, use the SAS Administrative CLI on Viya 3.5 to export the content. For information, see SAS Viya 3.5 Administration: Promotion (Import and Export) .",481
48,"46. Transfer Content between SAS Viya 4 Environments To transfer SAS Intelligent Decisioning content between Viya 4 environments, use SAS Environment Manager or the transfer plug-in to the sas-viya CLI. When you export an object in SAS Environment Manager, you can select the Include dependencies check box to include dependent objects in the transfer package that SAS Environment Manager creates. When you use the sas-viya CLI to export an object, you can specify the --include-dependencies option to include dependent objects in the transfer package. The transfer service inspects the object that you are transferring and adds any additional objects that it finds to the package. For example, if you select the check box or specify the option when you export a treatment, the transfer package includes the eligibility rule set for the treatment and any version notes that are associated with different versions of the treatment. If you export a decision, the transfer package includes all of the information for any rule sets, treatment groups, lookup tables, subdecisions, and other objects (except models) that are used in the decision. It also includes objects that are used in subdecisions. Some object types are handled differently: nGlobal variables are automatically transferred when you transfer a rule set or a decision regardless of whether you select the option for including dependencies. However, if a global variable already exists in the target environment where you import the content, SAS Intelligent Decisioning does not overwrite the existing global variable with the imported version. nVersion notes are included in the transfer package, so you do not need to transfer the notes separately. Version notes in the transfer package are displayed as unnamed resources when you view the contents of the package in SAS Environment Manager. nModels are not included in the transfer package for a decision. For information about transferring models, see “Migrating Content between SAS Viya Environments” in SAS Model Manager: Administrator’s Guide . nCustom functions are not included directly in a decision, so they are not considered dependent objects and are not included in the transfer package. nVersion tags are not included in the transfer package for any objects. It is recommended that you assign new tags in the target environment. For more information about promotion process for Viya 4, see SAS Viya Platform: Content Migration from SAS Viya 4 . IMPORTANT After a treatment group is transferred to a new environment, you must activate the group in the new environment in order to use the group in a decision.",494
49,"47. nactivate the table in the new environment. For instructions for activating a lookup table by using the user interface, see “Activating a Lookup Table” in SAS Intelligent Decisioning: User’s Guide . ntransfer the formats data on SAS Cloud Analytic Services (CAS) and the SAS Micro Analytic Service module for the SAS Micro Analytic Service destination. The module name is shown on the Properties tab for the lookup table. Test definitions and test results for rule sets, models, and decisions are not transferred automatically when rule sets, models, and decisions are transferred. To transfer test definitions and test results that are in a folder, you can transfer the folder. To transfer test definitions and test results that were not saved in a folder, you must list the URI for each definition and results table in the transfer request. (Beginning with SAS Intelligent Decisioning 5.3, you can save test definitions and test results in a folder.) Output tables in CAS must be transferred manually. However, it is recommended that you re-create and rerun the test in the target environment instead of transferring the old output tables and test information. Transfer Content That Was Published to a CAS Destination You can transfer the published module for a rule set, decision, or model by using the transfer plug-in to the sas-viyasas-admin CLI. In the CLI command, identify the module that you want to transfer by specifying its URI in the following format:/modelPublish/destinations/destination_name/models/published_name Only the content that was included inline in the generated module is transferred. For CAS destinations, treatment groups and global variables are always included in the generated module. Lookup tables are included in the generated module only if the sas.businessrules.lookupStaticBinding configuration option was set to On when the content was published. If this option is set to Off when the content was published, you must transfer the lookup format library. When you transfer the library, all of the lookup tables that are activated in the source environment are also transferred.",406
50,"48. TIP You can export multiple items with one transfer request by specifying the items in a JSON file and specifying the JSON file as input to the CLI command. The JSON file contains two fields named name and items . For example, to export the modules for three different versions of the card_offers object, the JSON file might contain the following data:{ ""name"": ""Published Models"", ""items"": [  ""/modelPublish/destinations/CASPublic/models/card_offers1_0"",  ""/modelPublish/destinations/CASPublic/models/card_offers1_1"",  ""/modelPublish/destinations/CASPublic/models/card_offers1_2"" ]} Specify the JSON file name with the --request option in the CLI command. If this JSON is in a file named request.json , specify the following command to export all of the specified modules:sas-admin --profile source-profile transfer export --request @request.jsonsas-viya --profile source-profile transfer export --request @request.json 2Download the JSON package file. Specify the package ID and the JSON file name in the download command:sas-admin --profile source-profile transfer download --id ""8f32140f-34e1-42dd-8d85-f8129ff5dabb""  -f card_offers1_0.jsonsas-viya --profile source-profile transfer download --id ""8f32140f-34e1-42dd-8d85-f8129ff5dabb""  -f card_offers1_0.json 3Verify that the target server has a CAS publishing destination with the same name as the source server. To import the package successfully, the target server must have a CAS publishing destination with same name as the source server. For more information, see SAS Viya: Publishing Destinations . 4Use the upload command to upload the JSON file to the destination server:sas-admin --profile target-profile transfer upload -f card_offers1_0.jsonsas-viya --profile target-profile transfer upload -f card_offers1_0.json If the upload command is successful, the CLI prints a message that includes the ID of the transfer package. For example:{ ""description"": """", ""id"": ""ef4204f7-8a79-49ae-8d45-a7877f5e1e86"", ""links"": [  ...",491
51,"49. sas-viya --profile target-profile transfer import --id ""ef4204f7-8a79-49ae-8d45-a7877f5e1e86"" 6Verify that the import process completed successfully. Use the show command to display the export and import history for the package. To display the export history:sas-admin --profile source-profile transfer show  --id ""8f32140f-34e1-42dd-8d85-f8129ff5dabb"" --historysas-viya --profile source-profile transfer show  --id ""8f32140f-34e1-42dd-8d85-f8129ff5dabb"" --history To display the import history:sas-admin --profile target-profile transfer show  --id ""ef4204f7-8a79-49ae-8d45-a7877f5e1e86"" --historysas-viya --profile target-profile transfer show  --id ""ef4204f7-8a79-49ae-8d45-a7877f5e1e86"" --history For more information about using the transfer plug-in, see “How To (CLI)” in SAS Viya Platform: Content Migration from SAS Viya 4 . You can execute published modules by using the CAS Model Publishing and Scoring action set. For more information, see “Executing Content That Has Been Published to SAS Cloud Analytic Services Destinations” in SAS Intelligent Decisioning: User’s Guide . Managing Permissions About Permissions You use SAS Environment Manager to manage identities and authorization for SAS Viya. Information is available in the SAS Viya administration documentation: n“Authorization in SAS Viya” in SAS Viya Platform: Orientation to Authorization n“Identity Management: Overview” in SAS Viya: Identity Management nSAS Viya Platform: External Credentials You can configure user access based on folders, object types, or specific objects. You can control which categories appear in the user interface by controlling access to root endpoints. To grant full access to an object, a user must have access to all of the service endpoints (object URIs) that are associated with the object. For more information, see “Full Access and Service Endpoints” on page 54. The default permissions for SAS Intelligent Decisioning are described in “Default Permissions” on page 49.48",491
52,"5. nDecisions nMicro Analytic Score nReference Data nScore Execution nSubject Contact nTreatment Definitions For more information, see “Configuration Page” in SAS Environment Manager: User’s Guide and SAS Viya Platform: Configuration Properties . Business Rules Service Properties Verify the settings for the following configuration instances: n“jvm” n“sas.businessrules” n“sas.businessrules.checkout” n“sas.businessrules.publish” jvm Click New Configuration to define this configuration instance. jvm.java_option_xmx Specifies the JVM heap size of the Business Rules service.TipYou might need to increase the heap size if you are importing very large lookup tables. sas.businessrules sas.businessrules.additionalDS2Options Enables you to specify additional DS2 options that are not specified by other configuration options. Separate multiple options with a space. This option affects basic tests, scenario tests, and publishing validation tests for rule sets.DefaultMISSING_NOTE. This setting writes a note to the SAS log when an invalid function argument generates a missing value.See“DS2_OPTIONS Statement” in SAS DS2 Language Reference ExampleMISSING_NOTE DIVBYZERO=IGNORE MISSING TYPEWARN sas.businessrules.bootstrap.refreshPackages Specifies whether DS2 packages in the Micro Analytic Score service should be refreshed if they already exist.DefaultOff 4",267
53,"50. Default Permissions Rule sets, decisions, treatments, treatment groups, lookup tables, and custom code files are stored in folders. When these objects are created through the user interface, the default permissions are determined by the folder in which the object is stored. In SAS Environment Manager, each folder is assigned permissions that apply to the folder itself and permissions that apply to the objects within the folder. The permissions that apply to the objects within the folder are said to be conveyed to those objects within the folder. Global variables and custom functions are not stored in folders. The default permissions for these objects are controlled by authorization rules. By default, each member of the Authenticated Users group has permission to do the following: ncreate rule sets, lookup tables, treatments, treatment groups, code files, global variables, custom functions, and decisions in their own My Folder folder nin the Decision Repository folder, check out and commit objects that they created ncreate subfolders within the Decision Repository folder nupdate and delete any rule set, lookup table, treatment, treatment group, code file, global variable, custom function, or decision that was created in a folder to which the user has conveyed Update and Delete access ndelete a specific version of a rule set, lookup table, treatment, treatment group, global variable, or decision if they have Delete permission for the object nactivate any lookup table, global variable, or treatment group that was created in a folder to which the user has conveyed Update access npublish any rule set, decision, or model to which the user has Read access nrun a publishing validation test for any rule set, decision, or model that they published ncreate a test definition, including scenario test definitions, for any rule set or decision to which the user has Read access nupdate or delete the test definition that they created nrun the test and view the test results for any test definition that they created nrun a rule-fired analysis or decision-path tracking analysis and view the results for any test that they created and executed Default folders such as a user’s My Folder folder or the Decision Repository folder are assigned permissions so that any subfolders that are created within these folders inherit the permissions of the parent folder (unless the parent folder’s permission have been customized). For folder’s that are created directly under SAS Content , you must set permissions in SAS Environment Manager in order to enable users to access these folders. See “Folder-Based Permissions” on page 51 for more information.",493
54,"51. nModify permissions for a specific folder and the objects that are stored in that folder by using the Edit Authorization window for the folder. For more information, see the following topics: o“About Permission Types” on page 50 o“Best Practices for Setting Permissions” on page 51 oSAS Viya: General Authorization Window o“Folder-Based Permissions” on page 51 nModify the existing rules or create new rules. For more information, see the following topics: o“About Permission Types” on page 50 o“Best Practices for Setting Permissions” on page 51 oSAS Viya Platform: General Authorization o“Rules Page” in SAS Environment Manager: User’s Guide oSAS Viya: General Authorization Window o“Tasks Enabled by Default Rules for Object URIs” on page 54 o“Rules-Based Permissions” on page 53 nModify the existing user groups or create new ones. For more information, see the following topics: o“Custom Groups” in SAS Viya: Identity Management o“Manage Custom Groups” in SAS Environment Manager: User’s Guide o“Granting Access to Test Results” on page 56 o“Define Asset Approval Workflow User Groups” on page 57 About Permission Types There are two types of permissions that you might need to set for users to work in SAS Intelligent Decisioning : folder-based permissions and rules-based permissions.Table 3 Permissions Types for SAS Intelligent Decisioning Permissions TypeWhen to UseFolder-based permissionsFor objects that are stored in folders, it is recommended that you use folder-based permissions to control what tasks users can perform for those objects. The objects that are stored in folders are rule sets, decisions, treatments, treatment groups, lookup tables, and custom code files. Storing test definitions and test results in a folder is optional, but it is highly recommended. Storing test definitions and test results in a folder simplifies the tasks of setting permissions and transferring the files. For more information, see “Folder-Based Permissions” on page 51.Rules-based permissionsFor tasks associated with publishing and for objects that are not stored in folders, you must use rules-based permissions. The objects that are not stored in folders are custom functions and global variables.50",449
55,"52. Permissions TypeWhen to UseThe ability to store tests outside of folders is supported for legacy purposes only. If you choose not to store test definitions and test results in a folder, then you must use rules-based permissions to control access to these files. For more information, see “Rules-Based Permissions” on page 53. Best Practices for Setting Permissions To the extent possible, base your permission settings on the folders in which objects are stored. Use folders to organize objects according to which group of users need access to the objects. Customize the permission settings for your folders based on user groups, not on individual users. If your site needs separate folders that are enabled for the check-out and commit feature, it is recommended that you create these folders in the /Decision Repository folder. Subfolders in the repository inherit the default settings for the /Decision Repository folder. TIP Rules for which the setting is Prohibit take precedence over all other rules for that URI. For example, if the same user belongs to a prohibited group and to an authorized group, the prohibited assignment takes precedence over the authorized assignment. When you enter a rule that specifies Prohibit , make the URI for that rule as specific as possible. Folder-Based Permissions Setting Folder-Based Permissions You must set permissions in SAS Environment Manager for any folder that is created as a new top- level folder under SAS Content . For default folders such as the My Folder folder or the Decision Repository folder, you must modify the permissions of folders that you create within these two folders if you do not want them to inherit the permissions of the parent folder. 1Click , and select Manage Environment to switch to SAS Environment Manager. 2Click to navigate to the Content page. 3Navigate to the folder for which you want to set permissions. 4Right-click the folder name, and select Edit authorization . The Edit Authorization window appears. 5For any permission setting that you want to change, click the effective access icon in the column for that permission, and change the setting in the pop-up window. For more information about 51",414
56,"53. setting permissions in this window, see SAS Viya: General Authorization Window and “Folder- Based Permission Settings for SAS Intelligent Decisioning Tasks” on page 52. 6Click Save to save your changes and close the Edit Authorization window. Folder-Based Permission Settings for SAS Intelligent Decisioning Tasks The following table lists the folder permissions that are required to work with the objects that are stored in a folder. The permissions listed in this table assume that the permissions described in “Default Permissions” have not been customized.Table 4 Folder-Based Permission Settings for Tasks in SAS Intelligent Decisioning TaskFolder PermissionsMake objects in a folder visible to usersReadSave an object in a folderUpdateCreate a new objectAddCreate a new version of an objectUpdateDuplicate an objectAdd, UpdateRename an objectUpdateCopy a version of an objectUpdateActivate a lookup table or a treatment groupUpdateDelete an objectDeleteMove an object from folder A to folder BRemove (folder A) Add (folder B)Validate a decisionReadCreate a test definitionAddRun a testAddRerun a previously run testAdd, DeleteCheck out and commit objectsRead, Add, Update 52",232
57,"54. Rules-Based Permissions Setting Rules-Based Permissions 1Click , and select Manage Environment to switch to SAS Environment Manager. 2Click to navigate to the Rules page. 3Click to create a new rule, or select a rule, and click to modify an existing rule. 4Edit the rule’s settings and click Save . You can click in the window for information about specific fields. For the object URIs for SAS Intelligent Decisioning , see “Tasks Enabled by Default Rules for Object URIs” on page 54. For additional information about rule settings, see SAS Viya Platform: General Authorization . Rules-Based Permission Settings for Publishing Tasks The following table lists the permissions that are required to customize the ability to publish objects to specific destinations.Table 5 Rules-Based Permission Settings for Publishing Tasks TaskURIRule TypePermissionsView available publishing destinations/modelPublish/destinations/**GrantReadPublish objects to any destination/modelPublish/destinations/**GrantRead/modelPublish/models/**GrantCreatePublish objects to only one specific destination/modelPublish/destinations / destination-nameGrantRead/modelPublish/models/**GrantCreateProhibit users from viewing a specific destination/modelPublish/destinations / destination-nameProhibitRead TIP Rules for which the setting is Prohibit take precedence of all other rules for that URI. When you enter a rule that specifies Prohibit , make the URI for that rule as specific as possible.53",280
58,"55. You can also specify rules for other SAS Intelligent Decisioning URIs. The SAS Intelligent Decisioning URIs are listed in “Tasks Enabled by Default Rules for Object URIs” on page 54 Full Access and Service Endpoints In order to have full access to an object, a user must have access to the folder that contains the object, to the specific object, to any additional objects that are referenced by the object, and to the service endpoints for all object types. For example, in order to have full access to a specific decision, the user must have access to the following: nthe folder that contains the decision. nthe folder that contains the test definition and test results. nthe decision, plus any rule sets, lookup tables, models, treatment groups, code files, global variables, custom functions, and nested decisions that are included in the decision. nthe service endpoints for the object types for the folder, the decision, and all of the objects that are included in the decision. If the decision contains a model, the endpoints for the model repository and the model project (if the model is in a project) must be included. nthe service endpoints for the object types that are needed to create and run a decision test: /scoreDefinitions/definitions and /scoreExecution/executions . Alternatively, if you are using the SASScoreUsers group, the user can be a member of the SASScoreUsers group. See “Granting Access to Test Results” on page 56 for more information. nthe service endpoints that are needed to publish the decision: /modelPublish/destination and / modelPublish/destination/{ destination }. Service endpoints for specific object types are represented by the object URIs. These object URIs are shown in “Tasks Enabled by Default Rules for Object URIs” on page 54. You grant permissions for object URIs by creating or modifying rules in SAS Environment Manager. For more information, see “Setting Rules-Based Permissions” on page 53 and “Rules Page” in SAS Environment Manager: User’s Guide . Note: If a user has access to a decision but does not have access to an object that is referenced in the decision, SAS Intelligent Decisioning displays next to the object name. Tasks Enabled by Default Rules for Object URIs Permission rules for object URIs are defined in SAS Environment Manager. By default, general rules are defined for all object URIs in SAS Intelligent Decisioning.",492
59,"56. Object URITasks/businessRules/ruleSetsCreate, read, update, and delete rule sets. Create and delete versions of rule sets. Generate SAS code for rule sets./businessRules/rulesImport and export rule sets./decisionsView the Decisions category./decisions/codeFilesCreate, read, update, and delete custom code files./decisions/commons/validations/ codeFilesValidate code file content. Code file content is validated when you save the code file./decisions/flowsCreate, read, update, and delete decisions. Create and delete versions of decisions. Generate SAS code for decisions./folders/foldersCreate and read folders./folders/folders/ folder-ID Create, read, update, and delete the specified folder./businessRules/ functionCategoriesCreate, read, update, and delete custom function categories./businessRules/ functionCategories/ category-ID / functionsCreate custom functions in the specified category./businessRules/functions/ function-IDRead, update, and delete the specified custom function./modelPublish/models/**Publish rule sets, models, and decisions to a publishing destination./modelPublish/destinationsDefine new publish destinations./modelPublish/destinations/ {destinationName }Update or delete an existing destination. Publish content to the specified destination, and read published content in the specified destination./referenceDataView the Lookup Tables and Global Variables categories. Create, read, update, and delete lookup tables and global variables. Import and export lookup tables. Create, delete, and activate versions of lookup tables and global variables./referenceData/domainsCreate, read, update, and delete lookup tables. Create, delete, and activate versions of lookup tables./referenceData/domainEntriesImport and export lookup tables./referenceData/globalVariablesCreate, read, update, and delete global variables. Create, delete, and activate versions of global variables.55",369
60,"57. Object URITasks/scoreDefinitions/definitions/**Create, read, update, and delete rule set tests, decision tests, model tests, and publishing validation tests in the user interface and in the score definition service./scoreExecution/executions/**Run rule set tests, decision tests, model tests, and publishing validation tests in the user interface and the score execution service. Run rule-fired analyses and decision-path tracking analyses./subjectContacts/contacts/**Create, read, update, and delete subject contact records./subjectContacts/traces/**Create, read, update, and delete variable assignment records and variable change path records that are generated by scenario tests for decisions./treatmentDefinitionsView the Treatment Definitions category./treatmentDefinitions/ definitions/**Create, read, update, and delete treatment definitions./treatmentDefinitions/ definitionGroups/**Create, read, update, and delete treatment group definitions. Granting Access to Test Results Granting Access to Tests That Are Created in SAS Intelligent Decisioning 5.3 or Later When you create a new rule set test or decision test in SAS Intelligent Decisioning 5.3 or later, you can specify a folder in which the test definition and the test results are stored. For tests that are saved in folders, access is based on the permissions for the folders, the object types, or the specific objects as described in “Full Access and Service Endpoints” on page 54. Note: You can control access to tests that are created in SAS Intelligent Decisioning 5.4 or later by using the SASScoreUsers group. However, it is recommended that you store test definitions and results in folders. The ability to store tests outside of folders and the use of the SASScoreUsers group for rule set and decision tests is supported for legacy purposes only.56",362
61,"58. Granting Access to Tests That Were Created in SAS Decision Manager 5.1 or 5.2 on SAS Viya In SAS Decision Manager 5.1 and 5.2, you could not save test definitions and test results in a folder. By default, SAS Decision Manager created rules that gave only the user who created a test permission to view, update, or delete the test definition and to run the test. Only a user who ran a test could view the test results and run rule-fired analyses or decision-path tracking analyses. To grant other users access to test definitions or test results that were created in SAS Decision Manager 5.1 or 5.2, do one of the following: nAdd the users to the SASScoreUsers group. SAS Intelligent Decisioning configures the SASScoreUsers group automatically. Members of this group have full access to test definitions and results. These permissions enable access through the user interface, the score definition service, and the score execution service. For instructions on adding users to a group, see “Manage Custom Groups” in SAS Environment Manager: User’s Guide . nCreate rules in SAS Environment Manager that grant the users access to the URIs that were generated when a particular test was run. The Test Results page, Rule-Fired Analysis page, and Decision Path Tracking page for a test list the URIs to all of the test results. Specify the URIs of the results in the Object URI field in the New Rule window. See “Rules Page” in SAS Environment Manager: User’s Guide for more information. Note: Each time a test is run, the IDs for the test results are regenerated. Therefore, the URI to the test results changes. Define Asset Approval Workflow User Groups If you enable the SID Asset Approval workflow by turning on the sas.decisions.workflow.enabled configuration property, then you must define the custom user groups shown in Table 7 on page 58. Define these groups in SAS Environment Manager, and assign the appropriate users to each group. Membership in these groups is required to be able to set the workflow status values for a decision version. The group determines which status changes the group’s members can make for a version that is under development. To create the workflow user groups: 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning as an administrator, access SAS Environment Manager by clicking and selecting Manage Environment .",496
62,"59. bEnter a name for the group. cEnter the group ID as it appears in Table 7 on page 58. d(Optional) Enter a description for the group. eClick Save . fAdd the appropriate users to the new group. For instructions, see “Add or Remove Custom Group Members” in SAS Environment Manager: User’s Guide .Table 7 SAS Intelligent Decisioning Asset Approval Workflow Groups Group IDPermissionsSIDWFAuthor Change status values: nfrom Developing to Review-ready nfrom Review-ready to DevelopingSIDWFReviewer Change status values: nfrom Review-ready to Approved nfrom Review-ready to DevelopingSIDWFDeployer Change status values: nfrom Approved to Deployment-ready nfrom Deployment-ready to Deployed nfrom Deployment-ready to Approved nfrom Deployment-ready to Developing nfrom Approved to DevelopingSIDWFAdmin Make all status changes TIP Members of the groups listed in “Granting Access to the History of Workflow Status Changes” on page 58 also have permission to make all status changes and to view workflow status change histories. Granting Access to the History of Workflow Status Changes Groups That Can Access Workflow Status Changes To display the history of workflow status changes for decisions, users must be a member of one of the following groups:58",251
63,"6. sas.businessrules.dataGridMetadataGenerating Specifies whether DS2 packages that are published to SAS Micro Analytic Service destinations have two methods (step IDs), datagrid_metadata and datagrid_metadata_skel , that you can use to determine the data grid metadata that is applicable to the rule flow. When this property is set to On, you can post a request to these steps to get data grid metadata. See Execute a step in the SAS Viya REST API documentation.DefaultOff sas.businessrules.deleteVersions Enables users who have permission to delete rule sets to delete specific versions of rule sets.DefaultOn sas.businessrules.execution.threadCount Specifies the maximum number of threads that can be allocated for executing DS2 code packages.Default4 sas.businessrules.inlineGlobalVariableValues specifies whether the current values of global variables are included inline in generated code when you publish a rule set to CAS or to SAS Micro Analytic Service destinations. When this property is set to On, the current value of each global variable is included in the code that is generated for these destinations. Changes to the values of the variables do not affect published rule sets. When this property is set to Off, the generated code uses a SAS format or a SAS Micro Analytic Service module to retrieve the current value of the global variable when the rule set is run.DefaultOnSee“Activating a Global Variable” in SAS Intelligent Decisioning: User’s Guide sas.businessrules.inputVariableReadOnly Determines whether the values of character variables that are designated as input-only variables are available to all objects in a decision. When inputVariableReadOnly is set to Off and the value of an input-only character variable is modified in a rule set, the modified value is passed back to the parent decision and is available to the remaining objects in the decision. When this property is set to On, modified values are not passed back to the parent decision and are available only within the rule set in which the value was modified.DefaultOff sas.businessrules.logicalExpression Specifies whether SAS Intelligent Decisioning adds the DS2 option LOGICALEXPR= to the code that it generates for rule sets. The LOGICALEXPR= option specifies how logical AND and OR expressions are evaluated.",442
64,"60. nSAS Administrators. Members of this group can view and modify workflow history items, but they have access to workflow history items only if the Workflow Administrator group is not defined. For more information, see “Predefined Custom Groups” in SAS Viya: Identity Management . nApplication Administrators. Members of this group can view and modify workflow history items, but they have access to workflow history items only if the Workflow Administrator group is not defined. For more information, see “Predefined Custom Groups” in SAS Viya: Identity Management . nWorkflow Administrator. Members of this group can view and modify workflow history items. For more information, see “Configure the Default Workflow Administrator Group” in SAS Workflow Manager: Administrator’s Guide . nWorkflowHistoryView. Members of this group can view workflow history records, but they cannot modify the workflow history. This group can view workflow history items even if the Workflow Administrator group is defined. For more information, see “Define the WorkflowHistoryView Administrators Group” on page 59. Define the WorkflowHistoryView Administrators Group 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning as an administrator, access SAS Environment Manager by clicking and selecting Manage Environment . 2Click to navigate to the Users category view. 3In the View menu, select Custom groups . 4Click . The New Custom Group window appears. 5Enter a name for the group. 6Enter the group ID WorkflowHistoryView . 7(Optional) Enter View the workflow status change history as the group description. 8Click Save . 9Add the appropriate users to the new group. For instructions, see “Add or Remove Custom Group Members” in SAS Environment Manager: User’s Guide . Set Permissions for Check-Out Folders TIP If your site needs separate folders that are enabled for the check-out and commit feature, it is recommended that you create these folders in the /Decision Repository folder. Subfolders in the repository inherit the default settings for the decision repository. If you create check-out folders outside of the /Decision Repository folder, you must manually set permissions for these folders in order to force users to check out the objects in these folders before modifying the objects. To manually set the permissions for check-out folders:59",467
65,"61. 1Click , and select Manage Environment . 2Click , navigate to the folder, and copy the URI of the folder into your paste buffer. You paste this URI into the Object URI or Container URI fields in the New Rule window in subsequent steps. 3Click to display the Rules page. 4Click , and enter the values shown in the following table in the New Rule window.Table 8 Permissions for Managing Folder Subdirectories FieldValueObject URIEnter the URI of the check-out folder: /folders/folders/guid Principal typeAuthenticated UsersRule typeGrantPermission sRead , Add DescriptionEnable authenticated users to read and add subdirectories in the check-out folder. 5Click Save . 6Click , and enter the values shown in the following table in the New Rule window.Table 9 Permissions for Managing Folder Contents FieldValueContainer URIEnter the URI of the check-out folder: /folders/folders/guid Principal typeAuthenticated UsersRule typeGrantPermission sRead , Add DescriptionEnable authenticated users to add items to and read objects from the check-out folder. 7Click Save . 8Click , and enter the values shown in the following table in the New Rule window.60",240
66,"62. Table 10 Permissions for Committing Updated Versions FieldValueContainer URIEnter the URI of the check-out folder: /folders/folders/guid Principal typeAuthenticated UsersRule typeGrantConditionrequestUri().endsWith('/revisions') Permission sUpdateDescriptionEnable authenticated users to create new versions in the check-out folder. 9Click Save . 10Click , and enter the values shown in the following table in the New Rule window.Table 11 Permissions for Committing Lookup Tables FieldValueContainer URIEnter the URI of the check-out folder: /folders/folders/guid Principal typeAuthenticated UsersRule typeGrantConditionrequestUri().startsWith('/referenceData/domains/') && requestUri().contains('/contents') && !requestUri().endsWith('/entries') Permission sUpdateDescriptionEnable authenticated users to commit lookup tables that are in the check-out folder. 11Click Save . 12Click , and enter the values shown in the following table in the New Rule window.61",193
67,"63. Table 12 Permissions for Activating Treatment Groups FieldValueContainer URIEnter the URI of the check-out folder: /folders/folders/guid Principal typeAuthenticated UsersRule typeGrantConditionrequestUri().startsWith('/treatmentDefinitions/definitionGroups/') && requestUri().endsWith('/active') Permission sUpdateDescriptionEnable authenticated users to activate treatment groups that are in the check-out folder. 13Click Save . Grant Permission to Create Versions in Check-Out Folders by Using Tags For information about using tags to create a new version of a decision, see “Creating a New Version by Using Tags” in SAS Intelligent Decisioning: User’s Guide . 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning as an administrator, access SAS Environment Manager by clicking and selecting Manage Environment . 2Create a new group for the users to whom you want to grant permission. For instructions, see “Custom Groups” in SAS Viya: Identity Management . 3Click to display the Rules page. 4Click to open the New Rule window, and enter the values shown in the following table.Table 13 Permissions for Creating Decision Versions in Check-Out-Enabled Folders by Using Tags FieldValueObject URIEnter the following capability: /capability/sas/sid/createVersionFromTagInCheckoutFolder 62",272
68,"64. FieldValuePrincipal typeGroupPrincipalEnter the name of the group that you created in Step 2 . Rule typeGrantPermission sReadDescriptionEnable users in the group group-name to create new versions of decisions that are in a check-out folder by using tags. 5Click Save . Reloading Lookup Tables When CAS Is Restarted IMPORTANT All the CAS configuration instances are disabled by default, which means that processing is not enabled for any modifications to the configuration instances in SAS Environment Manager. In order to modify the cas-shared-default configuration instances, a Kubernetes administrator must set SAS_ALLOW_ADMIN_SCRIPTS to True in sas-shared-config configMap . For instructions, see the file $deploy/sas-bases/overlays/sas-programming-environment/README.md . For more information, see “Edit Server Configuration Instances” in SAS Environment Manager: User’s Guide . Also, you must restart the CAS server after you make changes to the cas-shared-default configuration settings. Whenever SAS Cloud Analytic Services (CAS) is restarted, you must either manually reactivate lookup tables, or you must enable them to be reloaded automatically. To enable the lookup tables to be reloaded automatically, add the formats library to the formats search path. The name of the formats library is specified by the sas.referencedata.casformats.formatsLibrary configuration property. The default formats library is USERFORMATS3. To add the default formats library to the formats search path: 1Sign in to SAS Environment Manager as an administrator. Note: If you are already logged in to SAS Intelligent Decisioning as an administrator, access SAS Environment Manager by clicking and selecting Manage Environment .63",335
69,"65. 2Click to navigate to the Configuration category view. 3In the View menu, select Definitions . 4Select the sas.cas.instance.config definition. 5Click beside the cas-shared-default: startup configuration instance to edit its properties. The Edit Configuration window appears. 6Copy and paste the following code into the contents field.s:sessionProp_addFmtLib{caslib=""Formats"",fmtLibName=""userformats3"",name=""userformats3.sashdat"",promote=true}newFmtSearch = "" userformats3"" newFmtSearch = ((cas.fmtsearch or """") .. "" "" .. newFmtSearch) s:configuration_setServOpt{fmtsearch=newFmtSearch}s:table_loadTable{caslib=""Formats"", casOut={caslib=""Formats"",replication=0.0}, path=""userformats3.sashdat"", promote=true} 7Click Save . 8Restart CAS. See “SAS Cloud Analytic Services: How To” in SAS Viya: SAS Cloud Analytic Services for more information. Note: The values that are specified for the CAS library and format library must match the values that are specified for the casformats.backupLibrary and casformats.formatsLibrary configuration properties. For more information, see “Reference Data Service Properties” on page 15. For more information, see “Configuration Page” in SAS Environment Manager: User’s Guide , SAS Viya Platform: Configuration Properties , and “Managing User-Defined Formats in SAS Viya” in SAS Viya: Data . Managing Test Data When you run a rule set, model, or decision test, several files are created. The URI to the test definition and all of the test results are displayed on the Test Results page. By default, when you re-run an existing test, the previous test results are not deleted before the new results are generated. This behavior is controlled by the deleteExecutions configuration property. To automatically delete test results when a test is re-run, set the deleteExecutions configuration property to True. See “Score Execution Service Properties” on page 17 for more information. When a test definition is deleted, the associated test results are normally deleted. However, the deletion transaction might be interrupted or the user might not have permission to delete output tables on CAS.",467
70,"66. SAS® and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. ® indicates USA registration. Other brand and product names are trademarks of their respective companies. Copyright © 2023, SAS Institute Inc., Cary, NC, USA. All Rights Reserved. August 2023 v_016-P1:edmag65",82
71,67. 66,4
72,"7. NoteThis option applies to both published code and test code.See“LOGICALEXPR=STANDARD | OPTIMIZED” in SAS DS2 Language Reference sas.businessrules.lookupStaticBinding Specifies whether published rule sets and decisions use new versions of lookup tables that were activated after the rule set or decision was published. When this property is set to On, SAS Intelligent Decisioning generates a static version of the active version of the lookup table and embeds it in the code that is generated for the published object. Newly activated versions of lookup tables are ignored by the published objects. IMPORTANT If you publish an object that uses a lookup table to a Teradata or Hadoop destination, set this option to On. Code that is generated for Teradata and Hadoop destinations work correctly only when lookup tables are included in the generated code. Lookup tables are automatically embedded in objects published to container destinations. This configuration option is ignored for container destinations. For more information, see “Controlling Where Lookup Tables Are Activated And How They Are Used” in SAS Intelligent Decisioning: User’s Guide .DefaultOff sas.businessrules.messageLimit Specifies whether SAS Intelligent Decisioning adds the DS2 option MSGLIMIT= to the code that it generates for rule sets. The MSGLIMIT= option specifies the maximum number of error, warning, and note messages that can be written to the SAS log while the code executes.Default1024RestrictionThis configuration option is valid only when sas.businessrules.messageOrder is set to TEMPORAL.See“MSGLIMIT=n | MIN | MAX” in SAS DS2 Language Reference sas.businessrules.messageOrder Specifies whether SAS Intelligent Decisioning adds the DS2 option MSGORDER= to the code that it generates for rule sets. The MSGORDER= option specifies whether DS2 writes error, warning, and note messages to the SAS log as they are produced or after the code executes. Valid option values are STANDARD and TEMPORAL.STANDARDspecifies that DS2 writes the messages after the code executes. PUT statement messages precede the diagnostic messages in the log.TEMPORALspecifies that DS2 writes the messages as they are produced.",438
73,"8. displayed in the SAS log for the DS2 variable declaration strict mode. This mode requires that every variable must be declared in the DS2 program. This option affects basic tests, scenario tests, and publishing validation tests for rule sets. You can specify the following settings:WARNINGwrites warning messages to the SAS log.NONEno messages are written to the SAS log.NOTEwrites notes to the SAS log.ERRORwrites error messages to the SAS log.DefaultWARNINGSee“SCOND” in SAS DS2 Language Reference sas.businessrules.variableLengthOverridden Specifies whether you can override the default length for input-only and input-output character variables in rule sets. When this property is set to Off, the lengths for these variables are based on the length of the input columns to which the variables are mapped. When this property is set to On, SAS Intelligent Decisioning uses the lengths that you specify when you create the variables. For more information, see “Managing the Variables in a Decision” in SAS Intelligent Decisioning: User’s Guide .DefaultOff sas.businessrules.checkout sas.businessrules.checkout.allowConcurrentCheckout Controls whether the same rule set can be checked-out by multiple users at the same time.DefaultONSee“Concurrently Checking Out and Committing Rule Set Versions” in SAS Intelligent Decisioning: User’s Guide sas.businessrules.checkout.checkoutEnabledFolderPaths Specifies the list of folder paths whose rule sets can be or must be checked out before they can be edited. Separate path names with commas.Default/Decision Repository TipPermissions are set on the default folder, /Decision Repository , so that users are required to check out the objects in this folder before they can be edited. Similar permissions are not automatically set on any additional folders that you specify with this configuration option. You must explicitly set the permissions in order to require that the objects in the additional folders are checked out before they are modified. See “Set Permissions for Check-Out Folders” on page 59 for more information.Example/Public/checkout sas.businessrules.publish sas.businessrules.publish.hideRuleSetPublish Specifies whether to hide the Publish button for rule sets. When this property is turned on, rule sets cannot be published independently from the user interface. They must be included in a 7",456
74,"9. decision, and the decision must be published. Rule sets can still be published by using the REST API when this property is turned on. If you are using the SAS Intelligent Decisioning approval workflow, it is recommended that you turn this option on so that all published content is developed in the workflow.DefaultOff Decisions Service Properties Verify the settings for the following configuration instances: n“jvm” n“sas.decisions” n“sas.decisions.checkout” n“sas.decisions.codefiles” n“sas.decisions.masnode” n“sas.decisions.nodetraces” n“sas.decisions.variable.length” n“sas.decisions.workflow” n“sas.subjectcontacts.datagrid” n“sas.treatmentdefinitions.datagrid” jvm Click New Configuration to define this configuration instance. jvm.java_option_xmx Specifies the JVM heap size of the Decisions service. sas.decisions sas.decisions.additionalDS2Options Enables you to specify additional DS2 options that are not specified by other configuration options. Separate multiple options with a space. This option affects basic tests, scenario tests, and publishing validation tests for decisions.DefaultMISSING_NOTE. This setting writes a note to the SAS log when an invalid function argument generates a missing value.See“DS2_OPTIONS Statement” in SAS DS2 Language Reference ExampleMISSING_NOTE DIVBYZERO=IGNORE MISSING TYPEWARN 8",291
75," 1. SAS® Intelligent Decisioning: Command- Line Interfaces 2021.1.2 - 2021.1.5**This document might apply to additional versions of the software. Open this document in SAS Help Center and click on the version in the banner to see all available versions. SAS® Documentation October 11, 2022",71
76," 10. Dictionary dcmtransfer Plug-In Enables you to transfer rule sets, rule flows, lookup tables, and decisions from a SAS 9.4 environment to a SAS Viya environment. Requirement: You must create a profile and sign in before you use the CLI. See “Creating and Using Profiles” on page 2 for more information. Notes: Data tables, tests, comments, attachments, and version information are not transferred from SAS 9.4 to SAS Viya. Vocabularies are not transferred, but the terms used in rule sets and decisions are transferred within those objects. Lookup tables must be activated in the target environment. See “Activating a Lookup Table” in SAS Intelligent Decisioning: User’s Guide for more information. To transfer content between SAS Viya environments, use the transfer plug-in to the sas- viya CLI. All of the content is transferred except for notes that are associated with specific versions of the objects. For more information, see “Command-Line Interface: Overview” in SAS Viya: Using the Command-Line Interface and “Transfer Version Comments” on page 29. See: “Global Options” on page 4 “Global Commands” on page 3 Syntax sas-viya <global-options > dcmtransfer command <command-options > Commands In addition to the global commands in “Global Commands” on page 3, you can specify the following commands: authenticate9x subcommand <options > logs you in to and out of the SAS 9.4 environment. You can specify the following subcommands: login logs you in to the SAS 9.4 environment. The login subcommand accepts these options: --password password specifies your password. --service-endpoint protocol ://host_name :port specifies the URI for the SAS 9.4 environment.6Chapter 2 / SAS Intelligent Decisioning CLIs",379
77," 11. NoteDo not specify localhost . You must provide a fully qualified host name.Examplehttp://mySAS94server:7980 --user user-id specifies your user ID.TipIf you do not specify any options, the login subcommand prompts you for the SAS 9.4 service endpoint, user ID, and password. logout logs you out of the SAS 9.4 environment.Aliasauth9x export9x object-type <export-options > exports the specified object types from SAS 9.4. For the object type, specify one of the following: decisions , lookups , ruleflows , or rulesets . If you do not specify any options, the CLI prompts you for the required information. Note: Beginning with SAS Intelligent Decisioning 5.1, SAS Intelligent Decisioning does not support rule flows. You cannot export complex rule flows. However, you can export simple rule flows from previous releases of SAS Intelligent Decisioning and import them as decisions into the current release. If you specify ruleflows , the rule flows are exported as decisions. If you specify decisions , information about the rule flows that are referenced in the decision is added to the mapping file for the decision.See“Options for the export9x Command” on page 7 “Transfer Content from a SAS 9.4 Environment to a SAS Viya Environment” on page 10 import9x object-type <import-options > imports SAS Intelligent Decisioning objects into SAS Viya. For the object type, specify one of the following: decisions , lookups , ruleflows , or rulesets .See“Options for the import9x Command” on page 9 “Transfer Content from a SAS 9.4 Environment to a SAS Viya Environment” on page 10 Options for the export9x Command TIP For information about using the at sign (@) to specify filenames, see “Details” in SAS Viya: Content Migration from SAS Viya 4 . --content @ filename specifies the name of the file to which you want to write the exported content.Defaultcontent.json dcmtransfer Plug-In 7",427
78, 12. --mappings @ filename specifies the name of the mapping file. This file describes the relationship between the exported content and any associated objects.Defaultmappings.jsonSee“Modifying the Mapping File” on page 12 --report @ filename specifies the file to which you want the CLI to write messages that are generated while the content is exported.Defaultexport_report.json --uri URI specifies the URI for the objects that you want to export. This option is required. You can specify the URI in any of the following forms. --uri /SASBusinessRulesManagerWeb/rest/ object-type ?limit=214783647 --uri /SASDecisionManager/rest/decisions?limit=214783647 specifies all objects of the type object-type up to a maximum of 21478367. (This number is the maximum value for an integer.) --uri /SASBusinessRulesManagerWeb/rest/ object-type ?filter_query --uri /SASDecisionManager/rest/decisions? filter_query specifies all objects that meet the filter criteria and that are of the type specified by the object-type argument.RestrictionYou cannot use a filter query to specify lookup tables.See“Query Parameters for the --uri Option” on page 11 --uri /SASBusinessRulesManagerWeb/rest/ object-type /object-ID --uri /SASDecisionManager/rest/decisions/ object-ID specifies the object with the ID object-ID that matches the type specified by the object-type argument. --uri /SASWIPClientAccess/rest/navigation/814100/ folder-ID specifies all of the objects in the folder with the ID folder-ID that match the type specified by the object-type argument.RestrictionThis form is not valid for exporting decisions.TipThe number 814100 is the object type for a business rules folder. --uri /SASWIPClientAccess/rest/navigation/814100/DCMFOLDER_ROOT_ID specifies all objects in the business rules database that match the type specified by the object-type argument.RestrictionThis form is not valid for exporting decisions.TipDCMFOLDER_ROOT_ID is the ID for the root folder. --uri @ filename .txt specifies all of the objects that are identified by the URIs in the specified text file. The URIs in the text file must all be URIs for objects of the type specified by the object-type argument. Each URI must be on a separate line.8Chapter 2 / SAS Intelligent Decisioning CLIs,494
79," 13. Options for the import9x Command TIP For information about using the at sign (@) to specify filenames, see “Details” in SAS Viya: Content Migration from SAS Viya 4 . --content @ filename specifies the file that contains the objects that you want to import.Defaultcontent.json --force <true | false> specifies whether you want existing objects to be replaced if they already exist in the target SAS Viya environment. If you specify true , then existing objects with the same name are deleted and re-created from the imported content. If you specify false , error messages are generated for the duplicate objects. The CLI searches the SAS Viya environment for existing objects before it imports new objects. The search criteria that the CLI uses to determine whether an object already exists depends on the information in the mapping file. If the target information for an object is available, the CLI uses it as the search criteria. If the target information is not available, the CLI uses the source information. For example, if you are importing a rule set, the CLI uses the target.id and target.revisionId as the search criteria. If that information is not available, it uses the source.name and source.folderpath . Specifying --force without specify true or false is equivalent to specifying --force true .Alias-fDefaultfalseSee“Modifying the Mapping File” on page 12 --mappings @ filename specifies the name of the mapping file.Defaultmappings.jsonSee“Modifying the Mapping File” on page 12 --report @ filename specifies the file to which you want the CLI to write messages that are generated while the content is imported.Defaultimport_report.json --target-folder-path / pathname Specifies the folder in the SAS Viya environment that you want to import the decisions into.Default/PublicRestrictionThis option is valid only when the object type in the import9x subcommand is decisions .dcmtransfer Plug-In 9",386
80," 14. Details Transfer Content from a SAS 9.4 Environment to a SAS Viya Environment Note: See “Command-Line Interface: Preliminary Instructions” in SAS Viya: Using the Command-Line Interface for additional information. To transfer business rules and decision content from a SAS 9.4 environment to a SAS Viya environment: 1Log on to the machine where SAS Viya is running. For example, on Linux systems, you can use the ssh command:ssh -y machine-name 2Use the cd command to change to the directory where you downloaded the plug- in files. 3Create a default profile if you have not already done so:sas-viya profile init The CLI prompts you for the URL (service endpoint) for SAS Viya, for the output type that you want, and whether you want to enable color output. For more information, see “Create at Least One Profile” in SAS Viya: Using the Command- Line Interface . 4Log on to the SAS Viya environment:sas-viya auth login The CLI prompts you for the user ID and password for the SAS Viya environment. 5Log on to the SAS 9.4 environment:sas-viya dcmtransfer auth9x login The CLI prompts you for the URL (service endpoint) for the SAS 9.4 environment and the user ID and password for that environment. 6Export the SAS 9.4 content:sas-viya dcmtransfer export9x object-type <export-options> If you do not specify any options, the CLI prompts you for the required information. By default, the export9x command creates three files: contents.json This file contains the exported content. Do not modify the contents of this file. mappings.json This file describes the relationships between the exported content and any associated objects. For example, if you export rule sets, the mapping file contains information about any lookup tables that are referenced in the rule sets and all folders where the rule sets and lookup tables reside. You can modify some of the data in this file before you import content into the SAS 10Chapter 2 / SAS Intelligent Decisioning CLIs",437
81," 15. Viya environment. For more information, see “Modifying the Mapping File” on page 12. export_report.json This file contains any messages that were generated when the content was exported. You can use the --content , --mappings , and --report options to change these filenames. 7Import the content into the SAS Viya environment:sas-viya dcmtransfer import9x object-type <import-options> By default, the import9x command looks for a file named contents.json that contains the content that was exported from SAS 9.4, and a file named mappings.json that describes the relationship between the exported content and any associated objects. If you specified the --content or --mappings options on the export9x command in Step 6 on page 10, then specify the same options on the import9x command. Note: When you view imported content in SAS Intelligent Decisioning , any errors in the content are marked with the error icon . 8Log off from the SAS 9.4 environment:sas-viya dcmtransfer auth9x logout 9Log off from the SAS Viya environment:sas-viya auth logout Query Parameters for the --uri Option The following table lists the query parameters that you can specify as part of the URI when you are exporting SAS 9.4 content. The parameters that are available depend on the object type that you are exporting.Object TypeAvailable ParametersObjects ReturnedRule Setsname="" rule-set-name"" Rule sets that match the specified name. This parameter is case sensitive.vocabularyName="" vocabulary-name"" Rule sets that use the specified vocabularyRule flowsname="" rule-flow-name"" Rule flows that match the specified name. This parameter is case sensitive.simpleOnly=""true"" Beginning with SAS Intelligent Decisioning 5.1, SAS Intelligent dcmtransfer Plug-In 11",373
82," 16. Object TypeAvailable ParametersObjects ReturnedDecisioning does not support complex rule flows.Decisionsname="" decision-name"" Decisions that match the specified name. This parameter is case sensitive.vocabularyName="" vocabulary-name"" Decisions that use the specified vocabulary Modifying the Mapping File The mapping file is a JSON file that provides information about exported content and any associated objects. The content of the mapping file depends on the content that is exported. For example, if you export rule flows, then the mapping file contains information about the rule sets that are included in the rule flows and all folders where the rule sets and rule flows reside. If you export decisions, the mapping file contains information about the models and rule sets that are referenced in the decision. (Rule flows are exported as rule sets. Also, in SAS 9.4, decisions are not in folders, so the mapping file for decisions does not contain folder information.) By default, rule flows that are imported as decisions, rule sets, and lookup tables are imported into a folder that has the same name as the folder in which it resided in the SAS 9.4 environment. To import the content into a different folder, edit the mapping file. You can change some of the information in the mapping file. You can change the target.* fields, but do not change the source.* fields. For example, you can change the folders into which the content is imported and the IDs that are assigned to the imported content. The following table lists the fields in the mapping file for each object type and specifies whether you can change the field before the content is imported.Table 2.1 Fields in the sas-dcmtransfer CLI Mapping File ObjectFieldDescriptionCan Be Changedfolderssource.folderPathFolder path in the SAS 9.4 environmentNotarget.folderPathFolder path in the SAS Viya environment. By default, this field is set to the same path as source.folderPath.Yeslookupssource.idLookup table ID in the SAS 9.4 environmentNosource.nameLookup table nameNosource.folderPathLookup folder path in the SAS 9.4 environmentNo 12Chapter 2 / SAS Intelligent Decisioning CLIs",438
83," 17. ObjectFieldDescriptionCan Be Changedtarget.idLookup table ID in the SAS Viya environmentYesruleSetssource.idRule set ID in the SAS 9.4 environmentNosource.nameRule set nameNosource.folderPathRule set folder pathNotarget.idRule set ID in the SAS Viya environmentYestarget.revisionIdRule set version ID in the SAS Viya environment. If no version ID is specified, then the revision ID is set to current . When the rule set information is displayed in the user interface, the current version number is displayed.Yesmodelssource.idModel ID in the SAS 9.4 environmentNosource.nameModel nameNotarget.idModel ID in the SAS Viya environmentYes For example, if you export a rule set that references two lookup tables, the mappings file might look like this:{ ""folders"": [  {   ""source"": {    ""folderPath"": ""/A""   },   ""target"": {    ""folderPath"": ""/B""   }  }, ], ""lookups"": [  {   ""source"": {    ""id"": 10093,    ""name"": ""LookupXYZ"",    ""folderPath"": ""/A""   },   ""target"": {    ""id"": """"   }  },  {   ""source"": {    ""id"": 10094,    ""name"": ""LookupABC"", dcmtransfer Plug-In 13",290
84," 18. ""folderPath"": ""/B""   },   ""target"": {    ""id"": ""2e95e765-1242-4c06-ad5a-e05fdc3932fb""   }  } ]} If you export rule flow that references two rule sets, the mapping file might look like this:{ ""folders"": [  {   ""source"": {    ""folderPath"": ""/A""   },   ""target"": {    ""folderPath"": ""/A""   }  }, ], ""ruleSets"": [  {   ""source"": {    ""id"": 10043,    ""name"": ""RuleSetXYZ"",    ""folderPath"": ""/A""   },   ""target"": {    ""id"": """",    ""revisionId"": """"   }  },  {   ""source"": {    ""id"": 10044,    ""name"": ""RuleSetABC"",    ""folderPath"": ""/A""   },   ""target"": {    ""id"": ""3619e4d5-3046-4a91-b940-df9dc9c8bd45"",    ""revisionId"": ""b9195eb0-5a1c-4d0a-a833-254bc1ce5a33""   }  } ], } Examples The following examples use the default profile. For information about defining and specifying a profile, see “Creating and Using Profiles” on page 2.14Chapter 2 / SAS Intelligent Decisioning CLIs",315
85," 19. Example 1 The following command exports the rule set with the ID 10093:sas-viya dcmtransfer export9x rulesets --uri /SASBusinessRulesManagerWeb/rest/ruleSets/10093 Example 2 The following command exports the decision with the ID d246d283- fd80-4d37-96ad-18fd9cd508c8:sas-viya dcmtransfer export9x decisions --uri /SASDecisionManager/rest/decisions/d246d283-fd80-4d37-96ad-18fd9cd508c8 Example 3 The following command exports all rule flows:sas-viya dcmtransfer export9x ruleflows --uri /SASBusinessRulesManagerWeb/rest/ruleFlows?limit=2147483647 Example 4 The following command exports all lookup tables, writes the exported content to the file lookupContent.json, and writes the mapping information to the file lookupMappings.json:sas-viya dcmtransfer export9x lookups --mappings ""@lookupMappings.json"" --content ""@lookupContent.json"" --uri /SASWIPClientAccess/rest/navigation/814100/DCMFOLDER_ROOT_ID Example 5 The following command exports all rule sets that use the vocabulary named LoanApplications:sas-viya dcmtransfer export9x rulesets --uri /SASBusinessRulesManager/rest/ruleSets?vocabularyName=""LoanApplications"" dcmtransfer Plug-In 15",303
86," 2. The correct bibliographic citation for this manual is as follows: SAS Institute Inc. 2021. SAS® Intelligent Decisioning: Command-Line Interfaces . Cary, NC: SAS Institute Inc. SAS® Intelligent Decisioning: Command-Line Interfaces Copyright © 2021, SAS Institute Inc., Cary, NC, USA All Rights Reserved. Produced in the United States of America. For a hard copy book: No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, or otherwise, without the prior written permission of the publisher, SAS Institute Inc. For a web download or e-book: Your use of this publication shall be governed by the terms established by the vendor at the time you acquire this publication. The scanning, uploading, and distribution of this book via the Internet or any other means without the permission of the publisher is illegal and punishable by law. Please purchase only authorized electronic editions and do not participate in or encourage electronic piracy of copyrighted materials. Your support of others' rights is appreciated. U.S. Government License Rights; Restricted Rights: The Software and its documentation is commercial computer software developed at private expense and is provided with RESTRICTED RIGHTS to the United States Government. Use, duplication, or disclosure of the Software by the United States Government is subject to the license terms of this Agreement pursuant to, as applicable, FAR 12.212, DFAR 227.7202-1(a), DFAR 227.7202-3(a), and DFAR 227.7202-4, and, to the extent required under U.S. federal law, the minimum restricted rights as set out in FAR 52.227-19 (DEC 2007). If FAR 52.227-19 is applicable, this provision serves as notice under clause (c) thereof and no other notice is required to be affixed to the Software or documentation. The Government’s rights in Software and documentation shall be only those set forth in this Agreement. SAS Institute Inc., SAS Campus Drive, Cary, NC 27513-2414 October 2022 SAS® and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. ® indicates USA registration. Other brand and product names are trademarks of their respective companies. v_003-P1:edmcli",493
87," 20. Example 6 The following command imports all of the rule sets in the file content.json. It uses the mapping file mappings.json:sas-viya dcmtransfer import9x rulesets Example 7 The following command imports all lookup tables in the file lookupContent.json. It uses the mapping file lookupMappings.json.sas-viya dcmtransfer import9x lookups --content ""@lookupContent.json"" --mappings ""@lookupMappings.json"" Example 8 The following command imports all rule flows in the file content.json. It uses the mapping file mappings.json. The rule flows are imported as decisions.sas-viya dcmtransfer import9x ruleflows Example 9 The following command imports the decisions in the contents.json file. The decisions are imported into the folder named /LoanApplications. Any decision in that folder that has the same name as the decision that is being imported is replaced.sas-viya dcmtransfer import9x decisions --force --target-folder-path /LoanApplications decisiongitdeploy Plug-In Enables you to deploy decisions and rule sets from a local Git repository to the SAS Micro Analytic Service destination (maslocal) or to a SAS Cloud Analytic Services (CAS) destination. Requirements: You must create a profile and sign in before you use the CLI. See “Creating and Using Profiles” on page 2 for more information. You must publish the decisions and rule sets to a Git publishing destination. Then, you must copy the published objects from the Git publishing destination into your local Git repository (by using either the Git clone command or the Git pull command) before you use this CLI to deploy the objects. You must have Read access to the Git repository. See: “Global Options” on page 4 “Global Commands” on page 316Chapter 2 / SAS Intelligent Decisioning CLIs",369
88," 21. Syntax sas-viya <global-options > decisiongitdeploy deploy <command-options > path-to- object-directory Command In addition to the global commands in “Global Commands” on page 3, you can specify the following command: deploy < command-options > path-to-object-directory deploys the object from the specified directory into the target destination. This command supports the following options: --destinationtype MAS | CAS Specifies the type of destination to which you want to deploy the published object. Specify MAS for the maslocal SAS Micro Analytic Service destination or CAS for SAS Cloud Analytic Services destinations. (The option values are case insensitive.)Alias-dDefaultMAS --force false | true Specifies whether to overwrite a previously deployed object that has the same name as the object that you are deploying.Alias-fDefaultFalse --libname caslib Specifies the name of the CAS library to which you want to deploy the object.Alias-lDefaultPublicRequirementThe specified library must exist. See “Specifying CAS Destination Properties” on page 18.InteractionThis option is used only if you specify --destinationType=CAS . --server server_name Specifies the server on which the library specified by the --library option is located.Alias-sDefaultcas-shared-defaultInteractionThis option is used only if you specify --destinationType=CAS . decisiongitdeploy Plug-In 17",271
89," 22. --tablename table_name Specifies the name of the global CAS model table into which you want to deploy the object.Alias-tDefaultSAS_MODEL_TABLERequirementThe specified table must exist. See “Specifying CAS Destination Properties” on page 18.InteractionThis option is used only if you specify --destinationType=CAS . Details Deploying Published Objects You can use the decisiongitdeploy plug-in to the sas-viya CLI to deploy decisions and rule sets from a local Git repository to a SAS Micro Analytic Service destination or to a CAS destination. You can deploy published objects only to destinations with which they are compatible. When you define a Git publishing destination, you can specify whether the code that is generated for and published to the destination is compatible with CAS destinations or with SAS Micro Analytic Service destinations. For more information, see “Configuring Publishing Destinations” in SAS Intelligent Decisioning: Administrator’s Guide . When you deploy an object to a CAS destination, the object is created as a row in the model table for that destination. When you deploy an object to a SAS Micro Analytic Service destination, the object is created as a module in the service. TIP You can define a Jenkins job that listens for objects to be published to a Git repository. The job can use this CLI to automatically deploy the published module to the target destinations. Specifying CAS Destination Properties For CAS destinations, the CLI does not create the library or table if the library or table that you specify does not exist. The libraries and tables for CAS destinations are created when the publishing destination is configured. You can use the cas plug- in to the sas-viya CLI to verify that the library and table exist. For more information, see “CLI Examples: CAS Administration” in SAS Viya: Using the Command-Line Interface and SAS Viya: Publishing Destinations . You can view the properties of a publishing destination, including the library, server, and table name in SAS Environment Manager. To view the CAS destination properties: 1Click and select Manage Environment to navigate to SAS Environment Manager.18Chapter 2 / SAS Intelligent Decisioning CLIs",433
90," 23. 2Click in the navigation bar to view the list of publishing destinations. 3Select the publishing destination and click . Examples The following examples use the default profile. For information about defining and specifying a profile, see “Creating and Using Profiles” on page 2. Example 1 The following command deploys the decision module named loan_offer1_0 from the local Git repository named gitMAS into the SAS Micro Analytic Service destination on the target server that is defined in the default profile:sas-viya decisiongitdeploy deploy ../gitMAS/loan_offer1_0 Example 2 The following command deploys the decision module named loan_offer1_0 from the local Git repository named gitCAS into the CAS model table named loanDecisions in the Public library on the server cas-shared-default:sas-viya decisiongitdeploy deploy --tablename loanDecisions -d CAS ../gitCAS/loan_offer1_0 Example 3 The following command specifies the input directory as you would enter it at a Microsoft Windows shell prompt. This command deploys the published rule set named masgit_rs_hmeq_value_11feb21 to the SAS Micro Analytic Service destination on the target server that is defined in the default profile. If a module of the same name already exists on the target server, the CLI overwrites the existing module.sas-viya decisiongitdeploy deploy -f true c:\Users\userid\gitMAS\masgit_rs_hmeq_value_11feb21 rtdmobjectmigration Plug-In Imports SAS Real-Time Decision Manager objects that have been extracted from metadata in a SAS 9.4 environment into a SAS Viya environment.rtdmobjectmigration Plug-In 19",344
91," 24. Requirements: You must use the SAS Customer Intelligence sasmaextract extraction utility to create the extraction file that contains the objects that you want to import. For instructions, see “Transfer Treatments from SAS 9.4 to SAS Viya” in SAS Intelligent Decisioning: Administrator’s Guide . You must create a profile and sign in before you use the CLI. See “Creating and Using Profiles” on page 2 for more information. See: “Global Options” on page 4 “Global Commands” on page 3 Syntax sas-viya <global-options > rtdmobjectmigration start <command-options > Commands start starts the SAS Real-Time Decision Manager migration command-line utility. The start command is required. --folder folder-GUID specifies the globally unique identifier (GUID) for the folder into which you want to import the objects. The folder option is optional.Alias-fDefaultPublic --input filename .xml specifies the XML file that contains the objects that were extracted from the SAS Metadata Repository on SAS 9.4. This file is the output file that is created by the sasmaextract utility. This option is required. For more information, see “Transfer Treatments from SAS 9.4 to SAS Viya” in SAS Intelligent Decisioning: Administrator’s Guide .Alias-i --type object-type specifies the object type to import. Currently, the only object type that is supported is treatment .Alias-t Details Transfer Objects from SAS 9.4 to SAS Viya 1Use the sasmaextract utility that is included with SAS Customer Intelligence to extract objects from the SAS Metadata Repository on SAS 9.4. Then, copy the output file from that utility to a location that is accessible from SAS Viya. The 20Chapter 2 / SAS Intelligent Decisioning CLIs",364
92," 25. output file that this utility creates is the input file for this CLI. For instructions, see “Transfer Treatments from SAS 9.4 to SAS Viya” in SAS Intelligent Decisioning: Administrator’s Guide . 2Log on to the machine where SAS Viya is running. For example, on Linux systems, you can use the ssh command:ssh -y machine-name 3Use the cd command to change to the directory where you downloaded the plug- in files. 4Create a default profile if you have not already done so:sas-viya profile init The CLI prompts you for the target URL (service endpoint) where SAS Viya is running, for the output type that you want, and whether you want to enable color output. The target URL is the destination to which you want to import the objects. For more information, see “Creating and Using Profiles” on page 2. 5Log on to the SAS Viya environment:sas-viya auth login The CLI prompts you for the user ID and password for the SAS Viya environment. 6Import the objects into the SAS Viya environment:sas-viya rtdmobjectmigration start--input sasmaextract-output-file --folder folder-GUID--type treatment If an object of the same name as the object in the extract file already exists in the destination folder, the CLI does not import the object. The CLI displays the results of the import process. For example:Total objects migrated: 6Succeeded: 5Failed: 0Completed with errors: 0Skipped due to name conflict: 1 Note: When you view imported content in SAS Intelligent Decisioning, any errors in the content are marked with the error icon . 7Log off from the SAS Viya environment:sas-viya auth logout Example The following examples use the default profile. For information about defining and specifying a profile, see “Creating and Using Profiles” on page 2.rtdmobjectmigration Plug-In 21",405
93," 26. The following command imports the treatments that are in the file treatments_extracted.xml and writes the treatments to the folder with the ID a750925f-2749-4c8c-94c6-dd93a471d427:sas-viya rtdmobjectmigration start--input /extractFiles/treatments_extracted.xml --folder a750925f-2749-4c8c-94c6-dd93a471d427--type treatment scoreexecution Plug-In Lists or deletes resources such as log files, code files, jobs, and SAS Cloud Analytic Services (CAS) tables that were not deleted when the associated rule set, decision, or model test was deleted. Requirement: You must create a profile and sign in before you use the CLI. See “Creating and Using Profiles” on page 2 for more information. See: “Global Options” on page 4 “Global Commands” on page 3 Syntax sas-viya <global-options > scoreexecution command <command-options > Commands In addition to the global commands in “Global Commands” on page 3, you can specify the following commands: list-hanging-resources lists the resources that are no longer used by the score execution service. --file filename specifies the file to write the list of resources to. You can use this file with the remove-hanging-resources command to delete the resources.Alias-f remove-hanging-resources deletes resources that are no longer used by the score execution service. --file filename Specifies the file that contains the URIs of the resources that you want to remove.Alias-f 22Chapter 2 / SAS Intelligent Decisioning CLIs",335
94," 27. Examples The following examples use the default profile. For information about defining and specifying a profile, see “Creating and Using Profiles” on page 2. Example 1 The following command displays detailed information about the unused resources:sas-viya --output fulljson scoreexecution list-hanging-resources Example 2 The following command displays information about unused resources in a table format:sas-viya --output text scoreexecution list-hanging-resources Example 3 The following command writes the URIs for unused resources to a file named uris.txt:sas-viya scoreexecution list-hanging-resources --file uris.txt Example 4 The following command deletes the unused resources that are listed in the file uris.txt:sas-viya scoreexecution remove-hanging-resources --file uris.txt sid-functions Plug-In Creates and manages custom functions and function categories in SAS Intelligent Decisioning. Requirement: You must create a profile and sign in before you use the CLI. See “Creating and Using Profiles” on page 2 for more information. See: “Global Options” on page 4 “Global Commands” on page 3sid-functions Plug-In 23",230
95," 28. Syntax sas-viya <global-options > sid-functions command <command-options > Commands In addition to the global commands in “Global Commands” on page 3, you can specify the following commands: add <- -replace > category-name path-to-DS2-input-file adds the function (method) that is defined in the input file to the specified category. If you specify the - -replace option, the function definition in the input file replaces the current definition of the function with the same name. Function names must be unique within an environment or tenant and are limited to 250 characters. Function names must be valid DS2 identifiers. For more information, see “DS2 Identifiers” in SAS DS2 Programmer’s Guide . categories subcommand <arguments > creates and manages custom function categories. Category names must be unique within an environment or tenant and are limited to 250 characters. For information about each subcommand, see “Subcommands for the categories Command” on page 24. delete function-name deletes the specified function. If the function does not exist, this command has no effect. download-code downloads the code for all of the custom functions in the environment and sends the output to stdout. list lists the names and parameters for all of the custom functions that are defined in the environment. Subcommands for the categories Command create <options > category-name - -description "" category-description "" specifies a description for the category. - -replace category-name <category-description > enables you to add, delete, or modify the description of a category. To delete the existing description of a category, omit the - -description option:sas-viya sid-functions --replace myCategory delete category-name deletes the specified category and all of the functions in that category. help displays help information for the categories command. list lists the custom function categories that are defined in the environment.24Chapter 2 / SAS Intelligent Decisioning CLIs",386
96," 29. show category-name displays the properties of the specified category. Details Using Custom Functions You can use custom functions to perform actions that are not available with the standard functions that SAS provides. Custom functions also enable you to encapsulate and reuse business logic. You can define the method for the function in a DS2 file, add that file to SAS Intelligent Decisioning as a custom function, and use the function in rule sets and in DS2 code files. A custom function DS2 file can contain only one method definition. The name of the method becomes the name of the custom function. The name cannot be the same as the name of an existing SAS function. For example, your custom function file might define a custom function named square that calculates the square of a number:method square(double value) returns double; return value * value;end; The method signature can include variables that are both input and output variables. Specify these variables with the in_out keyword. Custom functions support data grid packages and the DS2 data types that are listed in “Data Types for SAS Data Sets” in SAS DS2 Language Reference . Before you add a custom function to SAS Intelligent Decisioning, test the function code by including it in a DS2 custom code file, including the code file in a decision, and running a scenario test. For example, you can test the square function with the following custom code file:package ""${PACKAGE_NAME}"" /inline; method square(double value) returns double;  return value * value; end; method execute(double value, in_out double result);  result = square(value); end;endpackage; For more information, see “Ways to Test a Code File” in SAS Intelligent Decisioning: User’s Guide and “Test a Scenario” in SAS Intelligent Decisioning: User’s Guide . When you add a function category and custom function to SAS Intelligent Decisioning, this CLI adds the category and function to the list of functions in the expression editor. Custom categories appear as subcategories under the category Custom. For example, if you add a function category named Exponential and a function named square , these appear above the SAS functions in the expression editor:sid-functions Plug-In 25",443
97, 3. Contents Chapter 1 /Using SAS Intelligent Decisioning Command-Line Interfaces . . . . . . . . . . . . . . . . . . . . . . 1 About the SAS Intelligent Decisioning CLIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Downloading and Installing the CLIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Creating and Using Profiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Chapter 2 /SAS Intelligent Decisioning CLIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Global Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . .,279
98,. . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Global Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 Chapter 3 /Transferring Version Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Transfer Version Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,262
99," 30. IMPORTANT A delay of up to one minute can occur between the time when you define or modify (replace) a function and the time when the function is available to be executed. When SAS Intelligent Decisioning generates code, it inserts the custom function definition ahead of the code that it generates for the rule set logic or code file logic. In the rule set or code file, you can reference custom functions in the same way that you reference functions that are provided by SAS. Examples The following examples use the default profile. For information about defining and specifying a profile, see “Creating and Using Profiles” on page 2. Example 1 The following command creates the custom function category named Exponential:sas-viya sid-functions categories create ""Exponential"" Example 2 The following command adds a description to the existing category Exponential:sas-viya sid-functions categories create --replace --description ""Custom exponential functions"" ""Exponential"" Example 3 The following command adds the function defined in the squareFx.ds2 file to the category named Exponential:26Chapter 2 / SAS Intelligent Decisioning CLIs",223
100," 31. sas-viya sid-functions add ""Exponential"" ""myCustomFunctions/squareFx.ds2"" Example 4 To modify the code for an existing custom function, use the --replace option. The following command replaces the custom function that was defined in the previous example with the updated contents of the squareFx.ds2 file:sas-viya sid-functions add --replace ""Exponential"" ""myCustomFunctions/squareFx.ds2"" Example 5 The following command lists the names and parameters for all of the custom functions that are defined in the environment:sas-viya sid-functions list Example 6 The following command deletes the custom function named square :sas-viya sid-functions delete ""square"" Example 7 The following command deletes the custom function category Exponential and deletes all of the custom functions in that category:sas-viya sid-functions categories delete ""Exponential"" Example 8 The following command downloads the code for all of the custom functions that are defined in the environment and writes that code to the file name customFunctions:sas-viya sid-functions download-code > customFunctions sid-functions Plug-In 27",227
101, 32. 28Chapter 2 / SAS Intelligent Decisioning CLIs,15
102," 33. 3 Transferring Version Comments Transfer Version Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Transfer Version Comments When you use the transfer plug-in to the sas-viya CLI to transfer objects between SAS Viya environments, all of the content is transferred except for notes that are associated with specific versions of the objects. To transfer the version notes for an object, complete these steps: 1Export a transfer package from the source environment that contains the version notes that are associated with the object:sas-viya transfer export --resource-uri /comments/comments?filter=startsWith(resourceUri,'object-uri') The object URI is displayed on the Properties tab for the object in SAS Intelligent Decisioning, or you can retrieve object URIs by using the SAS Intelligent Decisioning REST API. Object URIs have the following format:/businessRules/ruleSets/rule-set-ID/decisions/flows/decision-ID/referenceData/domains/lookup-table-ID/treatmentDefinitions/definitions/treatment-ID/treatmentDefinitions/definitionGroups/treatment-group-ID Record the transfer package ID. 2Download the package to your local machine, and store it in a JSON file named MyPackage.json:sas-viya transfer download --id transfer-package-ID --file /tmp/MyPackage.json 3Upload the JSON file to the target environment:sas-viya transfer upload --file /tmp/MyPackage.json Record the upload package ID.29",331
103," 34. 4Import the version comments into the target environment:sas-viya transfer import --id upload-package-ID For more information, see “Transfer Content between SAS Viya 4 Environments” in SAS Intelligent Decisioning: Administrator’s Guide and “How To (CLI)” in SAS Viya: Content Migration from SAS Viya 4 .30Chapter 3 / Transferring Version Comments",81
104, 4. ivContents,5
105," 5. 1 Using SAS Intelligent Decisioning Command-Line Interfaces About the SAS Intelligent Decisioning CLIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Downloading and Installing the CLIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Creating and Using Profiles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 About the SAS Intelligent Decisioning CLIs In SAS Viya, a command-line interface (CLI) is a user interface to the SAS Viya REST services. In this interface, you enter commands on a command line and receive a response back from the system. You can use a CLI to interact directly with SAS Viya programmatically without a GUI. For information about all of the CLIs that are provided with SAS Viya, see “Command-Line Interface: Overview” in SAS Viya: Using the Command-Line Interface . The following SAS Intelligent Decisioning CLIs are available: dcmtransfer enables you to transfer rule sets, rule flows, lookup tables, and decisions from a SAS 9.4 environment to a SAS Viya environment. decisiongitdeploy enables you to deploy decisions and rule sets from a local Git repository to a SAS Micro Analytic Service environment or to a SAS Cloud Analytic Services (CAS) environment. You must publish the decisions and rule sets to a Git publishing destination and copy them into your local Git repository before you use the CLI. rtdmobjectmigration imports objects that were exported from SAS Real-Time Decision Manager on SAS 9.4. Currently, the only supported object type is treatments.1",422
106," 6. scoreexecution lists or deletes resources such as log files, code files, jobs, and SAS Cloud Analytic Services (CAS) tables that were not deleted when the associated rule set, decision, or model test was deleted. sid-functions creates and manages custom functions and function categories. Downloading and Installing the CLIs The recommended approach for running the SAS Intelligent Decisioning CLIs is to run them as plug-ins to the SAS Viya Command-Line (sas-viya CLI). The most current plug-ins are included with the sas-viya CLI download file. You can download the sas-viya CLI directly from the SAS Support website and install the plug-ins that you need. The download file is available at https://support.sas.com/downloads/browse.htm?fil=&cat=564 . For information about downloading the CLI file and installing plug-ins, see “Get the CLI and Its Plug-Ins” in SAS Viya: Using the Command-Line Interface . Creating and Using Profiles To use these CLIs, you must create at least one profile and sign in to SAS Viya. The CLIs connect to the SAS Viya environment that is specified in your profile. If you do not specify a profile in the CLI command, the CLI uses the default profile. To connect to a different SAS Viya environment, use the --profile global option in the CLI command to specify a different profile. For more information, see the following topics: n“Default Profile and Named Profiles” in SAS Viya: Using the Command-Line Interface n“Create at Least One Profile” in SAS Viya: Using the Command-Line Interface n“Use Your Profile to Sign In ” in SAS Viya: Using the Command-Line Interface n“--profile profile_name ” on page 52Chapter 1 / Using SAS Intelligent Decisioning Command-Line Interfaces",369
107, 7. 2 SAS Intelligent Decisioning CLIs Global Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Global Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 dcmtransfer Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,263
108,. . . . . . . . . . . . . . . . . . . . . . . . 6 decisiongitdeploy Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 rtdmobjectmigration Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 scoreexecution Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 sid-functions Plug-In . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,264
109," 8. AliashExamplesas-viya scoreexecution help plugins list displays the list of command line plugins for a CLI.NoteNo plugins are available for the SAS Intelligent Decisioning CLIs.Examplesas-viya plugins list profile creates or displays the connection profile that defines your SAS Viya deployment. This command asks you to enter the SAS Viya service endpoint, your preferred output type, and whether you want to enable colored output. Running the PROFILE global command creates a config.json file and a credentials.json file in the directory home-directory/.sas . The config.json file contains information about your SAS Viya deployment, and the credentials.json file contains the authentication tokens that are created when you log in.AliasprofSee“Global Command: Profile” in SAS Viya: Using the Command-Line Interface“Command-Line Interface: Preliminary Instructions” in SAS Viya: Using the Command-Line Interface Global Options The following options apply to all CLIs. --colors-enabled true|false enables or disables ANSI-colored output.NoteThis option does not work in all environments.TipYou can set the environment variable $SAS_CLI_COLOR instead of specifying this option. --help displays the list of commands and options that are available for a CLI. If this option is specified after a command, it displays the Help for that command.Alias-hExamplesas-viya dcmtransfer authenticate9x –help --insecure allows connections to TLS sites without validating the server certificates.Alias-k 4Chapter 2 / SAS Intelligent Decisioning CLIs",304
110," 9. --locale locale specifies the locale to use, such as en (English) or de (German).TipYou can set either the environment variable $LC_ALL or $LANG instead of specifying this option.Seehttps://www.w3schools.com/tags/ref_language_codes.asp –log-file filename specifies the name of the log file.TipYou can set the environment variable $SAS_LOG_FILE instead of specifying this option. --output format specifies the format for the output from the CLI. Specify text , json , or fulljson .TipYou can set the environment variable $SAS_OUTPUT instead of specifying this option.See“Output Type” in SAS Viya: Using the Command-Line Interface --profile profile_name specifies the name of the profile to use.Alias-pDefaultDefaultTipsYou can set the environment variable $SAS_CLI_PROFILE instead of specifying this option.You can use the command CLI-name profile list to see the list of available profiles. --quiet suppresses all output from the CLI except the data.Alias-q --sas-endpoint URL specifies the URL for the SAS Viya environment.TipYou can set the environment variable $SAS_SERVICES_ENDPOINT instead of specifying this option. --verbose displays additional details about the commands that are processed, in addition to the output data. --version prints the version of the CLI.Alias-v --yes-to-all suppresses all confirmation prompts by defaulting to yes .Alias-y Global Options 5",292
111,"s page 1. SAS® Intelligent Decisioning: Using Data Grids 2023.04**This document might apply to additional versions of the software. Open this document in SAS Help Center and click on the version in the banner to see all available versions. SAS® Documentation April 18, 2023",63
112,"s page 10. Defining Data Grid Variables Data grid variables can be imported, exported, created, edited, and added to rule sets in the same way as other variables. When you are creating or importing data grid variables, the following guidelines apply: nThe columns within a data grid can contain only character or numeric data. nIn the SAS Intelligent Decisioning interface, which input data grid variables you define depend on how you are working with the data grid. oIf you are using data grid functions, define input variables for only the table columns that contain the data grids. When you use a data grid function, the function parameter that specifies the name of the data grid column must be either a literal value or a variable that evaluates to the data grid column name. oIf you are executing a rule set or subdecision against each row in the data grid, define variables for the each column within the data grid. Scoring Rows in a Data Grid Data grid variables are processed like any other character variable unless you do one of the following: nuse data grid functions to process the individual data values within the data grid. For more information, see “Using Data Grid Functions” on page 9. nuse the Score rows in this data grid option to process each row in the data grid. To process the rows within a data grid, select the Score rows in this data grid option on the Input Variables property panel when you are mapping decision variables for the node. If you select this option, you can map the node’s input variables to columns in the data grid instead of to columns in the input table. SAS Intelligent Decisioning changes the default variable mappings to columns in the data grid if columns exist that have the same names as the node's input variables. You can customize the variable mappings as needed. When you select this option, the decision node processes all of the rows in the data grid before execution moves to the next node in the decision. IMPORTANT When the node object is a filtering rule set, and you select Score rows in this data grid , rows that do not meet the criteria defined by the rules are removed from the data grid.6Chapter 1 / Using Data Grids in SAS Intelligent Decisioning",444
113,"s page 11. Mapping Data Grid Variables in a Decision When you add an object to a decision and the object contains a data grid variable, SAS Intelligent Decisioning creates a decision variable for the data grid in the same way that it creates decision variables for object variables of other data types. When you select Score rows in this data grid for an object that uses a data grid, you can choose to map the columns in the object’s data grid variable either to columns in the decision’s data grid variable or to other decision variables. In the lists of variables in the Input Variables property pane, the decision’s scalar variables are identified by the icon, and the decision’s data grid columns are identified by the icon. For more information, see “Map Object Variables to Decision Variables” in SAS Intelligent Decisioning: User’s Guide and “Scoring Rows in a Data Grid” on page 6. Editing Data Grid Variable Metadata For existing data grid variables, you can add or delete columns in the data grid variable. Note: Changes to the metadata for an object’s data grid affect the data grid only in the latest and subsequent versions of the object. Data grids in earlier versions of the object are not affected. Add Columns to a Data Grid To add a column to a data grid: 1On the Variables tab of a rule set, code file, or decision, click on the data grid variable that you want to edit. The Edit Variable window appears. 2Click on columns field to open the Edit Columns window. 3(Optional) To add new custom columns to the data grid: aSelect Add a new column , and enter the name of the new column in the columns field. bSelect the data type of the column, and click Add. 4(Optional) To add columns from a data table: aSelect Add columns from a data table , and click Browse . The Choose Data window appears. bSelect the data table, and click OK. SAS Intelligent Decisioning closes the Choose Data window, and adds all of the columns in the data table to the columns field in the Edit Columns window.Working with Data Grids 7",429
114,"s page 12. cIn the Edit Columns window, click Add. SAS Intelligent Decisioning adds all of the columns in the data table to the table of columns. d(Optional) Click for any columns that you do not want to add to your data grid. e(Optional) For character string values, enter a length if you do not want to use the default length. 5(Optional) To add columns from another data grid variable in the same object: aSelect Add columns from a data grid , and click Browse . The Edit Columns window appears. bSelect the data grid that contains the column that you want to add. cIn the Available items list, select the columns that you want to add , and click or . dClick OK to return to the Edit Columns window. 6(Optional) Select the Data does not contain column metadata check box. The JSON character string for each row in a data grid normally contains metadata that defines the columns in the data grid and the data for each column. Depending on the data types and the number of columns in the data grid, the metadata can increase the size of the data grid considerably. For output-only variables, select Data does not contain column metadata if you do not want column metadata to be included in the output JSON string for the data grid. For input-only variables and input-output variables, select this check box if the input JSON string for the data grid does not contain column metadata. In order to select this option, you must click and define the columns in the data grid. Do not select this check box if the input JSON contains column metadata. If the column definitions that you enter in the user interface do not match the input data, SAS Intelligent Decisioning does not know what the column names are. The column names are set to placeholder values such as COL_X . If this checkbox is selected but the JSON for the input data grid contains column metadata, execution might fail or produce inaccurate results. 7(Optional) Select the Create Column check box for the new columns if you want SAS Intelligent Decisioning to create the new columns at run time. At run time, if a column already exists in the input data grid, SAS Intelligent Decisioning does not add a new column or overwrite the existing column. For more information, see “When Are Data Grid Columns Created?” on page 3. 8Click OK to add the selected columns to your data grid variable and return to the Edit Variable window. 9Click OK.",496
115,"s page 13. 2Click to open the Edit Columns window. 3Click for each column that you want to delete. 4Click OK. Using Data Grid Functions For objects that iterate over a data grid, you do not need to use data grid functions. For more information, see “Ways to Work with Data Grids” on page 5 and “Scoring Rows in a Data Grid” on page 6. In all other cases, you must use SAS Intelligent Decisioning data grid functions to process data grid variables. SAS Intelligent Decisioning supplies several functions for use with data grids. These functions are described in “Data Grid Functions” on page 29. Using Data Grids in a Code File You can create a local data grid variable in a custom DS2 code file. However, the column metadata for the local data grid variable in the DS2 code is not passed to the corresponding decision data grid variable. In this case, you must edit the metadata for the decision variable and add the columns. For instructions, see “Add Columns to a Data Grid” on page 7. You can create custom DS2 code files that process the values in a data grid and include the code file in a decision. For example, the following DS2 code uses the DATAGRID_COUNT function to determine how many rows are in the data grid, then loops through the data grid to process each row. It uses the DATAGRID_GET function to retrieve the values for the data grid variables. The values of the data grid variables are passed to the assessLoanRequest method./* Use the DATAGRID_COUNT function to determine the *//* number of rows that are in the data grid.  */""numRows"" = DATAGRID_COUNT(""loanrequests"");if ""numRows"" > 0 then do; do ""loopIndex"" = 1 to ""numRows"";  /* Use the DATAGRID_GET function to retrieve the values */  /* in the data grid. The assessLoanRequest method invokes */  /* a published rule set to evaluate each loan request. */   assessLoanRequest(DATAGRID_GET(""loanrequests"",'annualSalary',loopIndex),      DATAGRID_GET(""loanrequests"",'incomeThreshhold',loopIndex));   /* Continue processing the data. */ Using Data Grids in a Code File 9",477
116,"s page 14. end;end; See “Using Custom Code Files” in SAS Intelligent Decisioning: User’s Guide for information about code files. Working with Data Grids in SAS Studio When you are using data grids in a DS2 custom code file in SAS Intelligent Decisioning , the data grid package and the data grid functions are predefined. However, these packages and functions are not automatically available when you are using SAS Studio to develop and test code. You can use the %DCM_DATAGRID_INTERFACE macro to make data grid functionality available in SAS Studio. For more information, see “%DCM_DATAGRID_INTERFACE Macro” on page 16. In addition, if your test thread or data program uses any data grid functions, then you need to invoke %DCM_DATAGRID_INTERFACE within the thread or data block, after any global declaration statements. For example:data work.cars; set sashelp.cars; run;%dcm_serializegrid(gridSourceTable=work.cars,     classVars=make,     outputTable=work.carsByMakeGrid,     gridColName=carsGrid)proc ds2; /* define data grid DS2 packages */  package ""testCustomCode"" /inline;  /* define data grid interface methods */  %dcm_datagrid_interface()  method execute(varchar(32) whichColumn,   in_out double meanValue,   in_out package datagrid thisGrid);   meanValue = DataGrid_Mean(thisGrid,whichColumn);  end; endpackage; data work.profileByMake(keep=(rowCount make meanMSRP meanWeight carsGrid))       / overwrite=yes;  dcl package testCustomCode myCustomCode();  dcl double meanMSRP;  dcl double meanWeight;  dcl varchar(32767) carsGrid; /* serialize in and out */  dcl package datagrid _carsGrid ();  dcl integer rowCount;  /* define data grid interface methods */  %dcm_datagrid_interface()  method run();   set work.carsByMakeGrid;   meanMSRP = .;   meanWeight = .;   rowCount = DataGrid_Create(_carsGrid,carsGrid); 10 Chapter 1 / Using Data Grids in SAS Intelligent Decisioning",465
117,"s page 15. myCustomCode.execute('msrp', meanMSRP, _carsGrid);   myCustomCode.execute('weight', meanWeight, _carsGrid);   carsGrid = DataGrid_toString(_carsGrid);   output work.profileByMake;  end; enddata;run; quit; Working with Data Grids in SAS Studio 11",75
118,s page 16. 12 Chapter 1 / Using Data Grids in SAS Intelligent Decisioning,20
119,s page 17. 2 Data Grid Macros Using the Data Grid Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 Data Grid Macros Available with SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . 13 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 %DCM_CONVERT_DATAGRID_TO_TABLE Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 %DCM_DATAGRID_INTERFACE Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 %DCM_DATAGRID_JSON_TO_TABLE Macro . . . . . . . . . . .,282
120,"s page 18. %DCM_DATAGRID_INTERFACE makes the data grid functions available in SAS Studio. %DCM_DATAGRID_JSON_TO_TABLE Creates a data grid from the JavaScript Object Notation (JSON) specified in the input file, and writes the data grid to the specified output table. %DCM_JSON_TO_DATAGRID Converts a standard JSON string to a data grid JSON string, or vice versa. %DCM_SERIALIZEGRID creates a table in which one of the columns contains a JSON string that represents a data grid. Data grids must be serialized into JSON strings before you can use the data in SAS Intelligent Decisioning . %DCM_MERGESERIALIZEDGRIDS merges tables that contain data grids that have been serialized with the %DCM_SERIALIZEGRIDS macro with a table that contains scalar data. Dictionary %DCM_CONVERT_DATAGRID_TO_TABLE Macro Converts each data grid to a separate table, and if the MERGE option is specified, merges the separate tables into a single output table. Restriction: The maximum length of a data grid JSON string that can be processed by using this macro is 1,048,576 characters. Syntax %DCM_CONVERT_DATAGRID_TO_TABLE ( GRIDCOL= data-grid-column-name , GRIDTABLE= input-table-base-name , <MERGE= YES | NO , > <OUTLIB= libref ,> <PROMOTE= YES | NO > ) Required Arguments GRIDCOL= data-grid-column-name specifies the name of the data grid column whose rows you want to convert to individual tables. When MERGE=YES, the name of this column is used output table name. When MERGE=NO, the name of this column is used as the base name of the output tables. For each data grid that is converted to a separate 14Chapter 2 / Data Grid Macros",374
121,"s page 19. table, the macro appends a number to the table name. For example, if you specify Offers, the output tables are named Offers1, Offers2, Offers3, and so on. GRIDTABLE= input-table-base-name specifies the name of the table that contains the data grid column. Optional Arguments MERGE= YES | NO specifies whether the tables for each row in the data grid are merged into a single output table.DefaultNO OUTLIB= libref specifies the library to which you want to write the output tables.DefaultWORK PROMOTE= YES | NO promotes the merged data grid table from session scope to global scope.DefaultYESRestrictionThis option is valid only if the output table is written to a CAS library. Example The following code defines a data set, WORK.INPUT, which contains a data grid column named ASSET. The data set contains two records, and each record contains a serialized data grid. The %DCM_CONVERT_DATAGRID_TO_TABLE macro creates a table from each serialized data grid. The macro merges the two data grid tables into one table named ASSET, which contains the columns ASSETTYPE and VALUE.data work.input; length asset $32000.; asset = '[{""metadata"":[{""ASSETTYPE"":""string""},    {""VALUE"":""decimal""}]},    {""data"":[[""Property, Primary"",212000],    [""Property, Investment"",125000]]}]'; output; asset = '[{""metadata"":[{""ASSETTYPE"":""string""},    {""VALUE"":""decimal""}]},    {""data"":[[""Property, Primary"",234500]]}]'; output;run;%DCM_CONVERT_DATAGRID_TO_TABLE( GRIDCOL=asset, GRIDTABLE=work.input, MERGE=YES); The ASSET table appears in SAS Studio as shown in the following figure:%DCM_CONVERT_DATAGRID_TO_TABLE Macro 15",372
122,"s page 2. The correct bibliographic citation for this manual is as follows: SAS Institute Inc. 2023. SAS® Intelligent Decisioning: Using Data Grids . Cary, NC: SAS Institute Inc. SAS® Intelligent Decisioning: Using Data Grids Copyright © 2023, SAS Institute Inc., Cary, NC, USA All Rights Reserved. Produced in the United States of America. For a hard copy book: No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, or otherwise, without the prior written permission of the publisher, SAS Institute Inc. For a web download or e-book: Your use of this publication shall be governed by the terms established by the vendor at the time you acquire this publication. The scanning, uploading, and distribution of this book via the Internet or any other means without the permission of the publisher is illegal and punishable by law. Please purchase only authorized electronic editions and do not participate in or encourage electronic piracy of copyrighted materials. Your support of others' rights is appreciated. U.S. Government License Rights; Restricted Rights: The Software and its documentation is commercial computer software developed at private expense and is provided with RESTRICTED RIGHTS to the United States Government. Use, duplication, or disclosure of the Software by the United States Government is subject to the license terms of this Agreement pursuant to, as applicable, FAR 12.212, DFAR 227.7202-1(a), DFAR 227.7202-3(a), and DFAR 227.7202-4, and, to the extent required under U.S. federal law, the minimum restricted rights as set out in FAR 52.227-19 (DEC 2007). If FAR 52.227-19 is applicable, this provision serves as notice under clause (c) thereof and no other notice is required to be affixed to the Software or documentation. The Government’s rights in Software and documentation shall be only those set forth in this Agreement. SAS Institute Inc., SAS Campus Drive, Cary, NC 27513-2414 April 2023 SAS® and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. ® indicates USA registration. Other brand and product names are trademarks of their respective companies. v_009-P1:edmdatagrids",499
123,"s page 20. %DCM_DATAGRID_INTERFACE Macro Makes the data grid functions available in SAS Studio. Syntax %DCM_DATAGRID_INTERFACE() Details Use the %DCM_DATAGRID_INTERFACE macro to make data grid functions available in SAS Studio. You must invoke this macro before any methods that use data grid functions. In addition, if your test thread or data program uses any data grid functions, then you must invoke the %DCM_DATAGRID_INTERFACE macro within the thread or data block, after any global declaration statements. For more information, see “Working with Data Grids in SAS Studio” on page 10.proc ds2; data _null_;  dcl package datagrid myPackage();  %dcm_datagrid_interface();  /* your DS2 code */ enddata;run;quit; 16Chapter 2 / Data Grid Macros",176
124,"s page 21. %DCM_DATAGRID_JSON_TO_TABLE Macro Creates a data grid from the JavaScript Object Notation (JSON) string that is specified in the input file, and writes the data grid to the specified output table. Restriction: The maximum length of a data grid JSON string that can be processed by using this macro is 1,048,576 characters. Syntax %DCM_DATAGRID_JSON_TO_TABLE ( JSONFILE= data-grid-JSON-file , OUTPUTTABLE= <libref. >table , <PROMOTE= YES | NO > ) Required Arguments JSONFILE= JSON-input-file specifies the name of a file that contains a JSON string that defines a data grid. The JSON string must follow the same format as the serialzed JSON string that is produced by the %DCM_SERIALIZEGRID macro.See“How Are Data Grids Stored?” on page 2 “%DCM_SERIALIZEGRID Macro” on page 25 OUTPUTTABLE= <libref. >table specifies the libref and name of the output table. The output table can be a CAS table that is stored in the PUBLIC library or in another CAS library, or it can be a BASE table that is stored in the WORK library. The default library is WORK. Optional Argument PROMOTE= YES | NO promotes the merged data grid table from session scope to global scope.DefaultYESRestrictionThis option is valid only if the output table is written to a CAS library. Example The following code defines a temporary file named DG_JSON that contains a JSON string that defines a data grid. The data grid contains two columns: ASSETTYPE %DCM_DATAGRID_JSON_TO_TABLE Macro 17",340
125,"s page 22. and VALUE. The %DCM_DATAGRID_JSON_TO_TABLE macro creates a table from the serialized data grid string.cas mycas;caslib _all_ assign;filename DG_JSON temp;data null; file DG_JSON; put '[{""metadata"":[{""ASSETTYPE"":""string""},   {""ASSETVALUE"":""double""}]},   {""data"":[[""CASH"",10815],[""Investment Account"",2162740],   [""Bank Account"",16550],[""Real Estate"",745504]]}]';run;%DCM_DATAGRID_JSON_TO_TABLE( JSONFILE=DG_JSON, OUTPUTTABLE=PUBLIC.datagrid_out, PROMOTE=NO); The DATAGRID_OUT table appears in SAS Studio as shown in the following figure: %DCM_JSON_TO_DATAGRID Macro Converts a standard JSON string to a data grid JSON string, or vice versa. Restriction: The maximum length of a data grid JSON string that can be processed by using this macro is 1,048,576 characters. Syntax %DCM_JSON_TO_DATAGRID ( JSONFILE= standard-JSON-file-name , GRIDFILE= data-grid-file-name , CONVERTTYYPE= JSONTOGRID | GRIDTOJSON <RETRIEVE_NEST= YES | NO , > <GRIDTABLE= table-name ,> <PROMOTE= YES | NO >18Chapter 2 / Data Grid Macros",286
126,"s page 23. ) Required Arguments CONVERTTYPE= JSONTOGRID | GRIDTOJSON specifies the conversion type. Specify GRIDTOJSON to convert the data grid JSON in the file that is specified by the GRIDFILE= option to standard JSON. Specify JSONTOGRID to convert standard JSON in the file that is specified by the JSONFILE= option to data grid JSON. JSONFILE= standard-JSON-file-name specifies the name of the file for standard JSON data. If you are converting standard JSON to data grid JSON, this file is the input file. If you are converting data grid JSON to standard JSON, this file is the output file. GRIDFILE= data-grid-JSON-file-name specifies the name of a file for the data grid JSON string. If you are converting data grid JSON to standard JSON, this file is the input file. If you are converting standard JSON to data grid JSON, the macro determines the output file as follows: nIf you specify RETRIEVE_NEST=YES and the input file does not contain nested JSON, or if you specify RETRIEVE_NEST=NO, then the macro writes the output to the file that is specified by the GRIDFILE= option. nIf you specify RETRIEVE_NEST=YES and the input file contains nested JSON, then the macro writes the output to the table that is specified by the GRIDTABLE= option. The GRIDFILE= option is ignored. Optional Arguments RETRIEVE_NEST= YES | NO specifies whether to convert nested JSON when you convert standard JSON to data grid JSON. If you specify NO , the macro converts only the top-level JSON structure in the input file and writes the output to the file that is specified by the GRIDFILE= option. If you specify YES , then you must specify the GRIDTABLE= option, and if the input JSON contains nested structures, the macro writes the data grid JSON to the table that is specified by the GRIDTABLE= option.DefaultNORestrictionThis option is valid only if you also specify the CONVERTTYPE=JSONTOGRID option. GRIDTABLE= <libref .>table-name specifies the table that contains the data grid JSON that is produced by the macro if you specify CONVERTTYPE=JSONTOGRID and RETRIEVE_NEST=YES. The output table can be a CAS table that is stored in the PUBLIC library or in another CAS library, or it can be a BASE table that is stored in the WORK library.",496
127,"s page 24. DefaultYESRestrictionThis option is valid only if the output table is written to a CAS library. Examples Example 1: Converting Data Grid JSON to Standard JSON The following code creates a temporary file that contains a data grid JSON string. The macro converts this string to standard JSON and writes it to the file /My Folder/stdJSONfile.txt .filename gridFile temp;filename jsonFile filesrvc folderpath='/Users/userID/My Folder' filename='stdJSONfile.txt';data _null_; file gridFile; put '[{""metadata"":[{""ASSETTYPE"":""string""},   {""ASSETVALUE"":""double""}]},   {""data"":[[""Bank Account"",47465],     [""Retirement Fund"",3.29875E+06],     [""CASH"",163],     [""Investment Account"",2.29051E+06],     [""Auto"",2669]]}]';run;%dcm_json_to_datagrid(jsonFile=jsonfile, gridFile=gridfile, convertType=GRIDtoJSON); The output file STDJSONFILE.TXT contains the following JSON:[{""ASSETTYPE"":""Bank Account"",""ASSETVALUE"":47465},{""ASSETTYPE"":""Retirement Fund"",""ASSETVALUE"":3298750},{""ASSETTYPE"":""CASH"",""ASSETVALUE"":163},{""ASSETTYPE"":""Investment Account"",""ASSETVALUE"":2290510},{""ASSETTYPE"":""Auto"",""ASSETVALUE"":2669}] Example 2: Converting Standard JSON to Data Grid JSON The following program creates a temporary file that contains standard JSON that includes nested JSON structures. It calls the %DCM_JSON_TO_GRID macro to convert the standard JSON to data grid JSON. It writes the data grid JSON, including the nested data, to the CAS table named Public.STDTOGRID.cas mycas;caslib _all_ assign; 20Chapter 2 / Data Grid Macros",388
128,"s page 25. filename stdJSON temp;filename gridFile temp;data _null_; file jsonFile; put '[{   ""Debts"":[{   ""REMAININGDEBT"":22144,   ""REMAININGPAYMENTS"":24,   ""DEBTTYPE"":""Boat Loan"",   ""Bankers"":[{""BANKOFFICER"":""Matt""}]    }],   ""ASSETTYPE"":""Bank Account"",   ""ASSETVALUE"":47465   },   {   ""Debts"":[{   ""REMAININGDEBT"":715551,   ""REMAININGPAYMENTS"":84,   ""DEBTTYPE"":""Mortgage"",   ""Bankers"":[{""BANKOFFICER"":""Carl""}]    }],   ""ASSETTYPE"":""Retirement Fund"",   ""ASSETVALUE"":3298750   },   {   ""Debts"":[{   ""REMAININGDEBT"":15577,   ""REMAININGPAYMENTS"":67,   ""DEBTTYPE"":""Car Loan"",   ""Bankers"":[{""BANKOFFICER"":""Ernest""}]    }],   ""ASSETTYPE"":""CASH"",   ""ASSETVALUE"":163   },   {   ""Debts"":[{   ""REMAININGDEBT"":230544,   ""REMAININGPAYMENTS"":45,   ""DEBTTYPE"":""Student Loan"",   ""Bankers"":[{""BANKOFFICER"":""Randy""}]    }],   ""ASSETTYPE"":""Investment Account"",   ""ASSETVALUE"":2290510   }  ]';run;%DCM_JSON_TO_DATAGRID( CONVERTTYPE=JSONTOGRID, JSONFILE=stdJSON, GRIDFILE=gridFile, RETRIEVE_NEST=YES, GRIDTABLE=Public.stdToGrid, PROMOTE=NO); %DCM_JSON_TO_DATAGRID Macro 21",395
129,"s page 26. The STDTOGRID output table appears in SAS Studio as shown in the following figure: The first column in the output table is named ROOT. Subsequent column names indicate the names of the JSON data structure and the nesting level. In this example, the ROOT column contains the data grid JSON for the name-value pairs at the first-level that do not contain any nested name-value pairs: ASSETTYPE and ASSETVALUE.[{""metadata"":[{""ASSETTYPE"":""string""},{""ASSETVALUE"":""decimal""}]},{""data"":[[""Bank Account"",47465],[""Retirement Fund"",3298750],[""CASH"",163],[""Investment Account"",2290510]]}] The DEBTS column contains the JSON for the DEBTS data structure, which appears at the same level as ASSETTYPE and ASSETVALUE but contains four nested elements. The parent of the DEBTS structure is ROOT.[{""metadata"":[{""ORDINAL_ROOT"":""decimal""},{""ORDINAL_DEBTS"":""decimal""},{""REMAININGDEBT"":""decimal""},{""REMAININGPAYMENTS"":""decimal""},{""DEBTTYPE"":""string""}]},{""data"":[[1,1,22144,24,""Boat Loan""],[2,2,715551,84,""Mortgage""],[3,3,15577,67,""Car Loan""],[4,4,230544,45,""Student Loan""]]}] The DEBTS_BANKERS column contains the data grid JSON for the BANKERS data that is nested within the DEBTS data structure.[{""metadata"":[{""ORDINAL_DEBTS"":""decimal""},{""ORDINAL_BANKERS"":""decimal""},{""BANKOFFICER"":""string""}]},{""data"":[[1,1,""Matt""],[2,2,""Carl""],[3,3,""Ernest""],[4,4,""Randy""]]}] %DCM_MERGESERIALIZEDGRIDS Macro Merges tables that contain data grids that have been serialized with the %DCM_SERIALIZEGRIDS macro with a table that contains scalar data. Requirement: If you are working with SAS Cloud Analytic Services (CAS) tables, all of the tables must be accessed in the same CAS session. Note: This macro performs an inner join.",456
130,"s page 27. MERGETABLE= table_name , MERGEKEY= merged_table_key , OUTPUTTABLE= results_table , GRIDTABLES= data_grid1 < data_grid2 >..., GRIDMERGEKEYS= data_grid_key1 < data_grid_key2 >..., GRIDCOLUMNS= data_grid_column1 < data_grid_column2 >..., <PROMOTE= YES | NO > ) Required Arguments MERGETABLE= table_name specifies the name of the table that contains the scalar data. MERGEKEY= merge_table_key specifies the name of the key column in the table specified by the MERGETABLE= argument. Note: You can specify only one merge column key. The %DCM_MERGESERIALIZEDGRIDS macro does not support merges based on multiple key values. OUTPUTTABLE= <libref. >table specifies the name of the table that contains the results of the merge. The default library is WORK. GRIDTABLES= data_grid1 < data_grid2 >... specifies the names of the tables that contain the data grid columns that are to be merged into the results table. The data grid columns must contain a serialized data grid produced by the %DCM_SERIALIZEGRID macro.InteractionFor each data grid that is to be merged into the results table, the name of the data grid table, merge key, and data grid column must be specified in the same order for each of the GRIDTABLES=, GRIDMERGEKEYS=, and GRIDCOLUMNS= arguments. GRIDMERGEKEYS= data_grid_key1 <data_grid_key2 >... specifies the names of the key columns in the tables specified by the GRIDTABLES= argument.InteractionThe first key specified must be the key for the first table specified in the GRIDTABLES= argument, the second key must be the key for the second table, and so on. GRIDCOLUMNS= data_grid_column1 <data_grid_column2 >... specifies the names of the data grid columns in the tables specified by the GRIDTABLES= argument.InteractionThe first column specified must be the name of the data grid column in the first table specified in the GRIDTABLES= argument, the second key must be the name of the data grid column in the second table, and so on. PROMOTE= YES | NO promotes the merged data grid table from session scope to global scope.%DCM_MERGESERIALIZEDGRIDS Macro 23",493
131,"s page 28. DefaultYESRestrictionThis option is valid only if the output table is written to a CAS library. Example: Merging Debts and Assets Data Grids with Loan Request Information The following example merges the scalar data in the mylib.loanRequests table with the data grid columns in the tables debtsGrid and assetGrid. The key column for the scalar table and the data grid tables is custName. The data grid columns in the resulting output table, mylib.loadRequestData, are named Debts and Assets.%dcm_mergeSerializedGrids(  mergeTable=mylib.loanRequests,  mergekey=Customer,  outputTable=mylib.loanRequestData,  gridTables=debtsGrid assetsGrid,  gridMergeKeys=custName custName  gridColumns=Debts Assets); Table 2.1 mylib.loanrequests Merge Table RequestIDRequestedAmtCustomerME4922Mac0120000MacKelly, SaraNC2W497Smy0380495Smyth, JoeTable 2.2 debtsGrid Data Grid Table CustNameDebtsMacKelly, Sara[{""metadata"":[{""DEBTTYPE"":""string""},{""BALANCE"":""decimal""}]}, {""data"":[[""Mortgage"",80053.16],[""CreditCard"",2143.68]]}]Table 2.3 assetsGrid Data Grid Table CustNameAssetsMacKelly, Sara[{""metadata"":[{""ASSETTYPE"":""string""},{""VALUE"":""decimal""}]}, {""data"": [[""Property, Primary"",212000],[""Property, Investment"",125000]]}]Smyth, Joe[{""metadata"":[{""ASSETTYPE"":""string""},{""VALUE"":""decimal""}]}, {""data"": [[""Property, Primary"",234500]]}]24Chapter 2 / Data Grid Macros",360
132,"s page 29. Table 2.4 mylib.loanRequestData Results Table RequestIDRequestAm tCustomerDebtsAssetsME4922Mac0 120000MacKelly, Sara[{""metadata"": [{""DEBTTYPE"":""string""}, {""BALANCE"":""decimal""}]}, {""data"": [[""Mortgage"",80053.16], [""CreditCard"",2143.68]]}][{""metadata"": [{""ASSETTYPE"":""string""}, {""VALUE"":""decimal""}]}, {""data"":[[""Property, Primary"",212000], [""Property, Investment"",125000]]}] %DCM_SERIALIZEGRID Macro Creates a table in which one of the columns contains a JSON string that represents a data grid. Requirement: If you are working with SAS Cloud Analytic Services (CAS) tables, all of the tables must be accessed in the same CAS session. Syntax %DCM_SERIALIZEGRID ( GRIDCOLNAME= data_grid_column_name , GRIDSOURCETABLE= table_name , OUTPUTTABLE= <libref. >table , <CLASSVARS= class_variable1 < class_variable2 ...>,> <GRIDCOLS= column1 < column2 ...>,> <GRIDCOLLEN= length ,> <PROMOTE= YES | NO > ) Required Arguments GRIDCOLNAME= data_grid_column_name specifies the name for the serialized data grid column in the results table. GRIDSOURCETABLE= table_name specifies the table that contains the columns that are to be serialized into a data grid. OUTPUTTABLE= <libref. >table specifies the name of the output table that contains the data grid column. The default library is WORK.%DCM_SERIALIZEGRID Macro 25",344
133,s page 3. Contents Chapter 1 /Using Data Grids in SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Introduction to Data Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Serialize and Import Data Grids Into a Table Column . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Working with Data Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Using Data Grid Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 Using Data Grids in a Code File . . . . . . . . . .,281
134,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 Working with Data Grids in SAS Studio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 Chapter 2 /Data Grid Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 Using the Data Grid Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 Data Grid Macros Available with SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . 13 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,270
135,"s page 30. Optional Arguments CLASSVARS= class_variable1 < class_variable2 ...> specifies the class variables that control how the data is grouped into data grids. If you specify one class variable, the results table contains one data grid for each value of the class variable. If you specify more than one class variable, a separate data grid is created for each combination of values for the class variables. The class variables are written to the output results table. GRIDCOLS= column1 < column2 ...> specifies the names of the columns that are to be serialized into the data grid. If you do not specify this option, all of the columns in the table are serialized except for the columns specified by the CLASSVARS= option. GRIDCOLLEN= length specifies the length for the column specified by the GRIDCOLUMN= option. If the results table is a Base SAS table, the length must be less than or equal to 32,767. If the results table is a SAS Cloud Analytic Services (CAS) table, the length must be less than or equal to 10,485,760.Default32,767 PROMOTE= YES | NO promotes the merged data grid table from session scope to global scope.DefaultYESRestrictionThis option is valid only if the output table is written to a CAS library. Example: Serializing the Assets Table The following example serializes (creates JSON strings) the assets data for each customer in the mylib.assets table. The output table is named assetsGrid, and the data grid column in the output table is named Assets. The data in the mylib.assets table is grouped by the class variable custName, so the output table contains one row for each value of custName.%dcm_serializeGrid(  gridSourceTable=mylib.assets,  gridColName=Assets,  outputTable=assetsGrid,  classvars=custName); Table 2.5 mylib.assets Source Table CustNameAssetTypeValueMacKelly, SaraProperty, Primary212000MacKelly, SaraProperty, Investment125000Smyth, JoeProperty, Primary234500 26Chapter 2 / Data Grid Macros",434
136,"s page 31. Table 2.6 assestGrid Results Table CustNameAssetsMacKelly, Sara[{""metadata"":[{""ASSETTYPE"":""string""},{""VALUE"":""decimal""}]}, {""data"": [[""Property, Primary"",212000],[""Property, Investment"",125000]]}]Smyth, Joe[{""metadata"":[{""ASSETTYPE"":""string""},{""VALUE"":""decimal""}]}, {""data"": [[""Property, Primary"",234500]]}]%DCM_SERIALIZEGRID Macro 27",99
137,s page 32. 28Chapter 2 / Data Grid Macros,14
138,s page 33. 3 Data Grid Functions Comparing Values in Data Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 Data Grid Functions Available in SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . 31 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 DATAGRID_ADDCHARACTERCOLUMN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 DATAGRID_ADDCOLUMN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 DATAGRID_ADDNUMERICCOLUMN Function . . . . . . . . . . . .,280
139,. . . . . . . . . . . . . . . . . . . . 38 DATAGRID_ADDROW Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 DATAGRID_APPEND Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 DATAGRID_BOTTOMN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 DATAGRID_CLEAR Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 DATAGRID_CLEARCOLUMN Function . . . . . . . . . . . . . . . . . . . . . . .,269
140,. . . . . . . . . . . . . . . . . 41 DATAGRID_CLEARDATA Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 DATAGRID_COLUMNCOUNT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 DATAGRID_COLUMNINDEX Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 DATAGRID_COLUMNISNUMERIC Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 DATAGRID_COLUMNNAME Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 DATAGRID_COLUMNTYPE Function . . . . . .,278
141,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 DATAGRID_COLUMNVALUESTOLIST Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 DATAGRID_CONFORM Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 DATAGRID_COPY Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 DATAGRID_COPYCOLUMN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 DATAGRID_CORR Function . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
142,. . . . . . . . . . . . . . . . . . . . . . . 47 DATAGRID_COUNT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 DATAGRID_CREATE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 DATAGRID_DELETECOLUMN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 DATAGRID_DELETEROW Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 DATAGRID_DISTINCTROWCOUNT Function . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
143,. . . . . . . 51 DATAGRID_EQUALS Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 DATAGRID_FILTEREDGET Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 DATAGRID_FILTEREDGETINDEX Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 DATAGRID_FILTEREDSET Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 DATAGRID_FILTEREDSETALL Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 DATAGRID_FREQ Function . . . . . . . . . . . .,276
144,s page 34. DATAGRID_FREQ Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 DATAGRID_GET Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 DATAGRID_GETBOOL Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 DATAGRID_GETDOUBLE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5929,227
145,s page 35. DATAGRID_GETFIRSTINDEXBYVALUE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 DATAGRID_GETFIRSTMISSINGINDEX Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 DATAGRID_GETINT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 DATAGRID_GETLASTINDEXBYVALUE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 DATAGRID_GETLASTMISSINGINDEX Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62 DATAGRID_GETLONG Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62 DATAGRID_GETSTRING Function .,286
146,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 DATAGRID_GRIDMATCHCOUNT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 DATAGRID_INITIALIZE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 DATAGRID_INNERJOIN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 DATAGRID_LEFTJOIN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 DATAGRID_MATCHCOUNT Function . . . . . . . . . . . . .,271
147,. . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 DATAGRID_MAX Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 DATAGRID_MAXBOOL Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 DATAGRID_MAXINT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 DATAGRID_MAXLONG Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 DATAGRID_MAXSTRING Function . . . . . . . . . . .,270
148,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 DATAGRID_MEAN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 DATAGRID_MEDIAN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 DATAGRID_MIN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71 DATAGRID_MINBOOL Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 DATAGRID_MININT Function . .,270
149,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 DATAGRID_MINLONG Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73 DATAGRID_MINSTRING Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73 DATAGRID_MULTISORT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 DATAGRID_NMISS Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,263
150,75 DATAGRID_NVALID Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 DATAGRID_RENAMECOLUMN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 DATAGRID_RIGHTJOIN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 DATAGRID_SET Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 DATAGRID_SETALL Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,269
151,s page 36. DATAGRID_SETDOUBLE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 DATAGRID_SETINT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 DATAGRID_SETLONG Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 DATAGRID_SETSTRING Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 82 DATAGRID_SORT Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
152,. . . 82 DATAGRID_STDDEV Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 DATAGRID_SUBSETBYVALUE Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 DATAGRID_SUM Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 DATAGRID_SUMLONG Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 DATAGRID_TOPN Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
153,"s page 37. OperatorDescriptionEQ, =, ==EqualsNE, !=, ^=, <>Not equal toGT, >Greater thanLT, <Less thanLE, <=Less than or equal toGE, >=Greater than or equal to IMPORTANT Unless noted otherwise in the description for a specific function, the equals operator (=) trims trailing spaces before comparing values. Therefore, if you compare “hello ” to “hello ”, the comparison evaluates to True. Data Grid Functions Available in SAS Intelligent Decisioning Functions are categorized by the types of values that they return or type of operation they perform.Table 3.1 Data Grid Function Categories CategoryDescriptionCreate, Update, or DeleteCreate, copy, update, or clear the data in a data gridInformationReturn information about an entire data grid or about a column or row in the data gridJoin or AppendJoin or append two data gridsRenameRename columns in a data gridRetrieve ValuesRetrieve values from a data gridSerializeSerialize a data grid into a JSON string Data Grid Functions Available in SAS Intelligent Decisioning 31",212
154,"s page 38. CategoryDescriptionSet ValuesSet the value of cells in a data gridStatisticalPerform statistical calculations on values in the data gridSubset and SortSubset or sort a data grid The following table provides brief descriptions of the data grid functions.CategoryLanguage ElementsDescriptionCreate, Update, or DeleteDATAGRID_ADDCHARACT ERCOLUMN Function (p. 37)Adds a character column to the specified data grid.DATAGRID_ADDCOLUMN Function (p. 37)Adds a column of the specified type to the specified data grid.DATAGRID_ADDNUMERIC COLUMN Function (p. 38)Adds a numeric column to the specified data grid.DATAGRID_ADDROW Function (p. 39)Appends new rows to the specified data grid.DATAGRID_CLEAR Function (p. 41)Deletes all rows and all column metadata from the specified data grid.DATAGRID_CLEARCOLUM N Function (p. 41)Deletes the data in the specified columns.DATAGRID_CLEARDATA Function (p. 42)Deletes all rows from the specified data grid but does not remove the column metadata.DATAGRID_CONFORM Function (p. 46)Adds the columns that are exclusive to dataGrid1 to dataGrid2, and adds the columns that are exclusive to dataGrid2 to dataGrid1.DATAGRID_COPY Function (p. 46)Copies the source data grid into the target data grid.DATAGRID_COPYCOLUMN Function (p. 47)Copies the specified column in the source data grid into the target data grid.DATAGRID_CREATE Function (p. 49)Creates the data grid columns that are defined in the specified JSON string, and assigns to those columns any values that are specified in the JSON string.DATAGRID_DELETECOLU MN Function (p. 50)Deletes the specified column from the specified data grid.DATAGRID_DELETEROW Function (p. 50)Deletes one or more rows from the specified data grid. 32Chapter 3 / Data Grid Functions",423
155,"s page 39. CategoryLanguage ElementsDescriptionDATAGRID_INITIALIZE Function (p. 64)Replaces all of the values in the specified data grid with the specified default values.InformationDATAGRID_COLUMNCOUN T Function (p. 42)Returns the number of columns in the specified data grid.DATAGRID_COLUMNINDEX Function (p. 43)Returns the index of the specified column in the specified data grid.DATAGRID_COLUMNISNU MERIC Function (p. 43)Determines whether the data type of the specified data grid column is numeric.DATAGRID_COLUMNNAME Function (p. 44)Returns the name of the column that is in the specified ordinal position in the specified data grid.DATAGRID_COLUMNTYPE Function (p. 44)Returns the data type of the specified column in the specified data grid.DATAGRID_COUNT Function (p. 48)Returns the number of rows in the specified data grid.DATAGRID_DISTINCTROW COUNT Function (p. 51)Returns the number of unique rows in the specified data grid.DATAGRID_EQUALS Function (p. 51)Compares the column count, row count, column names, data types, and values in specified data grids and determines whether they are identical.DATAGRID_FILTEREDGETI NDEX Function (p. 53)Returns the index of the first row in the specified column for which the specified comparison evaluates to true.DATAGRID_GETFIRSTINDE XBYVALUE Function (p. 59)Returns the index of the first row that contains the specified value in the specified column.DATAGRID_GETFIRSTMISS INGINDEX Function (p. 60)Returns the index of the first row that contains a missing value in the specified column.DATAGRID_GETLASTINDE XBYVALUE Function (p. 61)Returns the index of the last row that contains the specified value in the specified column.DATAGRID_GETLASTMISSI NGINDEX Function (p. 62)Returns the index of the last row that contains a missing value in the specified column.DATAGRID_GRIDMATCHC OUNT Function (p. 64)Returns the number of rows for which the value in the specified column in one data grid matches the value in the specified column in another data grid.DATAGRID_MATCHCOUNT Function (p.",488
156,s page 4. ivContents,7
157,"s page 40. CategoryLanguage ElementsDescriptionJoin or AppendDATAGRID_ADDROW Function (p. 39)Appends new rows to the specified data grid.DATAGRID_APPEND Function (p. 39)Appends dataGrid2 to dataGrid1.DATAGRID_INNERJOIN Function (p. 65)Performs an inner join of two data grids and populates the target data grid with the results of the join.DATAGRID_LEFTJOIN Function (p. 66)Performs a left join of two data grids, returns the resulting data grid, and populates the target data grid with the results of the join.DATAGRID_RIGHTJOIN Function (p. 76)Performs a right join of two data grids, returns the resulting data grid, and populates the target data grid with the results of the join.RenameDATAGRID_RENAMECOLU MN Function (p. 76)Renames the specified column in the specified data grid.Retrieve ValuesDATAGRID_COLUMNVALU ESTOLIST Function (p. 45)Creates a comma-separated list of the values in the specified data grid column.DATAGRID_FILTEREDGET Function (p. 52)Returns the value in the first row in the specified column for which the specified comparison evaluates to true.DATAGRID_GET Function (p. 58)Returns the value of the cell in the specified row and column.DATAGRID_GETBOOL Function (p. 58)Returns the value of the cell in the specified row and column as an integer.DATAGRID_GETDOUBLE Function (p. 59)Returns the value of the cell in the specified row and column as a decimal value.DATAGRID_GETINT Function (p. 61)Returns the value of the cell in the specified row and column as an integer.DATAGRID_GETLONG Function (p. 62)Returns the value of the cell in the specified row and column as a long integer.DATAGRID_GETSTRING Function (p. 63)Returns the value of the cell in the specified row and column as a character string.SerializeDATAGRID_TOSTRING Function (p. 87)Returns the JSON string for the specified data grid.Set ValuesDATAGRID_FILTEREDSET Function (p.",469
158,s page 41. CategoryLanguage ElementsDescriptionDATAGRID_INITIALIZE Function (p. 64)Replaces all of the values in the specified data grid with the specified default values.DATAGRID_SET Function (p. 77)Assigns the specified value to the specified row and column.DATAGRID_SETALL Function (p. 78)Assigns the specified value to all rows in the specified column.DATAGRID_SETBOOL Function (p. 79)Assigns the specified Boolean value to the specified row and column.DATAGRID_SETDOUBLE Function (p. 79)Assigns the specified decimal value to the specified row and column.DATAGRID_SETINT Function (p. 80)Assigns the specified integer value to the specified row and column.DATAGRID_SETLONG Function (p. 81)Assigns the specified long integer value to the specified row and column.DATAGRID_SETSTRING Function (p. 82)Assigns the specified character string to the specified row and column.StatisticalDATAGRID_CORR Function (p. 47)Returns the Pearson product-moment correlation coefficient for the specified columns in the specified data grid.DATAGRID_FREQ Function (p. 57)Returns the number of distinct values for the specified column.DATAGRID_MAX Function (p. 68)Returns the maximum value for the specified column.DATAGRID_MAXBOOL Function (p. 68)Returns the maximum value for the specified column.DATAGRID_MAXINT Function (p. 69)Returns the maximum value for the specified column.DATAGRID_MAXLONG Function (p. 69)Returns the maximum value for the specified column.DATAGRID_MAXSTRING Function (p. 70)Returns the maximum value for the specified column.DATAGRID_MEAN Function (p. 70)Returns the mean value for the specified column.DATAGRID_MEDIAN Function (p. 71)Returns the median value for the specified column.DATAGRID_MIN Function (p. 71)Returns the minimum value that appears in the specified column.Data Grid Functions Available in SAS Intelligent Decisioning 35,443
159,"s page 42. CategoryLanguage ElementsDescriptionDATAGRID_MINBOOL Function (p. 72)Returns the minimum value that appears in the specified column.DATAGRID_MININT Function (p. 72)Returns the minimum value that appears in the specified column.DATAGRID_MINLONG Function (p. 73)Returns the minimum value that appears in the specified column.DATAGRID_MINSTRING Function (p. 73)Returns the minimum value that appears in the specified column.DATAGRID_NMISS Function (p. 75)Returns the number of missing values for the specified column of the specified data grid.DATAGRID_STDDEV Function (p. 83)Returns the standard deviation of the values in the specified column.DATAGRID_SUM Function (p. 86)Returns the sum of the values in the specified column.DATAGRID_SUMLONG Function (p. 86)Returns the sum of the values in the specified column.Subset and SortDATAGRID_BOTTOMN Function (p. 40)Populates the target data grid with the rows from the source data grid that contain the lowest number values in the specified column.DATAGRID_MULTISORT Function (p. 74)Sorts a data grid based on the values of one or more columns, and then populates the target data grid with the sorted data.DATAGRID_SORT Function (p. 82)Sorts a data grid based on the values in a single column, and then populates the target data grid with the sorted data.DATAGRID_SUBSETBYVAL UE Function (p. 84)Populates the target data grid with the rows from the source data grid for which the specified comparison evaluates to true.DATAGRID_TOPN Function (p. 87)Populates the target data grid with the rows from the source data grid that contain the highest number values in the specified column.36Chapter 3 / Data Grid Functions",401
160,"s page 43. Dictionary DATAGRID_ADDCHARACTERCOLUMN Function Adds a character column to the specified data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns the number of columns that are in the data grid after the new column has been added. Syntax DATAGRID_ADDCHARACTERCOLUMN (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column that you want to create. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_ADDCOLUMN Function Adds a column of the specified type to the specified data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns the number of columns that are in the data grid after the new column has been added.DATAGRID_ADDCOLUMN Function 37",196
161,"s page 44. Syntax DATAGRID_ADDCOLUMN (dataGrid , column , type) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column that you want to create. You can specify a column name in single quotation marks or a variable that evaluates to a column name. type specifies the data type of the new column. Specify one of the following data types: boolean , bool , double , decimal , integer , int , long , or string . If you specify an invalid data type, the new column is not created. DATAGRID_ADDNUMERICCOLUMN Function Adds a numeric column to the specified data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns the number of columns that are in the data grid after the new column has been added. Syntax DATAGRID_ADDNUMERICCOLUMN (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column that you want to create. You can specify a column name in single quotation marks or a variable that evaluates to a column name.38Chapter 3 / Data Grid Functions",259
162,"s page 45. DATAGRID_ADDROW Function Appends new rows to the specified data grid. Categories: Create, Update, or Delete Join or Append Returned data type:INTEGER Note: This function returns the number of rows that are in the data grid after the new row has been added. Syntax DATAGRID_ADDROW (dataGrid <, numberOfRows= n>) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. Optional Argument numberOfRows= n specifies the number of rows that you want to add to the data grid. If you do not specify this argument, the DATAGRID_ADDROW function adds only one row to the data grid.Default1 DATAGRID_APPEND Function Appends dataGrid2 to dataGrid1 . Category: Join or Append Requirement: The two data grids must contain the same columns. You can use the DATAGRID_CONFORM function to make the two data grids have the same columns. Returned data type:INTEGER Note: This function returns the number of rows that are in the data grid after the append.DATAGRID_APPEND Function 39",228
163,"s page 46. Syntax DATAGRID_APPEND (dataGrid1 , dataGrid2 ) Required Argument dataGrid1 dataGrid2 specifies the names of the two data grids. DATAGRID_BOTTOMN Function Populates the target data grid with the rows from the source data grid that contain the lowest number values in the specified column. Category: Subset and Sort Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. The target data grid is sorted in ascending order of the specified column. Syntax DATAGRID_BOTTOMN (source_dataGrid , column , number , target_dataGrid ) Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. number specifies the number of rows to return. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten.40Chapter 3 / Data Grid Functions",235
164,"s page 47. DATAGRID_CLEAR Function Deletes all rows and all column metadata from the specified data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function always returns a zero. Syntax DATAGRID_CLEAR (dataGrid ) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. DATAGRID_CLEARCOLUMN Function Deletes the data in the specified columns. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function always returns a zero. Syntax DATAGRID_CLEARCOLUMN (dataGrid , column <, start_row_number , end_row_number >) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID.DATAGRID_CLEARCOLUMN Function 41",168
165,"s page 48. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. Optional Arguments start_row_number specifies the index of the first row from which you want to delete the data in the specified column.InteractionIf you specify start_row_number , then you must also specify end_row_number . To delete the data in a single row, specify the same value for both arguments. end_row_number specifies the index of the last row from which you want to delete the data in the specified column. DATAGRID_CLEARDATA Function Deletes all rows from the specified data grid but does not remove the column metadata. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function always returns a zero. Syntax DATAGRID_CLEARDATA (dataGrid ) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. DATAGRID_COLUMNCOUNT Function Returns the number of columns in the specified data grid. Category: Information Returned data type:INTEGER42Chapter 3 / Data Grid Functions",236
166,"s page 49. Syntax DATAGRID_COLUMNCOUNT (dataGrid ) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. DATAGRID_COLUMNINDEX Function Returns the index of the specified column in the specified data grid. Category: Information Returned data type:INTEGER Note: If the column does not exist in the specified data grid, an error is written to the log. Syntax DATAGRID_COLUMNINDEX (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_COLUMNISNUMERIC Function Determines whether the data type of the specified data grid column is numeric. Category: Information Returned data type:INTEGER Note: This function returns a 1 if the column data type is numeric and a 0 if it is not numeric.DATAGRID_COLUMNISNUMERIC Function 43",223
167,s page 5. 1 Using Data Grids in SAS Intelligent Decisioning Introduction to Data Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 What Is a Data Grid? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 How Are Data Grids Stored? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 When Are Data Grid Columns Created? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Processing Data In A Data Grid . . . . . . . . . . . . . . . . . .,278
168,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Serialize and Import Data Grids Into a Table Column . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Working with Data Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Data Grids and Publishing Destinations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Ways to Work with Data Grids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Defining Data Grid Variables . . . . . . . . . . . . . . . . . . . . .,272
169,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 Scoring Rows in a Data Grid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 Mapping Data Grid Variables in a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 Editing Data Grid Variable Metadata . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 Using Data Grid Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 Using Data Grids in a Code File . . . . . . . . . . . .,271
170,"s page 50. Syntax DATAGRID_COLUMNISNUMERIC (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_COLUMNNAME Function Returns the name of the column that is in the specified ordinal position in the specified data grid. Category: Information Returned data type:CHARACTER Syntax DATAGRID_COLUMNNAME (dataGrid , column_number ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column_number specifies the column number in the data grid. The columns in a data grid are numbered beginning with 1. DATAGRID_COLUMNTYPE Function Returns the data type of the specified column in the specified data grid. Category: Information Returned data type:CHARACTER Note: This function returns either string or decimal , depending on the column data type.44Chapter 3 / Data Grid Functions",226
171,"s page 51. Syntax DATAGRID_COLUMNTYPE (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_COLUMNVALUESTOLIST Function Creates a comma-separated list of the values in the specified data grid column. Category: Retrieve Values Returned data type:INTEGER Syntax DATAGRID_COLUMNVALUESTOLIST (dataGrid , column , valueList ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. valueList specifies a name for the list of values. Details Trailing blanks are removed from the values in the data grid before they are added to the list. Missing values in the data grid are indicated in the value list by two comma separators without any content between them. All values are added to the list as character values. The list is enclosed in square brackets. For example:DATAGRID_COLUMNVALUESTOLIST Function 45",269
172,"s page 52. [50,,150][,,Australia,New Zealand] DATAGRID_CONFORM Function Adds the columns that are exclusive to dataGrid1 to dataGrid2 , and adds the columns that are exclusive to dataGrid2 to dataGrid1 . Category: Create, Update, or Delete Returned data type:INTEGER Note: This function always returns a zero. Syntax DATAGRID_CONFORM (dataGrid1 , dataGrid2 ) Required Argument dataGrid1 dataGrid2 specifies the names of the two data grids that you want to contain the same columns. DATAGRID_COPY Function Copies the source data grid into the target data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. Syntax DATAGRID_COPY (source_dataGrid , target_dataGrid )46Chapter 3 / Data Grid Functions",181
173,"s page 53. Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. DATAGRID_COPYCOLUMN Function Copies the specified column in the source data grid into the target data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns 1 if the operation is successful and 0 if it is not successful.. Syntax DATAGRID_COPYCOLUMN (source_dataGrid , target_dataGrid , source-column , target-column ) Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. source-column specifies the name of the column in the source data grid that you want to copy. target-column specifies a name for the new column in the target data grid. DATAGRID_CORR Function Returns the Pearson product-moment correlation coefficient for the specified columns in the specified data grid. Category: StatisticalDATAGRID_CORR Function 47",261
174,"s page 54. Returned data type:DOUBLE Syntax DATAGRID_CORR (dataGrid , column1 , column2 ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column1 column2 specifies the numeric data grid columns for which you want to compute the correlation coefficient. Details The Pearson product-moment correlation is a parametric measure of association for two variables. It measures both the strength and the direction of a linear relationship. If one variable X is an exact linear function of another variable Y, a positive relationship exists if the correlation is 1, and a negative relationship exists if the correlation is –1. If there is no linear predictability between the two variables, the correlation is 0. If the two variables jointly have a normal distribution with a zero correlation, the two variables are independent. However, correlation does not imply causality because, in some cases, an underlying causal relationship might not exist. The formula for the Pearson product-moment correlation, denoted by ρxy , is as follows:ρxy=Cov x,y VxVy=Ex− E xy− E y Ex− E x2Ey− E y2 DATAGRID_COUNT Function Returns the number of rows in the specified data grid. Category: Information Returned data type:INTEGER48Chapter 3 / Data Grid Functions",278
175,"s page 55. Syntax DATAGRID_COUNT (dataGrid ) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. DATAGRID_CREATE Function Creates the data grid columns that are defined in the specified JSON string, and assigns to those columns any values that are specified in the JSON string. Category: Create, Update, or Delete Requirement: The data grid variable must already be defined as a variable of type DATAGRID. Returned data type:INTEGER Note: This function returns the number of rows that are in the data grid. Syntax DATAGRID_CREATE (dataGrid , JSON_string ) Required Arguments dataGrid specifies the name of a variable of type DATAGRID.ImportantThis variable must already be defined as a variable of type DATAGRID. If the variable is not defined as a DATAGRID variable, this function creates a variable of type CHARACTER that contains the JSON string. If the variable is defined as a DATAGRID variable, this function creates the columns in the data grid and assigns to those columns any values that are specified in the JSON string. JSON_string specifies a JSON character string that contains the data for the data grid. You can specify a literal value in single quotation marks, or you can specify a variable that evaluates to a JSON character string. The JSON string must have the same format as the string that is produced by the %DCM_SERIALIZEDGRID macro: [{""metadata"":[{"" column1 "":""data_type ""}< ,{""column2"" :""data_type ""}...]}, > {""data"":[[ row1_data ]< ,[row2_data ]... >]}]DATAGRID_CREATE Function 49",339
176,"s page 56. column1 column2 specifies the column names of each column in the data grid. row1_data row2_data specifies the data for each row in the data grid. Separate the values for each column in a row with a comma (,). Enclose character values in double quotation marks.See“Introduction to Data Grids” on page 1 “Example: Serializing the Assets Table” on page 26 DATAGRID_DELETECOLUMN Function Deletes the specified column from the specified data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns a 1 if the column does not exist and a 0 if the column is deleted. Syntax DATAGRID_DELETECOLUMN (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_DELETEROW Function Deletes one or more rows from the specified data grid. Category: Create, Update, or Delete Returned data type:INTEGER Note: This function returns the number of rows remaining in the data grid.50Chapter 3 / Data Grid Functions",263
177,"s page 57. Syntax DATAGRID_DELETEROW (dataGrid , start_row_number <, end_row_number >) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. start_row_number specifies the index of the first row that you want to delete. Optional Argument end_row_number specifies the index of the last row that you want to delete. DATAGRID_DISTINCTROWCOUNT Function Returns the number of unique rows in the specified data grid. Category: Information Returned data type:INTEGER Syntax DATAGRID_DISTINCTROWCOUNT (dataGrid ) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. DATAGRID_EQUALS Function Compares the column count, row count, column names, data types, and values in specified data grids and determines whether they are identical. Category: InformationDATAGRID_EQUALS Function 51",192
178,"s page 58. Returned data type:INTEGER Note: This function returns 1 if the two data grids are identical and 0 if they are not identical. Syntax DATAGRID_EQUALS (dataGrid1 , dataGrid2 ) Required Argument dataGrid1 dataGrid2 specifies the names of the two data grids that you want to compare. DATAGRID_FILTEREDGET Function Returns the value in the first row in the specified column for which the specified comparison evaluates to true. Category: Retrieve Values Returned data type:STRING Note: If no rows match the specified comparison, an error is written to the log. Syntax DATAGRID_FILTEREDGET (dataGrid , columnToSearch , filterColumn , operator , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. columnToSearch specifies the name of the column whose value you want to retrieve. You can specify a column name in single quotation marks or a variable that evaluates to a column name. filterColumn specifies the name of the column whose value is to be compared to variableOrValue . You can specify a column name in single quotation marks or a variable that evaluates to a column name.52Chapter 3 / Data Grid Functions",254
179,"s page 59. operator specifies one of the following operators shown in “Comparing Values in Data Grids” on page 30. You can specify the name of a character variable that evaluates to one of these operators, or you can specify the operator enclosed in single quotation marks. variableOrValue specifies the value to compare to the value of filterColumn . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. The value that you specify must be or must evaluate to the same data type as filterColumn . Details The DATAGRID_FILTEREDGET function compares the value in filterColumn to the specified variableOrValue by using the comparison operator. The comparison is as follows:filterColumn operator variableOrValue For the first row for which the comparison evaluates to true, this function returns the value of columnReturned . Example The following example determines whether the value of the riskGroup column is equal to Low , and if so, returns the value of the approvalStatus column:DATAGRID_FILTEREDGET(DebtEval,'approvalStatus','riskGroup','EQ','Low') DATAGRID_FILTEREDGETINDEX Function Returns the index of the first row in the specified column for which the specified comparison evaluates to true. Category: Information Returned data type:STRING, DOUBLE Note: If no rows match the specified comparison, this function returns -1. Syntax DATAGRID_FILTEREDGETINDEX (dataGrid , filterColumn , operator , variableOrValue )DATAGRID_FILTEREDGETINDEX Function 53",314
180,"s page 6. Table 1.1 Insurance Policy Table PolicyHolderPolicyNumberYearlyPremiumSmyth, Joe453975R398439.50Smyth, Joe987348P210132.90Dupree, Marcel983092B228334.00Dupree, Marcel274933P412219.25 You can use a data grid to store the policy information as represented in Figure 1.1 . Figure 1.1 Insurance Policy Table Using Data Grids How Are Data Grids Stored? The data grid in the Policies column is stored as a JavaScript Object Notation (JSON) string. A data grid JSON string has the following basic format:[{""metadata"":[column-definitions]},{""data"":[column-data]}] The column definitions are name-value pairs separated by commas:{""column1-name"":""data-type""},{""column2-name"":""data-type""},... The data for each row of the data grid is specified in square brackets with commas between each value:[column1-data,column2-data...] For example, if the data grids shown in Figure 1.1 are serialized, the insurance policy table appears as shown in Table 1.2 .2Chapter 1 / Using Data Grids in SAS Intelligent Decisioning",249
181,"s page 60. Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. filterColumn specifies the name of the column whose value is to be compared to variableOrValue . You can specify a column name in single quotation marks or a variable that evaluates to a column name. operator specifies one of the following operators shown in “Comparing Values in Data Grids” on page 30. You can specify the name of a character variable that evaluates to one of these operators, or you can specify the operator enclosed in single quotation marks. variableOrValue specifies the value to compare to the value of filterColumn . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. Trailing blanks are included in the comparison. The value that you specify must be or must evaluate to the same data type as filterColumn . Details The DATAGRID_FILTEREDGETINDEX function compares the value in filterColumn to the specified variableOrValue by using the comparison operator. The comparison is as follows:filterColumn operator variableOrValue This function returns the row number of the first row for which the comparison evaluates to true. Example The following example searches for the first row in the DebtEval data grid where the value of the riskGroup column is equal to Low . It returns the row number of the row, or if it does not find the value Low , it returns -1.DATAGRID_FILTEREDGET(DebtEval,'riskGroup','EQ','Low') DATAGRID_FILTEREDSET Function Sets the value in the specified row and column to the specified value if the specified comparison evaluates to true. Category: Set Values Returned data type:INTEGER54Chapter 3 / Data Grid Functions",362
182,"s page 61. Syntax DATAGRID_FILTEREDSET (dataGrid , columnToAssign , rowNumber , filterColumn , operator , variableOrValue , valueToAssign ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. columnToAssign specifies the name of the column to be assigned the specified value. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number that contains the cell to be assigned the specified value. You can specify a number or a variable that evaluates to a number. filterColumn specifies the name of the column whose value is to be compared to variableOrValue . You can specify a column name in single quotation marks or a variable that evaluates to a column name. operator specifies one of the following operators shown in “Comparing Values in Data Grids” on page 30. You can specify the name of a character variable that evaluates to one of these operators, or you can specify the operator enclosed in single quotation marks. variableOrValue specifies the value to compare to the value of filterColumn . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. The value that you specify must be or must evaluate to the same data type as filterColumn . valueToAssign specifies the value to assign to the cell at rowNumber ,columnToAssign . You can specify a number, a character value enclosed in single quotation marks, or the name of a variable. Details The DATAGRID_FILTEREDSET function compares the value of filterColumn to the value of variableOrValue using the comparison operator. The comparison is as follows:filterColumn operator variableOrValue If the comparison evaluates to true, this function sets the value of rowNumber ,columnToAssign to the value specified by valueToAssign .DATAGRID_FILTEREDSET Function 55",395
183,"s page 62. Example For the data grid row specified by the value of the customer variable, the DATAGRID_FILTEREDSET function sets the column riskGroup to High if the value of the Debts column is greater than the value of assets variable:DATAGRID_FILTEREDSET(DebtEval,'riskGroup',customer,'debts','GT',assets,'High') DATAGRID_FILTEREDSETALL Function Sets the cell in the specified column to the specified value for each row for which the specified comparison evaluates to true. Category: Set Values Returned data type:INTEGER Note: This function returns the number of cells that were set to the specified value. Syntax DATAGRID_FILTEREDSETALL (dataGrid , columnToAssign , filterColumn , operator , variableOrValue , valueToAssign ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. columnToAssign specifies the name of the column to be assigned the specified value. You can specify a column name in single quotation marks or a variable that evaluates to a column name. filterColumn specifies the name of the column whose value is to be compared to variableOrValue . You can specify a column name in single quotation marks or a variable that evaluates to a column name. operator specifies one of the following operators shown in “Comparing Values in Data Grids” on page 30. You can specify the name of a character variable that evaluates to one of these operators, or you can specify the operator enclosed in single quotation marks. variableOrValue specifies the value to compare to the value of filterColumn . You can specify a number, a character string enclosed in single quotation marks, or the name of a 56Chapter 3 / Data Grid Functions",358
184,"s page 63. variable or of an expression. The value that you specify must be or must evaluate to the same data type as filterColumn . valueToAssign specifies the value to assign to the appropriate cells in columnToAssign . You can specify a number, a character value enclosed in single quotation marks, the name of a variable, or an expression. The value that you specify must be or must evaluate to the same data type as columnToAssign . Details For each row in the data grid, the DATAGRID_FILTEREDSETALL function compares the value of filterColumn to the value of variableOrValue by using the comparison operator. The comparison is as follows:filterColumn operator variableOrValue If the comparison evaluates to true, this function sets the value of the cell in column columnToAssign to the value specified by valueToAssign . Example This example sets the value of the cell in column riskGroup to the value of the highGroup variable for all rows in the data grid DebtEval for which the value of the Debts column is greater than the value of the assets variable:DATAGRID_FILTEREDSETALL(DebtEval,'riskGroup','debts','GT',assets,highGroup) DATAGRID_FREQ Function Returns the number of distinct values for the specified column. Category: Statistical Returned data type:INTEGER Syntax DATAGRID_FREQ (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID.DATAGRID_FREQ Function 57",310
185,"s page 64. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_GET Function Returns the value of the cell in the specified row and column. Category: Retrieve Values Returned data type:STRING Syntax DATAGRID_GET (dataGrid , column , rowNumber ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number in the data grid. You can specify a number or a variable that evaluates to a number. DATAGRID_GETBOOL Function Returns the value of the cell in the specified row and column as an integer. Category: Retrieve Values Returned data type:INTEGER Note: The value True is returned as the integer 1, and False is returned as the integer 0. Syntax DATAGRID_GETBOOL (dataGrid , column , rowNumber )58Chapter 3 / Data Grid Functions",236
186,"s page 65. Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number in the data grid. You can specify a number or a variable that evaluates to a number. DATAGRID_GETDOUBLE Function Returns the value of the cell in the specified row and column as a decimal value. Category: Retrieve Values Returned data type:DOUBLE Syntax DATAGRID_GETDOUBLE (dataGrid , column , rowNumber ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number in the data grid. You can specify a number or a variable that evaluates to a number. DATAGRID_GETFIRSTINDEXBYVALUE Function Returns the index of the first row that contains the specified value in the specified column. Category: Information Returned data type:INTEGERDATAGRID_GETFIRSTINDEXBYVALUE Function 59",259
187,"s page 66. Note: This function returns a zero if the specified value does not exist in the specified column. Syntax DATAGRID_GETFIRSTINDEXBYVALUE (dataGrid , column , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. variableOrValue specifies the value to compare to the value of column . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. Trailing blanks are included in the comparison. The value that you specify must be or must evaluate to the same data type as column . DATAGRID_GETFIRSTMISSINGINDEX Function Returns the index of the first row that contains a missing value in the specified column. Category: Information Returned data type:INTEGER Note: This function returns a zero if the specified column does not contain any missing values. Syntax DATAGRID_GETFIRSTMISSINGINDEX (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name.60Chapter 3 / Data Grid Functions",297
188,"s page 67. DATAGRID_GETINT Function Returns the value of the cell in the specified row and column as an integer. Category: Retrieve Values Returned data type:INTEGER Syntax DATAGRID_GETINT (dataGrid , column , rowNumber ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number in the data grid. You can specify a number or a variable that evaluates to a number. DATAGRID_GETLASTINDEXBYVALUE Function Returns the index of the last row that contains the specified value in the specified column. Category: Information Returned data type:INTEGER Note: This function returns a zero if the specified value does not exist in the specified column. Syntax DATAGRID_GETLASTINDEXBYVALUE (dataGrid , column , variableOrValue )DATAGRID_GETLASTINDEXBYVALUE Function 61",215
189,"s page 68. Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. variableOrValue specifies the value to compare to the value of column . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. The value that you specify must be or must evaluate to the same data type as column . DATAGRID_GETLASTMISSINGINDEX Function Returns the index of the last row that contains a missing value in the specified column. Category: Information Returned data type:INTEGER Note: This function returns a zero if the specified column does not contain any missing values. Syntax DATAGRID_GETLASTMISSINGINDEX (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_GETLONG Function Returns the value of the cell in the specified row and column as a long integer. Category: Retrieve Values Returned data type:LONG62Chapter 3 / Data Grid Functions",282
190,"s page 69. Syntax DATAGRID_GETLONG (dataGrid , column , rowNumber ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number in the data grid. You can specify a number or a variable that evaluates to a number. DATAGRID_GETSTRING Function Returns the value of the cell in the specified row and column as a character string. Category: Retrieve Values Returned data type:STRING Syntax DATAGRID_GETSTRING (dataGrid , column , rowNumber ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the row number in the data grid. You can specify a number or a variable that evaluates to a number.DATAGRID_GETSTRING Function 63",237
191,"s page 7. Table 1.2 Serialized Insurance Policy Table PolicyHolde rPoliciesSmyth, Joe[{""metadata"":[{""POLICYNUMBER"":""string""}, {""YEARLYPREMIUM"":""decimal""}]}, {""data"":[[""453975R398"",439.50], [""987348P210"",132.90]]}]Dupree, Marcel[{""metadata"":[{""POLICYNUMBER"":""string""}, {""YEARLYPREMIUM"":""decimal""}]}, {""data"":[[""983092B228"",324.00], [""274933P412"",219.35]]}] When Are Data Grid Columns Created? At run time, data grid columns are automatically created for columns that already exist in the input table or that are generated by a treatment group or by a data query node. When you add a new column to the metadata for a data grid in the Edit Columns window, you can choose whether the column is automatically created at run time. For all other data grid columns, you must use a data grid function to create the data grid column at run time. For more information, see Step 7 in “Add Columns to a Data Grid” and “Data Grid Functions Available in SAS Intelligent Decisioning” on page 31. Processing Data In A Data Grid If you are processing the data grid column in the insurance policy table, you could define a variable named Policies of type DATAGRID and use the functions described in “Data Grid Functions” on page 29 to process the data. For example:DATAGRID_GET(Policies, 'PolicyNumber', 2) For policy holder Joe Smyth, this function call returns 987348P210 . In this case, you define variables for only the PolicyHolder and Policies columns. You do not define variables for the PolicyNumber and YearlyPremium columns within the data grid. Alternatively, you can process the data grid column in the insurance policy table by using a rule set, a model, or a decision to process each row in the data grid. To specify that an object processes each row in a data grid, you select Score rows in this data grid in the Properties panel for the object. In this case, you do not use the data grid functions. You define decision variables for the individual columns in the data grid, such as PolicyNumber and YearlyPremium.",468
192,"s page 70. DATAGRID_GRIDMATCHCOUNT Function Returns the number of rows for which the value in the specified column in one data grid matches the value in the specified column in another data grid. Category: Information Returned data type:INTEGER Syntax DATAGRID_GRIDMATCHCOUNT (dataGrid1 , dataGrid2 , column1 , column2 ) Required Arguments dataGrid1 dataGrid2 specifies the names of data grids. These arguments must be variables of type DATAGRID. column1 specifies the name of the column in dataGrid1 that you want to compare to a column in dataGrid2 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. column2 specifies the name of the column in dataGrid2 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. Details The DATAGRID_GRIDMATCHCOUNT function returns the number of rows in which the value of dataGrid1 , column1 match the value of dataGrid2 , column2 . DATAGRID_INITIALIZE Function Replaces all of the values in the specified data grid with the specified default values. Categories: Create, Update, or Delete Set Values Returned data type:INTEGER64Chapter 3 / Data Grid Functions",257
193,"s page 71. CAUTION: This function replaces any values that are currently in the data grid. Syntax DATAGRID_INITIALIZE (dataGrid , character-value , numeric-value ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. character-value specifies a default value for character columns. numeric-value specifies a default value for numeric columns. DATAGRID_INNERJOIN Function Performs an inner join of two data grids and populates the target data grid with the results of the join. Category: Join or Append Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. Syntax DATAGRID_INNERJOIN (dataGrid1 , dataGrid2 , keyColumn1 , keyColumn2 , target_dataGrid ) Required Arguments dataGrid1 dataGrid2 specifies the names of the two data grids to be joined. keyColumn1 specifies the name of the key column in dataGrid1 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. keyColumn2 specifies the name of the key column in dataGrid2 . You can specify a column name in single quotation marks or a variable that evaluates to a column name.DATAGRID_INNERJOIN Function 65",262
194,"s page 72. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. Details The DATAGRID_INNERJOIN function performs an inner join of two data grids for which dataGrid1 .keyColumn1 equals dataGrid2 .keyColumn2 and populates the target data grid with the results of the join. The target table includes all rows from dataGrid1 that match rows in dataGrid2 . Unmatched rows from both data grids are discarded. When the column names in the two data grids are identical, the columns from the left side of the join are added to the resulting data grid. DATAGRID_LEFTJOIN Function Performs a left join of two data grids, returns the resulting data grid, and populates the target data grid with the results of the join. Category: Join or Append Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. Syntax DATAGRID_LEFTJOIN (dataGrid1 , dataGrid2 , keyColumn1 , keyColumn2 , target_dataGrid ) Required Arguments dataGrid1 dataGrid2 specifies the names of the two data grids to be joined. keyColumn1 specifies the name of the key column in dataGrid1 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. keyColumn2 specifies the name of the key column in dataGrid2 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten.66Chapter 3 / Data Grid Functions",365
195,"s page 73. Details The DATAGRID_LEFTJOIN function performs a left join of two data grids for which dataGrid1 .keyColumn1 equals dataGrid2 .keyColumn2 and populates the target data grid with the results of the join. The target data grid contains all rows from dataGrid1 plus the matching rows from dataGrid2 . When the column names in the two data grids are identical, the columns from the left side of the join are added to the resulting data grid. DATAGRID_MATCHCOUNT Function Returns the number of rows in the specified column for which the specified comparison evaluates to true. Category: Information Returned data type:INTEGER Syntax DATAGRID_MATCHCOUNT (dataGrid , filterColumn , operator , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. filterColumn specifies the name of the column whose value is to be compared to variableOrValue . You can specify a column name in single quotation marks or a variable that evaluates to a column name. operator specifies one of the following operators shown in “Comparing Values in Data Grids” on page 30. You can specify the name of a character variable that evaluates to one of these operators, or you can specify the operator enclosed in single quotation marks. variableOrValue specifies the value to compare to the value of filterColumn . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. Trailing blanks are included in the comparison. The value that you specify must be or must evaluate to the same data type as filterColumn .DATAGRID_MATCHCOUNT Function 67",344
196,"s page 74. DATAGRID_MAX Function Returns the maximum value for the specified column. Category: Statistical Returned data type:DOUBLE Syntax DATAGRID_MAX (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MAXBOOL Function Returns the maximum value for the specified column. Category: Statistical Returned data type:INTEGER Note: If any row in the specified column contains a 1, this function returns 1. If all rows in the specified column contain zeros, this function returns 0. Syntax DATAGRID_MAXBOOL (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID.68Chapter 3 / Data Grid Functions",197
197,"s page 75. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MAXINT Function Returns the maximum value for the specified column. Category: Statistical Returned data type:INTEGER Syntax DATAGRID_MAXINT (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MAXLONG Function Returns the maximum value for the specified column. Category: Statistical Returned data type:LONG Syntax DATAGRID_MAXLONG (dataGrid , column )DATAGRID_MAXLONG Function 69",171
198,"s page 76. Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MAXSTRING Function Returns the maximum value for the specified column. Category: Statistical Returned data type:STRING Note: This function sorts the specified column in ascending order and returns the last value. Syntax DATAGRID_MAXSTRING (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MEAN Function Returns the mean value for the specified column. Category: Statistical Returned data type:DOUBLE70Chapter 3 / Data Grid Functions",200
199,"s page 77. Syntax DATAGRID_MEAN (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MEDIAN Function Returns the median value for the specified column. Category: Statistical Returned data type:DOUBLE Syntax DATAGRID_MEDIAN (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MIN Function Returns the minimum value that appears in the specified column. Category: Statistical Returned data type:DOUBLEDATAGRID_MIN Function 71",197
200,"s page 78. Syntax DATAGRID_MIN (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MINBOOL Function Returns the minimum value that appears in the specified column. Category: Statistical Returned data type:INTEGER Note: If any row in the specified column contains a 0, this function returns 0. If all rows in the specified column contain a 1, this function returns 1. Syntax DATAGRID_MINBOOL (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MININT Function Returns the minimum value that appears in the specified column. Category: Statistical72Chapter 3 / Data Grid Functions",231
201,"s page 79. Returned data type:INTEGER Syntax DATAGRID_MININT (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MINLONG Function Returns the minimum value that appears in the specified column. Category: Statistical Returned data type:LONG Syntax DATAGRID_MINLONG (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MINSTRING Function Returns the minimum value that appears in the specified column.DATAGRID_MINSTRING Function 73",196
202,"s page 8. Serialize and Import Data Grids Into a Table Column Note: Data grids that are used in decisions that are deployed to SAS Micro Analytic Service are automatically serialized when a request that uses the data grids is sent to the service. If your job is deployed only to SAS Micro Analytic Service, you do not need to use the %DCM_SERIALIZEGRID macro to serialize the data grids. Data grids that are used only as temporary variables do not need to be serialized. 1Use the %DCM_SERIALIZEGRID macro to serialize your data grid into a JavaScript Object Notation (JSON) string . The data grid must be serialized if it is used as an input or output variable in a rule set or in a decision that meets either of the following criteria: nThe rule set or decision is used in a test or in a publishing validation test. nThe rule set will be deployed to Hadoop, Teradata, or SAS Cloud Analytic Services (CAS). Note: If you write a serialized data grid variable to a table column, the maximum size of the JSON string is based on the engine that writes the table. For the Base SAS engine, the limit is 32,767 bytes. If you write the serialized data grid variable to a SAS Cloud Analytic Services (CAS) table, the maximum size of the JSON string is 10,485,760 bytes. Note: The names of data grid columns are limited to 32 characters. 2To combine data from multiple tables into one table, use the %DCM_MERGESERIALIZEDGRIDS macro . This macro merges multiple data grids and scalar data into one table based on the values of key columns in each data grid and in the scalar data table. 3Import the table that contains the serialized data grids as a data table into SAS Intelligent Decisioning . See “Importing Local Files” in SAS Data Explorer: User’s Guide for more information.4Chapter 1 / Using Data Grids in SAS Intelligent Decisioning",407
203,"s page 80. Category: Statistical Returned data type:STRING Note: This function sorts the specified column in ascending order and returns the first value. Syntax DATAGRID_MINSTRING (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_MULTISORT Function Sorts a data grid based on the values of one or more columns, and then populates the target data grid with the sorted data. Category: Subset and Sort Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. Syntax DATAGRID_MULTISORT (source_dataGrid , sort_column_1 , sort_order_1 < , sort_column_2 >< ,sort_order_2 >..., target_dataGrid ) Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. sort_column_n specifies the column whose values are used to sort the rows in the target data grid.74Chapter 3 / Data Grid Functions",251
204,"s page 81. sort_order_n specifies whether the target data grid is sorted in ascending or descending order according to the values in the column specified by sort_column_n . Specify A for ascending order or D for descending order. If you specify a variable for the sort order, and the variable value is an empty character string, the function returns a null value. You can specify up to six pairs of sort_column_n and sort_order_n parameters. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. DATAGRID_NMISS Function Returns the number of missing values for the specified column of the specified data grid. Category: Statistical Returned data type:INTEGER Syntax DATAGRID_NMISS (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_NVALID Function Returns the number of valid nonmissing numeric values in the specified column of the specified data grid. Category: Information Returned data type:INTEGERDATAGRID_NVALID Function 75",263
205,"s page 82. Syntax DATAGRID_NVALID (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_RENAMECOLUMN Function Renames the specified column in the specified data grid. Category: Rename Returned data type:INTEGER Note: This function returns a 1 if the column does not exist and a 0 if the column is renamed. Syntax DATAGRID_RENAMECOLUMN (dataGrid , oldName , newName ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. oldName specifies the existing name of the column. newName specifies the new name of the column. DATAGRID_RIGHTJOIN Function Performs a right join of two data grids, returns the resulting data grid, and populates the target data grid with the results of the join. Category: Join or Append76Chapter 3 / Data Grid Functions",230
206,"s page 83. Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. Syntax DATAGRID_RIGHTJOIN (dataGrid1 , dataGrid2 , keyColumn1 , keyColumn2 , target_dataGrid ) Required Arguments dataGrid1 dataGrid2 specifies the names of the two data grids to be joined. keyColumn1 specifies the name of the key column in dataGrid1 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. keyColumn2 specifies the name of the key column in dataGrid2 . You can specify a column name in single quotation marks or a variable that evaluates to a column name. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. Details The DATAGRID_RIGHTJOIN function performs a right join of two data grids for which dataGrid1 .keyColumn1 equals dataGrid2 .keyColumn2 . It populates the target data grid with the results of the join. The target data grid contains all rows from dataGrid2 plus all matching rows from dataGrid1 . When the column names in the two data grids are identical, the columns from the right side of the join are added to the resulting data grid. DATAGRID_SET Function Assigns the specified value to the specified row and column. Category: Set Values Returned data type:INTEGERDATAGRID_SET Function 77",307
207,"s page 84. Syntax DATAGRID_SET (dataGrid , column , rowNumber , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose value is to be set. You can specify a column name in single quotation marks or a variable that evaluates to a column name. rowNumber specifies the number of the row to be set. You can specify a number or a variable that evaluates to a number. variableOrValue specifies the value to be assigned to column . You can specify a number, a character value enclosed in single quotation marks, the name of a variable, or an expression. The value that you specify must be or must evaluate to the same data type as column . DATAGRID_SETALL Function Assigns the specified value to all rows in the specified column. Category: Set Values Returned data type:INTEGER Syntax DATAGRID_SETALL (dataGrid , column , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose values are to be set. variableOrValue specifies the value to be assigned to column . You can specify a number, a character value enclosed in single quotation marks, the name of a variable, or an 78Chapter 3 / Data Grid Functions",288
208,"s page 85. expression. The value that you specify must evaluate to the same data type as column . DATAGRID_SETBOOL Function Assigns the specified Boolean value to the specified row and column. Category: Set Values Returned data type:INTEGER Note: A zero return value indicates success, and a non-zero return code indicates failure. Syntax DATAGRID_SETBOOL (dataGrid , column , rowNumber , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose value is to be set. You can specify a column name in single quotation marks or a variable that evaluates to a column name. The column must be a Boolean column. rowNumber specifies the number of the row to be set. You can specify a number or a variable that evaluates to a number. variableOrValue specifies the numeric boolean value to be assigned to column . You can specify 1 for True or 0 for False. Alternatively, you can specify the name of a boolean variable or a numeric variable that evaluates to 0 or 1.NoteDo not specify the character strings ""True"" or ""False"". DATAGRID_SETDOUBLE Function Assigns the specified decimal value to the specified row and column. Category: Set Values Returned data type:INTEGER Note: A zero return value indicates success, and a non-zero return code indicates failure.DATAGRID_SETDOUBLE Function 79",297
209,"s page 86. Syntax DATAGRID_SETDOUBLE (dataGrid , column , rowNumber , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose value is to be set. You can specify a column name in single quotation marks or a variable that evaluates to a column name. The column must be a numeric column. rowNumber specifies the number of the row to be set. You can specify a number or a variable that evaluates to a number. variableOrValue specifies the value to be assigned to column . You can specify a number, the name of a numeric variable, or an expression. The value that you specify must be or must evaluate to a numeric value. DATAGRID_SETINT Function Assigns the specified integer value to the specified row and column. Category: Set Values Returned data type:INTEGER Note: A zero return value indicates success, and a non-zero return code indicates failure. Syntax DATAGRID_SETINT (dataGrid , column , rowNumber , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose value is to be set. You can specify a column name in single quotation marks or a variable that evaluates to a column name. The column must be an integer column.80Chapter 3 / Data Grid Functions",299
210,"s page 87. rowNumber specifies the number of the row to be set. You can specify a number or a variable that evaluates to a number. variableOrValue specifies the value to be assigned to column . You can specify a numeric literal, the name of a variable, or an expression. The value that you specify must be or must evaluate to a numeric value.NoteIf you specify a decimal value, only the integer part (characteristic) is assigned as the cell value. The fractional part (mantissa) is truncated. DATAGRID_SETLONG Function Assigns the specified long integer value to the specified row and column. Category: Set Values Returned data type:INTEGER Note: A zero return value indicates success, and a non-zero return code indicates failure. Syntax DATAGRID_SETLONG (dataGrid , column , rowNumber , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose value is to be set. You can specify a column name in single quotation marks or a variable that evaluates to a column name. The column must be a numeric column. rowNumber specifies the number of the row to be set. You can specify a number or a variable that evaluates to a number. variableOrValue specifies the value to be assigned to column . You can specify a numeric literal, the name of a variable, or an expression. The value that you specify must be or must evaluate to a numeric value.NoteIf you specify a decimal value, only the integer part (characteristic) is assigned as the cell value. The fractional part (mantissa) is truncated.DATAGRID_SETLONG Function 81",349
211,"s page 88. DATAGRID_SETSTRING Function Assigns the specified character string to the specified row and column. Category: Set Values Returned data type:INTEGER Note: A zero return value indicates success, and a non-zero return code indicates failure. Syntax DATAGRID_SETSTRING (dataGrid , column , rowNumber , variableOrValue ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column whose value is to be set. You can specify a column name in single quotation marks or a variable that evaluates to a column name. The column must be a character column. rowNumber specifies the number of the row to be set. You can specify a number or a variable that evaluates to a number. variableOrValue specifies the value to be assigned to column . You can specify a character string enclosed in single quotation marks, the name of a variable, or an expression. The value that you specify must be or must evaluate to a character string. DATAGRID_SORT Function Sorts a data grid based on the values in a single column, and then populates the target data grid with the sorted data. Category: Subset and Sort Returned data type:INTEGER Note: This function returns zero if the sort is successful.82Chapter 3 / Data Grid Functions",273
212,"s page 89. Syntax DATAGRID_SORT (source_dataGrid , sort_column , sort_order , target_dataGrid ) Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. sort_column specifies the column whose values are used to sort the rows in the target data grid. sort_order specifies whether the target data grid is sorted in ascending or descending order. Specify A for ascending order or D for descending order. If you specify a variable for the sort order, and the variable value is an empty character string, the function returns a null value. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. DATAGRID_STDDEV Function Returns the standard deviation of the values in the specified column. Category: Statistical Returned data type:DOUBLE Syntax DATAGRID_STDDEV (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name.DATAGRID_STDDEV Function 83",261
213,"s page 9. Working with Data Grids Data Grids and Publishing Destinations You can publish rule sets and decisions that use data grids to any destination. However, it is unlikely that rule sets or decisions that use data grids can be executed successfully on Teradata because of limitations on row sizes. You must use the %DCM_SERIALIZEGRID macro to serialize your data grid if it is used in a rule set or in a decision that will be deployed to Apache Hadoop, Teradata, or SAS Cloud Analytic Services (CAS). For more information, see “Serialize and Import Data Grids Into a Table Column” on page 4. Ways to Work with Data Grids You can work with data grids in two ways: nUse data grid functions. For more information, see “Using Data Grid Functions” on page 9. nExecute the model, rule set, or subdecision against each row in a data grid by selecting Score rows in this data grid when you map the object’s input variables in a decision. For more information, see “Scoring Rows in a Data Grid” on page 6. In custom code files, you use data grid functions to process the data in a data grid. For more information, see “Using Data Grids in a Code File” on page 9. In data query files, you can specify whether the query returns a data grid or a single row of scalar variables. You can select what the query returns by specifying the output type on the properties panel of the query file after you add the query file to a decision. See “Add an Existing Object” in SAS Intelligent Decisioning: User’s Guide and “Create and Add a New Object” in SAS Intelligent Decisioning: User’s Guide . Note: You cannot use data grids in branch condition expressions. If you need to use a value calculated from a data grid in a branch condition expression, calculate the value in a rule set, assign the value to a variable, and then use the variable in a subsequent branch condition expression.Working with Data Grids 5",418
214,"s page 90. DATAGRID_SUBSETBYVALUE Function Populates the target data grid with the rows from the source data grid for which the specified comparison evaluates to true. Category: Subset and Sort Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. Syntax DATAGRID_SUBSETBYVALUE (source_dataGrid , filterColumn , operator , variableOrValue , target_dataGrid ) DATAGRID_SUBSETBYVALUE (source_dataGrid , criteria_dataGrid , target_dataGrid ) Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. filterColumn specifies the name of the column whose value is to be compared to variableOrValue . You can specify a column name in single quotation marks or a variable that evaluates to a column name.RestrictionYou can specify either the filterColumn , operator , and varOrValue arguments or the criteria_dataGrid argument. For more information, see, “Details” on page 85. operator specifies one of the following operators shown in “Comparing Values in Data Grids” on page 30. You can specify the name of a character variable that evaluates to one of these operators, or you can specify the operator enclosed in single quotation marks. variableOrValue specifies the value to compare to the value of filterColumn . You can specify a number, a character string enclosed in single quotation marks, or the name of a variable or of an expression. The value that you specify must be or must evaluate to the same data type as filterColumn . criteria_dataGrid specifies the filter criteria for cases for which you want to filter the source data grid on multiple columns. All of the criteria that are specified in the criteria data grid must evaluate to true in order for a row in the source data grid to be added to the target data grid.84Chapter 3 / Data Grid Functions",387
215,"s page 91. RestrictionYou can specify either the criteria_dataGrid argument or the filterColumn , operator , and varOrValue arguments. For more information, see, “Details” on page 85. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. Details The DATAGRID_SUBSETBYVALUE function uses the comparison criteria that you specify to subset the data in the source data grid. You can specify the comparison criteria in one of two ways: nUse the filterColumn , operator , and variableOrValue arguments to filter the source data grid based on the values in a single column. For an example, see “Example 1: Subset Based on a Single Column” on page 85. nUse the criteria_dataGrid argument to filter the source data grid based on the values of more than one column. The criteria data grid must contain only the three columns that specify the filter criteria. The content of these columns is the same content that you would specify for the filterColumn , operator , and variableOrValue columns. See the description of these arguments in “Required Arguments” . The metadata for this data grid could be defined as follows:[{""metadata"":[{""filterCol"":""string""},{""op"":""string""},{""value"":""string""}] For an example, see “Example 2: Subset Based on Multiple Columns” on page 85. This function populates the target data grid with all of the rows for which the comparison evaluates to true. Examples Example 1: Subset Based on a Single Column The following example populates the CUST5 data grid variable with the subset of records from the CUSTOMERS data grid for which the income > 50000 comparison is true:DATAGRID_SUBSETBYVALUE(customers,income,'gt','50000',cust5) Example 2: Subset Based on Multiple Columns The following example populates the CUST5 data grid variable with the subset of records from the CUSTOMERS data grid for which both of the comparisons income > 50000 and loanAmt < equity evaluate to true:DATAGRID_SUBSETBYVALUE(customers, subCriteria, cust5) DATAGRID_SUBSETBYVALUE Function 85",459
216,"s page 92. The SUBCRITERIA data grid is defined as follows:subCriteria = cat('[{""metadata"":[{""filterCol"":""string""},    {""operator"":""string""},{""varOrValue"":""string""}]},',    '{""data"":[[""income"", ""gt"", ""50000""],',    '[""loanAmt"", ""lt"", ""equity""]]}]'); DATAGRID_SUM Function Returns the sum of the values in the specified column. Category: Statistical Returned data type:DOUBLE Syntax DATAGRID_SUM (dataGrid , column ) Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_SUMLONG Function Returns the sum of the values in the specified column. Category: Statistical Returned data type:LONG Syntax DATAGRID_SUMLONG (dataGrid , column )86Chapter 3 / Data Grid Functions",213
217,"s page 93. Required Arguments dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. DATAGRID_TOPN Function Populates the target data grid with the rows from the source data grid that contain the highest number values in the specified column. Category: Subset and Sort Returned data type:INTEGER Note: This function returns the number of rows in the target data grid. The target data grid is sorted in descending order of the specified column. Syntax DATAGRID_TOPN (source_dataGrid , column , number , target_dataGrid ) Required Arguments source_dataGrid specifies the name of the source data grid. This argument must be a variable of type DATAGRID. column specifies the name of the column in the data grid. You can specify a column name in single quotation marks or a variable that evaluates to a column name. number specifies the number of rows to return. target_dataGrid specifies the name of the target data grid. This argument must be a variable of type DATAGRID. Any existing data in the target data grid is overwritten. DATAGRID_TOSTRING Function Returns the JSON string for the specified data grid. Category: SerializeDATAGRID_TOSTRING Function 87",281
218,s page 94. Returned data type:CHARACTER See: “Introduction to Data Grids” on page 1 Syntax DATAGRID_TOSTRING (dataGrid ) Required Argument dataGrid specifies the name of the data grid. This argument must be a variable of type DATAGRID.88Chapter 3 / Data Grid Functions,67
219,"page 1. SAS® Intelligent Decisioning: Decision Management REST API Examples 2020.1 -2021.1.2**This document might apply to additional versions of the software. Open this document in SAS Help Center and click on the version in the banner to see all available versions. SAS® Documentation May 18, 2023",70
220,"page 10. 2 Define Basic Methods and Get an Access Token Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Updating Objects with the put() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 Introduction The code shown in “Example Code” defines the get(), post(), put(), and getAccessToken() functions for use with the examples in this document. The code calls the getAccessToken() function to request an access token and returns the token in the variable accessToken1 . You must specify this access token with all subsequent requests to SAS Viya APIs.Important: This code is required by all of the other examples in this document. Prepend this code to each example before you run it. Updating Objects with the put() Function When you submit PUT requests that update existing resources, you must specify a header name and value that identify the specific state of the resource that you are 5",419
221,"page 11. updating. This name-value pair prevents a request from updating a resource with outdated content. For example, you can submit a GET request to retrieve the content of a decision, modify it, and submit a PUT request to update the decision. The PUT request must include the If-Match header name and the value of the ETag header from the response to the initial GET request. If someone else modifies the decision before you submit your PUT request, then the ETag value is no longer valid and your request fails. The header name that you need to specify in a PUT request is documented in the REST API documentation for the request that you are submitting. Depending on the request, the header name is either If-Match or If-Unmodified-Since . Specify the header name and its value with the conditionalPutKey and conditionalPutValue parameters for the put() function.Table 2.1 Conditional PUT Keys and ValuesconditionalPutKeyconditionalPutValueIf-MatchETag value from the response header for the last GET request for the resource. The examples Chapter 5, “Activate Treatment Groups,” on page 25 and Chapter 8, “Update Subject Contact History,” on page 43 both submit PUT requests that include the If-Match header.If-Unmodified-SinceLast-Modified value from the response header for the last GET request for the resource. The GET request returns this value in Coordinated Universal Time (UTC) format. However, when you specify this value in a PUT request, you must specify the value in the following format:day-name, day month year hour:minutes:seconds GMT For example: Mon, 24 Aug 2020 20:58:15 GMT For more information, see Last-Modified in the MDN (Mozilla Developer Network) Web Docs. Example Code IMPORTANT Replace the client ID, client secret (if applicable), host URL, user ID, and password with the appropriate values for your environment.import sys, jsonimport urllib.parse as u1import urllib.request as urllib2 6Chapter 2 / Define Basic Methods and Get an Access Token",420
222,"page 12. import urllib.error as urllib3import base64import pprintimport requestsimport re as regexpimport datetimefrom time import sleep# The GETACCESSTOKEN function requests an access token using the SAS Logon # OAuth API. The response contains a field named access_token that contains # the value of the token that you use for subsequent API requests.def getAccessToken(baseUrl1): url1 = baseUrl1 + '/SASLogon/oauth/token' # Replace client-ID and client-secret # with values appropriate for your environment.  s = ""client-ID:client-secret"" # Encode the value of the client ID. tokenCredentials = base64.b64encode(s.encode('ascii')).decode('ascii') headers = {""Accept"": ""application/json"",    ""Authorization"": ""Basic "" + tokenCredentials,    ""Content-Type"": ""application/x-www-form-urlencoded"" } values = { ""grant_type"": ""password"",    ""username"": userid,    ""password"": password } # Convert the values dictionary into a string. dV = u1.urlencode(values) dV = dV.encode('ascii') # Request an access token. req = urllib2.Request(url1, data=dV, headers=headers) try:  # Open the response object, and convert it into a JSON object.  responseLogon = urllib2.urlopen(req)  body = responseLogon.read()  responseBodyJson = json.loads(body)  # Extract the access token from the response.  accessToken1 = responseBodyJson['access_token'] except urllib3.URLError as e:  if hasattr(e, 'reason'):   print ('Failed to reach a server.')   print ('Error: ', e.reason)   print (e)  elif hasattr(e, 'code'):   print ('The server could not fulfill the request.')   print ('Error: ', e.reason) except urllib3.HTTPError as e:  print ('Error: ', e.reason) return accessToken1; Example Code 7",400
223,"page 13. # Define the GET function. This function defines request headers, # submits the request, and returns both the response body and# the response header.def get(url1, accessToken1, accept): headers = {""Accept"": accept,    ""Authorization"": ""bearer "" + accessToken1} try:  # Submit the request.  req = urllib2.Request(url1, headers=headers)  # Open the response, and convert it to a string.  domainsResponse = urllib2.urlopen(req)  body = domainsResponse.read()  # Return the response body and the response headers.  respHeaders = domainsResponse.headers  return body, respHeaders except urllib3.URLError as e:  if hasattr(e, 'reason'):   print ('Failed to reach a server.')   print ('Error: ', e.read())  elif hasattr(e, 'code'):   print ('The server could not fulfill the request.')   print ('Error: ', e.read()) except urllib3.HTTPError as e:  print ('Error: ', e.read())# Define the POST function. This function converts the request body into# a JSON object, defines the request headers, posts the request, and # returns the response.def post(url1, contentType, accept, accessToken, body): headers = {""Accept"": accept,    ""Authorization"": ""bearer "" + accessToken,    ""Content-Type"": contentType } # Convert the request body to a JSON object.  reqBody = json.loads(body) # Post the request. req = sess.post(url1, json=reqBody, headers=headers) return req;# Define the PUT function. This function converts the request body into# a JSON object, defines the request headers, and submits the request.# The conditionalPutKey and conditionalPutValue fields are used to # identify a specific state of the resource. See ""Updating Objects with # The put() Function"".def put(url1, contentType, accept, accessToken, \  conditionalPutKey, conditionalPutValue, body): headers = {""Accept"": accept,    ""Authorization"": ""bearer "" + accessToken,    ""Content-Type"": contentType,    conditionalPutKey : conditionalPutValue } 8Chapter 2 / Define Basic Methods and Get an Access Token",451
224,"page 14. if (contentType != ""text/plain""):  reqBody = json.loads(body)  res = sess.put(url1, json=reqBody, headers=headers) else:  res = sess.put(url1, body, headers=headers) return res# Specify the URL, user ID, and password required to access your server.baseUrl1 = 'host-URL'userid = 'user-ID'password = 'password'# Get an access token.accessToken1 = getAccessToken(baseUrl1);# Create a connection session.sess = requests.Session()# Add statements to submit your API requests here. See Also nSAS Viya REST APIs: Authentication to SAS Viya nSAS Viya REST APIs: Authorization nThe Client ID and SecretSee Also 9",152
225,page 15. 10Chapter 2 / Define Basic Methods and Get an Access Token,18
226,page 16. 3 Define and Execute a Decision Test Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,262
227,"page 17. name specifies a name for the test. objectDescriptor specifies the name, object type, and URI for the decision that you are testing. inputData specifies the input data for the test. You can specify an existing input table or define the input data set in the request body. To specify an existing input table, specify the input type CASTable , specify the name of the table, and the library and server where the table resides. To define an input data set in the request body, specify Inline as the input type, and enter the DATA step code to create the input data in the code property. For an example of using inline data, see Example 2: Specifying the type of inputData as Inline in the Score Definitions API examples on GitHub. mappings maps each of the decision’s input-only and input-output variables to a column in the input table or to a static value. variableName specifies the name of a decision variable. mappingType specifies where the decision variable’s value comes from. For variables whose value comes from the input table, specify datasource . For variables to which you want to assign a fixed value, specify static . mappingValue specifies the input table column or the static value to map to the decision variable that is specified by the variableName property. For variables whose mapping type is datasource , specify the column in the input table from which the decision variable gets its value. properties specifies the server and library where you want the test to write the output tables. You can specify a base name for the output tables with the tableBaseName property. If you do not specify a base name, the API uses test-name_decision-name for the base name. Note: These parameters are described in the schema for the Score Definitions API at https://developer.sas.com/apis/rest/DecisionManagement/#schemas-7 . 5Create the score definition by submitting a POST request to /scoreDefinitions/definitions . 6Use the json() method to convert the response to a JSON object, and retrieve the ID of the score definition. 7Create the request body for the score execution. Specify the following parameters: name specifies a name for the score execution request. This name is displayed when you view the log of API calls on your network. scoreDefinitionId specifies the score definition ID that was returned by the score definition request.12Chapter 3 / Define and Execute a Decision Test",478
228,"page 18. hints specifies the library and table name for the input table, and specifies the URI to the decision object. 8Execute the score code by submitting a POST request to /scoreExecution/executions . Example Code<< Include the code in ""Define Basic Methods and Get an Access Token"". >><< That code is required to successfully execute this example.   >># Specify the ID of the decision that you want to test, for example,# ""e289b21b-4be1-4739-9313-639b9629cb42"".decision_ID = ""decision-ID""# Define the URI to the decision object.objectUri = ""/decisions/flows/"" + decision_ID# Define the request body for the score definition.# Modify these values to match the data for your test.scoreDefinitionBody = ''' {  ""name"": ""test_name"",  ""objectDescriptor"":   {   ""name"":""decision_name"",   ""type"": ""decision"",   ""uri"": ""%s""   },  ""inputData"":   {   ""type"": ""CASTable"",   ""tableName"": ""HMEQ_TRAIN"",   ""libraryName"": ""Public"",   ""serverName"": ""cas-shared-default""   },  ""mappings"": [   {   ""variableName"": ""value"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""value""   },   {   ""variableName"": ""debtinc"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""debtinc""   }, Example Code 13",322
229,"page 19. {   ""variableName"": ""derog"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""derog""   },   {   ""variableName"": ""delinq"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""delinq""   }  ],  ""properties"": {   ""outputServerName"": ""cas-shared-default"",   ""outputLibraryName"": ""Public"",   ""tableBaseName"": ""decisionTest_results""  }}''' %(objectUri)# Create the score definition.requestUrl= baseUrl1 + ""/scoreDefinitions/definitions""scoreCreationResponse = post(requestUrl,       ""application/vnd.sas.score.definition+json"",      ""application/vnd.sas.score.definition+json"",       accessToken1, scoreDefinitionBody);print (""creation response ="", scoreCreationResponse, end=' ')print (""creation response content ="", "" "",  json.dumps(json.loads(scoreCreationResponse.content),  indent=4), end=' ')# Retrieve the ID of the score definition from the response.responseObject=scoreCreationResponse.json()scoreDefinitionID = responseObject['id']# Create the request body for executing the score defintion.# The request name is a descriptive name that is displayed # when you view the log of API calls on your network.scoreExecutionBody = ''' {  ""name"": ""request-name"",  ""scoreDefinitionId"": ""%s"",  ""hints"": {   ""inputLibraryName"": ""Public"",   ""inputTableName"": ""HMEQ_TRAIN"",   ""objectURI"": ""%s""  }}''' %(scoreDefinitionID, objectUri)# Execute the score code. (Create a score execution.)requestUrl= baseUrl1 + ""/scoreExecution/executions""scoreExecutionResponse = post(requestUrl,       ""application/vnd.sas.score.execution.request+json"",       ""application/vnd.sas.score.execution+json"",       accessToken1, scoreExecutionBody); 14Chapter 3 / Define and Execute a Decision Test",405
230,"page 2. The correct bibliographic citation for this manual is as follows: SAS Institute Inc. 2020. SAS® Intelligent Decisioning: Decision Management REST API Examples . Cary, NC: SAS Institute Inc. SAS® Intelligent Decisioning: Decision Management REST API Examples Copyright © 2020, SAS Institute Inc., Cary, NC, USA All Rights Reserved. Produced in the United States of America. For a hard copy book: No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, or otherwise, without the prior written permission of the publisher, SAS Institute Inc. For a web download or e-book: Your use of this publication shall be governed by the terms established by the vendor at the time you acquire this publication. The scanning, uploading, and distribution of this book via the Internet or any other means without the permission of the publisher is illegal and punishable by law. Please purchase only authorized electronic editions and do not participate in or encourage electronic piracy of copyrighted materials. Your support of others' rights is appreciated. U.S. Government License Rights; Restricted Rights: The Software and its documentation is commercial computer software developed at private expense and is provided with RESTRICTED RIGHTS to the United States Government. Use, duplication, or disclosure of the Software by the United States Government is subject to the license terms of this Agreement pursuant to, as applicable, FAR 12.212, DFAR 227.7202-1(a), DFAR 227.7202-3(a), and DFAR 227.7202-4, and, to the extent required under U.S. federal law, the minimum restricted rights as set out in FAR 52.227-19 (DEC 2007). If FAR 52.227-19 is applicable, this provision serves as notice under clause (c) thereof and no other notice is required to be affixed to the Software or documentation. The Government’s rights in Software and documentation shall be only those set forth in this Agreement. SAS Institute Inc., SAS Campus Drive, Cary, NC 27513-2414 May 2023 SAS® and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. ® indicates USA registration. Other brand and product names are trademarks of their respective companies. v_001-P1:edmresttut",500
231,"page 20. print(""execute response = "", scoreExecutionResponse, end="" "")# Print the response body in readable format.printable = json.loads(scoreExecutionResponse.content)print(""scoreExecutionResponse body = "", "" "",  json.dumps(printable, indent=4), end="" "") Responses The response bodies that are returned by the POST requests in this example are byte objects. To make the responses readable, they are converted to dictionaries. The POST request to the score definition resource returns the following response:creationResponse = <Response [201]>creation response content = { ""creationTimeStamp"": ""2019-08-06T18:40:12.025Z"", ""modifiedTimeStamp"": ""2019-08-06T18:40:12.025Z"", ""createdBy"": ""user-ID"", ""modifiedBy"": ""user-ID"", ""id"": ""e12d0f5f-8a0a-4fa1-bd1a-811edf8390c7"", ""name"": ""test_1"", ""objectDescriptor"": {  ""name"": ""Evaluate_Loans"",  ""type"": ""decision"",  ""uri"": ""/decisions/flows/e289b21b-4be1-4739-9313-639b9629cb42"" }, ""inputData"": {  ""type"": ""CASTable"",  ""serverName"": ""cas-shared-default"",  ""tableName"": ""HMEQ_TRAIN"",  ""libraryName"": ""Public"" }, ""mappings"": [  {   ""variableName"": ""value"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""value""  },  {   ""variableName"": ""debtinc"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""debtinc""  },  {   ""variableName"": ""derog"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""derog""  },  { Responses 15",413
232,"page 21. ""variableName"": ""delinq"",   ""mappingType"": ""datasource"",   ""mappingValue"": ""delinq""  } ], ""properties"": {  ""tableBaseName"": ""eval_loans_results"",  ""outputServerName"": ""cas-shared-default"",  ""outputLibraryName"": ""Public"" }, ""links"": [    <<lines deleted>> ], ""version"": 1} The POST request to the score execution resource returns the following response:execute response = <Response [201]>scoreExecutionResponse body = { ""creationTimeStamp"": ""2019-08-06T18:40:16.578Z"", ""modifiedTimeStamp"": ""2019-08-06T18:40:16.578Z"", ""createdBy"": ""user-ID"", ""modifiedBy"": ""user-ID"", ""id"": ""f4ce301b-8338-4462-b56a-21c7920a17b7"", ""scoreExecutionRequest"": {  ""type"": ""scoreDefinition"",  ""name"": ""Evaluate_Loans_test"",  ""hints"": {   ""inputLibraryName"": ""Public"",   ""inputTableName"": ""HMEQ_TRAIN"",   ""objectURI"": ""/decisions/flows/e289b21b-4be1-4739-9313-639b9629cb42""  },  ""scoreDefinitionId"": ""0f3843c3-1e84-4bc6-8e4e-551909a9bb84"",  ""version"": 1 }, ""state"": ""running"", ""outputTable"": {  ""tableName"": ""eval_loans_results_2019-08-06_18-40-14_output"",  ""libraryName"": ""Public"",  ""serverName"": ""cas-shared-default"" }, ""codeFileUri"": ""/files/files/7aef9a58-eeab-4352-8ed2-22c7c669719e"", ""results"": {  ""jobId"": ""e0fee109-6c3b-4b29-9b08-4acd01203c37"" }, ""links"": [    <<lines deleted>> ], ""version"": 1} 16Chapter 3 / Define and Execute a Decision Test",477
233,page 22. See Also nCreate a new score definition nCreating a Score Definition nCreate a new score execution nCreating a Score ExecutionSee Also 17,32
234,page 23. 18Chapter 3 / Define and Execute a Decision Test,16
235,page 24. 4 Lock Treatments Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,261
236,". . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 Retrieving the Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 Locking and Creating Versions of Individual Treatments . . . . . . . . . . . . . . . . . . . . . . . . . 23 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 Introduction This example retrieves the treatment groups that match the specified criteria and creates new, numbered and locked versions of the individual treatments in the treatment groups. How To 1Get an access token by submitting a GET request to the /SASLogon/oauth/token resource. The example described in Chapter 2, “Define Basic Methods and Get an Access Token” includes the code required to get an access token. Prepend that code to the code for this example. 2Get the collection of treatment groups for which you want to lock the individual treatments.",313
237,"page 25. TIP Usage Notes for the Treatment Definitions API lists the members of the collection that you use to filter and sort the collection. For additional information, see SAS REST APIs: Filtering . 3Use the json.loads method to convert the collection to a JSON object. This conversion enables you to access the key-value pairs in the JSON object by using the key name. 4Define the content type for submitting GET requests to retrieve treatment group definitions. 5For each treatment group in the collection that was returned in Step 2 , complete these steps: aRetrieve the treatment group ID from the collection that was returned in Step 2. bGet the treatment group definition by submitting a GET request to /treatmentDefinitions/definitionGroups/group-ID . The response body is a byte object that contains the definition of the treatment group. cUse the json.loads() method to convert the treatment group definition to a string. dSet the Accept type for retrieving individual treatments. eFor each treatment in the treatment group, complete these steps: 1Retrieve the treatment definition ID from the members property of the treatment group definition that was returned in Step 5b . 2Get the treatment definition by submitting a GET request to /treatmentDefinitions/definitions/definition-ID . 3Create a new revision of the treatment definition by submitting a POST request to /treatmentDefinitions/definitions/definition-ID/revisions . Specify the response body that was returned in Step 5e.ii as the request body for this POST request. By default, this POST request creates a new minor version. To specify a new major version, include the ?revisionType=major query parameter. Example Code<< Include the code in ""Define Basic Methods and GEt an Access Token. >><< That code is required to successfully execute this example.   >># Get the treatment groups based on filter criteria.# Modify the filter criteria as needed for your application.requestUrl= baseUrl1 + \ 20Chapter 4 / Lock Treatments",403
238,"page 26. ""/treatmentDefinitions/definitionGroups?filter=eq(name,'hmeq_Treat_Group')""responseObj,responseHeaders = get(requestUrl, accessToken1,        ""application/vnd.sas.collection+json"");responseObj = json.loads(responseObj)# Define the treatment defintions URL and the accept type for requests.groupDefUrl = ""/treatmentDefinitions/definitionGroups/""contentType = ""application/vnd.sas.treatment.definition+json""# For each treatment group ID in the list...for item in responseObj['items']: groupID = item['id']  # Get the treatment group definition. acceptType = ""application/vnd.sas.treatment.definition.group+json"" requestUrl=baseUrl1 + groupDefUrl + groupID responseBody,responseHeaders = get(requestUrl, accessToken1, acceptType)  # Convert the response to string. responseBodyJson = json.loads(responseBody) # Print the response body in readable format. print (""treatment group = "", "" "", json.dumps(responseBodyJson,   indent=4), end=' ')  # Set the accept type for getting the individual  # treatment definitions. acceptType = ""application/json""  # For each treatment in the treatment group... for member in responseBodyJson['members']:  definitionId = member['definitionId']    # Get the treatment definition.  requestUrl = baseUrl1 + ""/treatmentDefinitions/definitions/"" + \      definitionId  requestBody, respHeaders = get(requestUrl, accessToken1, acceptType)    # Create a new version of the treatment definition.  requestUrl = baseUrl1 + ""/treatmentDefinitions/definitions/"" \   + definitionId + ""/revisions?revisionType=major""  revisionResponse = post(requestUrl, contentType, acceptType, \   accessToken1, requestBody)    print(""definition name = "", member['definitionName'], end=' ')  print(""definition ID = "", definitionId, end=' ')  print (""revisionResponse = "", revisionResponse, end=' ') Example Code 21",409
239,page 27.,4
240,"page 28. ""status"": ""valid""} Locking and Creating Versions of Individual Treatments The POST request that creates a new version of the individual treatments returns response code 201 for each request that is successful.definition name = hmeq_treatmentdefinition ID = 4dddd0c1-4ee9-48ef-983f-e61a837d6961revisionResponse = <Response [201]>definition name = hmeq_treatment_2definition ID = ef5d6043-2212-4173-bb0f-949824386e12revisionResponse = <Response [201]>definition name = hmeq_treatment_3definition ID = 3827bdd0-5120-4087-83f2-d54b715d08e0revisionResponse = <Response [201]>definition name = hmeq_treatment_4definition ID = 7dc18c98-1959-4132-9a52-4a4d920660fcrevisionResponse = <Response [201]> See Also nCreate a new revision of a treatment definition nLock the current revision and create a new revision of a Treatment DefinitionSee Also 23",245
241,page 29. 24Chapter 4 / Lock Treatments,13
242,page 3. Contents Chapter 1 /About the Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Client ID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Authorization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,261
243,. . . . . . . 2 Code Files for These Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Additional Documentation and Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Chapter 2 /Define Basic Methods and Get an Access Token . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Updating Objects with the put() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Example Code . . . . . . . . .,272
244,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 Chapter 3 /Define and Execute a Decision Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 How To . . . . . . . . . . . . . . . . . . . .,262
245,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 Chapter 4 /Lock Treatments . . . . . . . . . . . . .,260
246,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Responses . . . . . . . . . . . .,257
247,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 Chapter 5 /Activate Treatment Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 How To . . . . . . . . . . . . . . . .,260
248,page 30. 5 Activate Treatment Groups Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,261
249,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Getting the Treatment Group Collection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Getting a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Getting the Treatment Group Revision List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 Activating the Treatment Group Revision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,267
250,"page 31. TIP The Usage Notes for the Treatment Definitions API list the members of the collection that you use to filter and sort the collection. For additional information, see SAS REST APIs: Filtering . 3Use the json.loads method to convert the collection to a JSON object. This enables you to access the key-value pairs in the JSON by using the key name. 4Define the URL for the treatment group definitions resource and the accept type for submitting GET requests to this resource. 5For each treatment group in the collection that was returned in Step 2 , complete these steps: aRetrieve the treatment group ID from the collection returned in Step 2 on page 25. bGet the treatment group definition by submitting a GET request to /treatmentDefinitions/definitionGroups/group-ID . The response body is a byte object that contains the definition of the treatment group. cUse the decode() method to convert the treatment group definition to a string. Specify this string as the requestBody parameter to the POST request in Step 5d . dLock the current version of the treatment group, and create a new current version by submitting a POST request to /treatmentDefinitions/definitionGroups/group-ID/revisions . TIP Creating a new version of the treatment group generates a new ETag value for the group. eGet the treatment group definition again, and extract the new ETag value for the group from the response header. For information about ETag values, see “Updating Objects with the put() Function” on page 5. fGet the list of revisions for the treatment group by submitting a GET request to /treatmentDefinitions/definitionGroups/group-ID/revisions . Specify the following parameters:start=0&limit=100 requests the first 100 revisions. By default, the request returns only 10 revisions. If your treatment group has more than 10 revisions, specify a higher limit.sortBy=sortBy=majorRevision:descending,minorRevision:descending sorts the list of revisions in descending order by revision numbers. This sort order ensures that the query returns the most recently locked version as the second item in the list. gUse the json.loads method to convert the response body to a JSON object. hRetrieve the ID of the second revision in the list that was returned in Step 5f . iActivate the revision of the treatment group by submitting a PUT request to /treatmentDefinitions/definitionGroups/group-ID/revisions/ 26Chapter 5 / Activate Treatment Groups",498
251,"page 32. revision-ID/active . Specify If-Match as the conditional key and the group ETag value from Step 5e as the value of the key. Example Code<< Include the code in ""Define Basic Methods and Get an Access Token"". >><< That code is required to successfully execute this example.   >># Get the treatment groups based on filter criteria.# Modify the filter criteria as needed for your application.requestUrl= baseUrl1 + \ ""/treatmentDefinitions/definitionGroups?filter=eq(name,'Treat_Group_1')""responseObj,responseHeaders = get(requestUrl, accessToken1, \        ""application/vnd.sas.collection+json"");responseObj = json.loads(responseObj)# Print the response body in readable format.print (""responseObj = "", "" "", json.dumps(responseObj,  indent=4), end=' ') # Define the treatment defintions URL and the accept type for requests.acceptType = ""application/vnd.sas.treatment.definition.group+json""groupDefUrl = ""/treatmentDefinitions/definitionGroups/""# For each treatment group ID in the list...for item in responseObj['items']: groupID = item['id']  # Get the treatment group definition. requestUrl=baseUrl1 + groupDefUrl + groupID responseBody,responseHeaders = get(requestUrl, accessToken1, acceptType) responseBodyGrpJson = json.loads(responseBody) print (""group responseBody = "", "" "", json.dumps(responseBodyGrpJson,   indent=4), end=' ') print (""group responseHeaders = "", "" "", responseHeaders, end=' ') # Convert the treatment group definition to a string. # This string is passed as the request body when you create a # new revision of the treatment group. requestBody = responseBody.decode()  # Lock the current version and create a new current version. requestUrl = baseUrl1 + groupDefUrl + groupID + ""/revisions"" Example Code 27",389
252,"page 33. responseObj = post(requestUrl,      ""application/vnd.sas.treatment.definition.group+json"",     acceptType, accessToken1, requestBody) print (""new version response = "", responseObj)  # Get the treatment group definition again and extract  # the new ETag value for the group. requestUrl=baseUrl1 + groupDefUrl + groupID responseBody,responseHeaders = get(requestUrl, accessToken1, acceptType) responseBodyGrpJson = json.loads(responseBody) groupEtag=responseHeaders['ETag'] # Get the list of revisions for the treatment group with ID=groupID,  # sorted in descending order based on the major and minor revision  # numbers. If your treatment group has more than 100 revisions,  # modify the limit in the following URL. requestUrl=baseUrl1 + groupDefUrl + groupID + ""/revisions"" + \  ""?start=0&limit=100&sortBy=majorRevision:descending,minorRevision:descending"" responseBody,responseHeaders = get(requestUrl, accessToken1,          ""application/json"") responseBodyJson = json.loads(responseBody) print(""number of revisions = "", responseBodyJson['count'], end=' ') printable = json.dumps(responseBodyJson, indent=4) print(""revision list responseBody = "", ' ',   printable, end=' ')  # Get the revision ID. revisionID = responseBodyJson['items'][1]['id'] print (""Activating treatment group "",   responseBodyJson['items'][1]['name'], "" "",   ""Revision "", revisionID, end=' ')  # Activate the locked version of the treatment group. requestUrl=baseUrl1 + groupDefUrl + groupID + ""/active"" response = put(requestUrl,""text/plain"", acceptType,     accessToken1, ""If-Match"", groupEtag, revisionID) print (""Activation response = "", response) 28Chapter 5 / Activate Treatment Groups",390
253,"page 34. Responses Getting the Treatment Group Collection The treatment group collection returned by the initial GET request contains, in this case, only one treatment definition group. The group name is “Treat_Group_1”, and the group ID is 8daf2af7-ecde-4c83-ba0f-eab69bcf4860 .responseObj = { ""links"": [    <<lines deleted>> ], ""name"": ""treatmentDefinitionGroups"", ""accept"": ""application/vnd.sas.summary"", ""start"": 0, ""count"": 1, ""items"": [  {   ""creationTimeStamp"": ""2019-07-16T03:24:27.181Z"",   ""modifiedTimeStamp"": ""2019-08-09T17:35:43.584Z"",   ""createdBy"": ""user-ID"",   ""modifiedBy"": ""user-ID"",   ""id"": ""8daf2af7-ecde-4c83-ba0f-eab69bcf4860"",   ""type"": ""treatmentGroup"",   ""name"": ""Treat_Group_1"",   ""links"": [      <<lines deleted>>   ],   ""version"": 1  } ], ""limit"": 10, ""version"": 2} Getting a Treatment Group You can extract the IDs of the individual treatment groups from the collection and use the ID to retrieve the treatment group definition. The GET request for the treatment group with the ID 8daf2af7-ecde-4c83-ba0f-eab69bcf4860 returned the following response:group responseBody = { Responses 29",342
254,page 35.,4
255,"page 36. X-XSS-Protection: 1; mode=blockVary: User-AgentConnection: closeTransfer-Encoding: chunked Getting the Treatment Group Revision List The GET request for the list of revisions for the treatment group returned a list of 17 revisions. Each revision has a unique ID. The response for the first two revisions is shown below.number of revisions = 17revision list responseBody = { ""links"": [  <<lines deleted>> ], ""name"": ""treatmentDefinitionGroupRevisions"", ""accept"": ""application/vnd.sas.treatment.definition.group"", ""start"": 0, ""count"": 61, ""items"": [  {   ""creationTimeStamp"": ""2019-08-09T17:32:36.952Z"",   ""modifiedTimeStamp"": ""2019-08-09T17:32:36.952Z"",   ""createdBy"": ""user-ID"",   ""modifiedBy"": ""user-ID"",   ""id"": ""a1c20d7f-4557-4b66-a69b-fc46857d876d"",   ""type"": ""treatmentGroup"",   ""name"": ""Treat_Group_1"",   ""links"": [    lines deleted   ],   ""version"": 1  },  {   ""creationTimeStamp"": ""2019-08-09T17:31:29.883Z"",   ""modifiedTimeStamp"": ""2019-08-09T17:31:29.883Z"",   ""createdBy"": ""edmdev"",   ""modifiedBy"": ""edmdev"",   ""id"": ""b4c19e0d-3342-4994-80a1-72f6017c42e8"",   ""type"": ""treatmentGroup"",   ""name"": ""Treat_Group_1"",   ""links"": [    <<lines deleted>>   ],   ""version"": 1  } ], ""limit"": 100, ""version"": 2 } Responses 31",417
256,"page 37. <<lines for additional revisions deleted>>  Activating the Treatment Group Revision If the treatment group is activated, the request returns the HTTP response code 200.Activating treatment group Treat_Group_1 Revision b4c19e0d-3342-4994-80a1-72f6017c42e8Activation response = <Response [200]> See Also nGet a collection of the treatment definition groups nGet a treatmentDefinitionGroup nCreate a new revision of a treatmentDefinitionGroup nLock the current revision and create a new revision of a Treatment Definition Group nGet a collection of the revisions of the specified treatmentDefinitionGroup nGet a revision of the specified treatmentDefinitionGroup nActivate a revision of a treatmentDefinitionGroup nActivate a Treatment Definition Group revision nSAS REST APIs: Sorting nSAS REST APIs: Filtering nUsage Notes for the Treatment Definitions API (see the topic on “Sorting and Filtering”)32Chapter 5 / Activate Treatment Groups",198
257,page 38. 6 Publish a Decision to the maslocal Destination Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,263
258,"page 39. 2Specify the object ID of the decision that you want to publish. You can retrieve decision information by submitting GET requests to the /flows resource. You can use query parameters to narrow the results that are returned by the request. For more information, see Get a list of all decisions . This ID is also shown on the Properties tab when you open the decision in SAS Intelligent Decisioning. 3Specify a name for the publishing request. This name is a descriptive name that is displayed when you view the log of API calls on your network. 4Specify the name of the decision that you want to publish. 5Get the contents of the decision by submitting a GET request to the /decisions/flows/object-ID resource. 6Lock the current version of the decision (which becomes the new numbered version), and create a new, unlocked current version by submitting a POST request to the /decisions/flows/decision-ID/revisions resource. You can specify the versionType parameter to control whether a major version or a minor version is created. After this request executes, the object ID now points to the locked and numbered version of the decision. 7Get the generated DS2 code for the locked version of the decision by submitting a GET request to the /decisions/flows/decision-ID/code resource. Because SAS Micro Analytic Service destinations do not generated rule-fired information or path-tracking information, include the following query parameters:?lookupMode=inline&traversedPathFlag=false\&isGeneratingRuleFiredColumn=false&codeTarget=microAnalyticService The generated code is returned as a byte object. 8Convert the byte object to a string, and escape newline characters and double quotation marks. Specify the resulting character string as the code property for the model in the publish request in Step 10 . 9Define the URL to the source code of the locked version of the decision. 10Define the request body for the publish request. Specify the following parameters: type specifies the destination type. For SAS Micro Analytic Service destinations, this value is microAnalyticService . destinationName specifies the name of the destination. The name of the default SAS Micro Analytic Service destination is maslocal . name specifies a name for the publishing request. This name is displayed when you view the log of API calls on your network. modelContents provides information about the decisions that you are publishing.",486
259,page 4. See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 Chapter 6 /Publish a Decision to the maslocal Destination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 Example Code . . . . . . . . . . . . .,266
260,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 Chapter 7 /Execute a Published Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 Introduction . . . . . . . . . . . . . . . . . . . . . .,260
261,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 See Also . . . . . . . . . . . . . . . . . . . .,258
262,"page 40. codeType specifies whether the source code is DS2 code (ds2 ) or DATA step code (datastep ). modelName specifies the name of the decision that you are publishing. TIP The published name of the decision is defined in the generated code for the decision. publishLevel specifies the object type that you are publishing. sourceUri specifies the URI to the generated code for the decision. 11Publish the decision by submitting a POST request to the /modelPublish/models resource. Example Code<< Include the code in ""Define Basic Methods and Get an Access Token"". >><< That code is required to successfully execute this example.   >># Specify the ID of the decision that you want to publish, for example,# ""e289b21b-4be1-4739-9313-639b9629cb42"".objectID = ""object-ID""# Specify a name for the publishing request, for example, # ""publish_SID_decision"".# The request name is a descriptive name that is displayed # when you view the log of API calls on your network.requestName = ""request-name""# Specify the name of your decision, for example,# ""Evaluate_Loans"".modelName = ""decision-name""# Get the contents of the decision.requestUrl= baseUrl1 + ""/decisions/flows/"" + objectIDdecisionContent,rspheads = get(requestUrl, accessToken1, ""application/json"")contentStr = json.loads(decisionContent)versionToLock=str(contentStr['majorRevision']) + ""."" + \    str(contentStr['minorRevision'])print(""Locking version "", versionToLock, end=' ') Example Code 35",333
263,"page 41. # Lock the current version of the decision and create a new, # numbered, major version.requestUrl= baseUrl1 + ""/decisions/flows/"" + objectID + \   ""/revisions?revisionType=major""lockResponse= post (requestUrl, ""application/vnd.sas.decision+json"",      ""application/vnd.sas.decision+json"",      accessToken1, decisionContent)print (""lock response = "", lockResponse, end=' ')# The object ID now points to the locked version of the decision.respContent = json.loads(lockResponse.content)newVersion=str(respContent['majorRevision']) + ""."" + \   str(respContent['minorRevision'])print(""Created new version"", newVersion, "" ID ="",  respContent['id'], end=' ')# Get the generated DS2 code for the locked version of the decision.requestUrl= baseUrl1 + ""/decisions/flows/"" + objectID + \""/code?lookupMode=inline&traversedPathFlag=false\&isGeneratingRuleFiredColumn=false&codeTarget=microAnalyticService""decisionCodeContent,rspheads = get(requestUrl, accessToken1, ""text/vnd.sas.source.ds2"")# Convert the byte object to a string.decisionCodeString= decisionCodeContent.decode()# Escape control characters and double quotation marks.decisionCodeSource = decisionCodeString.replace(""\\"",""\\\\"").replace("" "", ""\ "")\.replace('""', '\\""')# Define the URI to the source code for the decision.sourceUri = ""/decisions/flows/"" + objectID + ""/code""# Create the request body.publishRequestBody = '''{ ""type"": ""microAnalyticService"", ""destinationName"": ""maslocal"", ""name"": ""%s"", ""modelContents"": [  {  ""code"": ""%s"",  ""codeType"": ""ds2"",  ""modelName"": ""%s"",  ""publishLevel"": ""decision"",  ""analyticStoreUri"": [],  ""analyticStores"": [],  ""sourceUri"": ""%s""  } ]}''' % (requestName, decisionCodeSource, modelName, sourceUri)# Publish the decision. 36Chapter 6 / Publish a Decision to the maslocal Destination",455
264,"page 42. print(""Publishing verison"", versionToLock, end=' ')requestUrl= baseUrl1 + ""/modelPublish/models""publishResponse= post(requestUrl,      ""application/vnd.sas.models.publishing.request+json"",      ""application/vnd.sas.models.publishing.publish+json"",      accessToken1, publishRequestBody);print (""publish response = "", publishResponse) Responses This example produces the following output:Locking version 39.0lock response = <Response[201]>Created new version 40.0 ID = 62b91159-bd73-4984-ad55-89bd323d0f92Publishing version 39.0publish response = <Response[201]> See Also nGet decision content nGet a decision revision nGet decision code nDecisions API nPublish models nPublish a Model to a DestinationSee Also 37",179
265,page 43. 38Chapter 6 / Publish a Decision to the maslocal Destination,18
266,page 44. 7 Execute a Published Decision Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,261
267,"page 45. not defined or are set to False , add an underscore to the name of each input variable. If these options are set to True , do not add underscores. Your administrator can add this property to the supplementalProperties section in the sas.microanalyticservice.system configuration definition in SAS Environment Manager. The default value for these options is False . For additional information, see “sas.microanalyticservice.system: supplementalProperties” in SAS Micro Analytic Service: Programming and Administration Guide and “sas.decisions.masnode.removeTrailingUnderscoresFromInput” in SAS Intelligent Decisioning: Administrator’s Guide . TIP To specify a missing value for a variable, specify the variable name without specifying the value. For example: {""name"": ""debtinc_""} 3Define the content type and the accept type for the publishing request. 4Specify the module ID of the published decision. You specify this ID as the model name when you publish the decision by using the API, or in the Published Name column in the Publish Decisions window in SAS Intelligent Decisioning. This name is also displayed on the History tab for a decision in SAS Intelligent Decisioning. 5Execute the decision by submitting a POST request to /microanalyticScore/modules/module_ID/steps/execute . Each module that is published to SAS Micro Analytic Service contains a step named execute . When you post the request, this execute step is executed. Example Code<< Include the code in ""Define Basic Methods and Get an Access Token"". >><< That code is required to successfully execute this example.   >># Create the request body. The request body specifies the # input values required by the decision.# Modify these key-value pairs for your decision.# Include underscores if needed.requestBody = '''{""inputs"" : [ {""name"": ""debtinc_"", ""value"" : 37.1136}, {""name"": ""delinq_"", ""value"" : 0}, {""name"": ""derog_"", ""value"" : 4}, {""name"": ""value_"", ""value"" : 60850} ]} 40Chapter 7 / Execute a Published Decision",435
268,"page 46. '''# Define the content and accept types for the request header.contentType = ""application/json""acceptType = ""application/json""# Specify the module ID of the published decision, for example,# ""evaluate_loans24_0"".moduleID = ""module-ID""# Define the request URL.masModuleUrl = ""/microanalyticScore/modules/"" + moduleIDrequestUrl = baseUrl1 + masModuleUrl + ""/steps/execute""# Execute the decision.masExecutionResponse = post(requestUrl, contentType,      acceptType, accessToken1, requestBody) # Display the response.print (""response="", masExecutionResponse, end=' ')print (""response content="", "" "",  json.dumps(json.loads(masExecutionResponse.content),  indent=4), end=' ') Responses The response content includes the output values from the decision. In this example, all of the variables in the decision are both input and output variables except for the review variable. The review variable is an output-only variable.response = <Response [201]>response content= { ""links"": [], ""version"": 2, ""moduleId"": ""evaluate_loans24_0"", ""stepId"": ""execute"", ""executionState"": ""completed"", ""outputs"": [  {   ""name"": ""debtinc"",   ""value"": 37.1136  },  {   ""name"": ""delinq"",   ""value"": 0.0  },  {   ""name"": ""derog"",   ""value"": 4.0  }, Responses 41",310
269,"page 47. {   ""name"": ""review""  },  {   ""name"": ""value"",   ""value"": 60850.0  } ]} See Also Execute a step42Chapter 7 / Execute a Published Decision",50
270,page 48. 8 Update Subject Contact History Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,261
271,"page 49. How To 1Get an access token by submitting a GET request to the /SASLogon/oauth/token resource. The example described in Chapter 2, “Define Basic Methods and Get an Access Token” includes the code required to get an access token. Prepend that code to the code for this example. 2Specify the tracking code of the subject contact record and treatment ID of the treatment that you want to update. These values are returned by the decision that determines the treatments for which the subject is eligible. 3Define the record-level updates that you want to make to the subject contact record. You can update the following properties of the record: conclusionResponseValue the subject’s response to the results of the decision. You can use this property to record a response when a decision does not include treatments. When the decision includes treatments, this value might represent an overall response to all of the treatments in the subject contact record. conclusionResponseType a summary value, category name, or other description for the response that is specified in the conclusionResponseValue property. For example, you could assign the type of Evaluating , No response , or Closed-Lost to the response. This value can be used as a target value in modeling. 4Define the treatment-level updates that you want to make to the individual treatment. You can update the following properties of individual treatments: presented specifies whether the treatment has been presented to the subject. Specify True or False . presentedTimeStamp timestamp that indicates when the treatment was presented to the subject. Enter the timestamp in the following format:yyyy-mm-ddThh:mm:ss.sssZ Include the Coordinated Universal Time designator Z (for example, 2019-11-14T18:47:40.719Z ). For more information about timestamps, see Date and Time Formats . responseValue the subject’s response to the treatment. For example, this value could be a value or code such as Purchased , Rejected , Requested quote , Email opened , rt1 , or em . responseChannel the channel through which the user responded to the treatment. The response channel might be different from the contact channel. The possible values for the channel are defined in the Treatment Channels lookup table. For more information, see “Predefined Lookup Tables” in SAS Intelligent Decisioning: User’s Guide .44Chapter 8 / Update Subject Contact History",480
272,page 5. Chapter 8 /Update Subject Contact History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 How To . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 Example Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 Responses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 See Also . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50ivContents,389
273,"page 50. responseType a summary value, category name, or other description for the response that is specified in the value of the responseValue property. For example, you could assign the category of Positive , Negative , or Neutral to the subject’s response. This value can be used as a target value in modeling. respondedTimeStamp a timestamp that indicates when the subject responded to the treatment. Enter the timestamp in the following format:yyyy-mm-ddThh:mm:ss.sssZ Include the Coordinated Universal Time designator Z (for example, 2019-11-14T18:47:40.719Z ). For more information about timestamps, see Date and Time Formats . 5Use the tracking code to define the URL for retrieving the subject contact record, and define the accept type for the request. 6Get the subject contact record by submitting a GET request to /subjectContacts/contacts?filter=eq(responseTrackingCode,'trackingCode') . 7Convert the response body to a JSON object, and extract the object ID of the subject contact record. 8Use the object ID to define the URL for retrieving the subject contact record, and define the accept type for the request. 9Get the subject contact record by submitting a GET request to /subjectContacts/contacts/object-ID . 10Retrieve the ETag value from the response header. For information about ETag values, see “Updating Objects with the put() Function” on page 5. 11Convert the response body to a JSON object, and use the respBodyObjJSON object’s update method to add the record-level updates. 12Create an updated treatment list. For each treatment listed in the subject contact record that was returned in Step 9 , complete these steps: aTest whether the treatment ID matches the ID of the treatment to update, and if so, append the treatment-level updates to the treatment. bAppend the treatment to the updated treatment list. 13Create a new Python dictionary with the key treatmentsForConsideration and the value of the updated treatments list. 14Use the respBodyObjJSON object’s update method to replace the treatmentsForConsideration property in the subject contact record with the updated treatments list. The respBodyObjJSON object now contains a complete, updated subject contact history record. 15Convert the respBodyObjJSON object to a string so that you can specify it as the request body for the PUT request in Step 17 .",494
274,"page 51. 17Update the subject contact record by submitting a PUT request to /subjectContacts/contacts/object-id . Specify If-Match as the conditional key and the ETag value from Step 10 as the value of the key. Example Code<< Include the code in ""Define Basic Methods and Get an Access Token"". >><< That code is required to successfully execute this example.   >># Specify the tracking code for the subject contact record, # and the object ID of the treatment that you want to update.# Both values are GUIDs such as # ""b48ac290-f1a5-7343-8d85-e6f9fc85ff23"".trackingCode = ""tracking-code""treatmentToUpdate = ""treatment_ID""# Specify record-level updates. Modify these values # values for your application.recordUpdates = {""conclusionResponseValue"" : ""accepted"",     ""conclusionResponseType"" : ""crt_x""}# Specify the updates that you want to make to the # the treatment in the subject contact record. # Modify these values for your application.treatmentUpdates = {""presented"" : ""True"",      ""presentedTimeStamp"" : ""2019-11-14T18:47:40.719Z"",     ""responseValue"" : ""accepted"", ""responseChannel"" : ""Web"",     ""respondedTimeStamp"" : ""2019-11-15T21:09:32.059Z""}  # Get the subject contact record for the tracking code.requestUrl = baseUrl1 + \ ""/subjectContacts/contacts?filter=eq(responseTrackingCode,'"" + \ trackingCode + ""')""acceptType = ""application/vnd.sas.collection+json""respBodyTC,respHeaders = get(requestUrl, accessToken1, acceptType)print (""response body = "", "" "", json.dumps(json.loads(respBodyTC),  indent=4), end=' ')# Convert the response to a JSON object, and # extract the object ID.respStrTC = json.loads(respBodyTC)objID = respStrTC['items'][0]['id']# Get the subject contact record using the object ID.# The header returned by this request includes the # ETag value that you need to update the record.acceptType = ""application/vnd.sas.decision.subject.contact+json"" 46Chapter 8 / Update Subject Contact History",480
275,"page 52. requestUrl = baseUrl1 + ""/subjectContacts/contacts/"" + objIDrespBodyOBJ,respHeaders = get(requestUrl, accessToken1, acceptType)# Convert the response to a JSON object, and # extract the ETag value. respBodyObjJSON = json.loads(respBodyOBJ)ETag = respHeaders['ETag']# The variable respBodyObjJSON will contain all of the updates # that need to be added to the subject contact record.# Add the conclusionRepsonseValue and conclusionResponseType # to the updates.respBodyObjJSON.update(recordUpdates)# For each treatment in the record, add the treatment data to # the object respBodyObjJSON. For the treatment that is being # updated, append the updates. treatmentList=[]for item in respBodyObjJSON['treatmentsForConsideration']: if item['id'] == treatmentToUpdate:  item.update(treatmentUpdates) treatmentList.append(item)contactUpdate = {""treatmentsForConsideration"" : treatmentList}respBodyObjJSON.update(contactUpdate)# Convert the updated object to a string.requestBody = json.dumps(respBodyObjJSON)#Update the subject contact history record.contentType = ""application/vnd.sas.decision.subject.contact+json""putResponse = put(requestUrl, contentType, acceptType, \     accessToken1, ""If-Match"", ETag, requestBody)print(putResponse, end=' ')print (""putResponse = "","" "", json.dumps(json.loads(putResponse.content),  indent=4), end=' ') Responses The initial response is the original, unmodified content of the subject contact history record.response body = { ""links"": [  <<lines deleted>>  ], ""name"": ""contacts"", ""accept"": ""application/vnd.sas.decision.subject.contact"", ""start"": 0, ""count"": 1, ""items"": [ Responses 47",380
276,page 53.,4
277,page 54.,4
278,"page 55. ""responseTrackingCode"": ""b48ac290-f1a5-7343-8d85-e6f9fc85ff23"", ""channel"": ""NONE"", ""conclusionResponseValue"": ""accepted"", ""conclusionResponseType"": ""crt_x"", ""excludeFromContactRule"": false, ""version"": 1, ""links"": [  <<lines deleted>> ]} See Also Update a contact record Update a Contact Record to Record Presentation50Chapter 8 / Update Subject Contact History",106
279,"page 6. 1 About the Examples Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Client ID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Authorization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Code Files for These Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Additional Documentation and Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Introduction SAS Viya REST APIs are based on resource-oriented URLs, use HTTP authentication and HTTP verbs, and return HTTP response codes. With SAS Viya REST APIs, you can create and access SAS resources by using any client technology. These APIs make it easy to integrate the capabilities of SAS Viya into your business processes or to extend and customize SAS Viya to meet specific requirements. The Decision Management REST APIs provide access to machine scoring, business rules, models, decisions, treatments, and more. The examples in this document show how to use these APIs to perform some of the more common decision management tasks that you might want to do through the APIs. Note: The examples in this document were written in Python 3.7 and run in Jupyter Notebook, which was launched from Anaconda Navigator.1",493
280,"page 7. Client ID Before you use these APIs, your administrator must register a client identifier. You must specify this ID to obtain an access token to use with REST API requests. For more information, see SAS Viya REST APIs: Authentication to SAS Viya . Authorization The REST APIs require authentication for all operations. Authentication is a means of verifying the identity of the user or agent that is making the request. Authentication is handled with an OAuth2-based service in the SAS Logon Manager. You must obtain an access token, and use that token on all requests. The example code shown in Chapter 2, “Define Basic Methods and Get an Access Token,” on page 5 provides a function for obtaining an access token. Code Files for These Examples The ZIP file that contains the code for the examples in this document is named REST_API_Examples.zip and is available at https://support.sas.com/en/software/intelligent-decisioning-support.html#documentation . To extract these files to your computer: 1Save the ZIP file into a folder on your machine. 2In Microsoft Windows Explorer, right-click REST_API_Examples.zip , and select WinZip ð Extract to here . Windows creates a folder named REST_API_Examples, which contains the example files. Additional Documentation and Examples Complete reference information for the Decision Management API is available on the web at https://developer.sas.com/apis/rest/DecisionManagement/ .2Chapter 1 / About the Examples",294
281,page 8. Additional examples of using the Decision Management API are available on GitHub at https://github.com/sassoftware/devsascom-rest-api-samples/tree/master/DecisionManagement .Additional Documentation and Examples 3,44
282,page 9. 4Chapter 1 / About the Examples,13
283,"1. SAS® Intelligent Decisioning: User’s Guide 2023.05 - 2023.06**This document might apply to additional versions of the software. Open this document in SAS Help Center and click on the version in the banner to see all available versions. SAS® Documentation August 15, 2023",65
284,10. 1 Introduction to SAS Intelligent Decisioning Enterprise Decision Management Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 About Business Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 SAS Intelligent Decisioning Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Support for Models in Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Sign in to SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
285,". . . . . 4 SAS Intelligent Decisioning Home Page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Using SAS Intelligent Decisioning as a Progressive Web App . . . . . . . . . . . . . . . . . . . . 5 Benefits of Using a Progressive Web App . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Installing SAS Intelligent Decisioning as a Progressive Web App . . . . . . . . . . . . . . . . . . 6 Sorting, Searching, and Filtering in Category Views . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 Sort Object Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 Search Object Lists . .",281
286,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 Filter Object Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 Manage Saved Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 SAS Intelligent Decisioning Settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 Manage Folders and Folder Content . . . . . . . . . . . . . . . .,263
287,"100. About Attributes, Eligibility Rules, and Effective Dates A treatment defines the details of an offer that can be sent to a subject, who is eligible for the offer, and the dates during which the offer is available to be sent to a subject. A treatment is a set of attributes, eligibility rules, and effective dates. Attributes and Attribute Aliases Attributes are name-value pairs that define the specific details of the offer that you present to a subject. For example, for a treatment that gives subjects a 20% discount, you could define an attribute named DISCOUNT that has the value 20. To give subjects a special deal on a specific cell phone model, you can define an attribute named MODEL whose value is the specific model name. You could use treatment attributes to set values such as profitability, risk, cost, priority, or order. You can use the values of these attributes to arbitrate the treatments. For more information, see “Arbitrating Treatments” on page 89. An attribute’s value can be dynamic or fixed. Fixed You specify the value or set of values for fixed attributes when you define the attribute. You cannot customize the values in treatment groups, and the decision cannot set them at run time. Dynamic You can set the value or set of values for a dynamic attribute when you add a treatment group to a decision, or the decision can set them at run-time. When you define a dynamic attribute, you can specify default values for the attribute. Within each treatment group in which the attribute appears, you can set static values that are used only within that specific treatment group, or you can specify that the attribute’s values are set by the decision at run time. When you add a treatment group to a decision, SAS Intelligent Decisioning does the following: ncreates an output decision variable of type data grid that contains a column for each attribute in the treatment group. ncreates an input decision variable for each dynamic attribute whose value is set by the decision. SAS Intelligent Decisioning automatically maps the treatment group’s attributes to the decision variables that have the same name and data type. For more information, see “Mapping Variables within a Decision” on page 247. You can assign aliases to attributes. An alias is an alternative name that you can assign to a treatment attribute after you add the treatment to a treatment group. Aliases are useful when attributes in different treatments within the group represent the same data but are defined with different names.",494
288,"101. named DISC. Assuming that these two attributes represent the same value, you can assign an alias to one or both of the attributes. An attribute can have only one alias. Eligibility Rules Eligibility rules define who is eligible to receive the offer defined by the treatment. For example, your campaign can target people who already have a specific credit card and who are at least 30 years old, or people who own a home but who do not have a home equity line of credit. You define eligibility rules in the eligibility rule set. An eligibility rule set is a filtering rule set. For more information, see “About Rules and Rule Set Types” on page 13. Effective Dates The effective dates for a treatment are the start and end dates when the treatment is active, that is, when it can be returned to a subject. Responses that are defined by a treatment are not returned to subjects outside of the effective dates. Effective dates are not required. A treatment that does not have effective dates is considered to always be active. Note: The effective dates are always based on the time zone of the server where the decision is executed. The time zone for SAS Viya 4 servers is set to Coordinated Universal Time (UTC). Arbitrating Treatments You can determine which treatments a subject is most likely to respond to by using one or more of the following methods: nuse filtering rule sets to select only certain records for processing. Only the records whose conditions evaluate to true are processed by the remaining objects in the decision. For more information, see “About Rules and Rule Set Types” on page 13. Note: Filtering rule sets can be included directly in a decision, but they are also used as the eligibility rule set in treatments. nuse models to score treatments. For example, you might have a model that calculates propensity scores for individual treatments. nuse data grid functions to sort or subset the treatments according to the values of their attributes. For example, you could have attributes for value, profitability, or risk. For more information, see “Data Grid Functions” in SAS Intelligent Decisioning: Using Data Grids .Arbitrating Treatments 89",436
289,"102. nuse DS2 code files to create custom code for arbitrating the treatments. Chapter 6, “Using Custom Code Files,” on page 151. About Channels Channels are routes by which your company and a subject are in contact. Typical channels are email, phone call, and website. A default set of channels is defined in the Treatment Channels lookup table. Your administrator can customize this lookup table for your enterprise. You can use this lookup table in rules to narrow the list of offers to ones that are appropriate for the channel. See “Predefined Lookup Tables” on page 116 for more information. You can create assignment rules to determine the channel through which your company and a subject are in contact if the channel was not specified in the original request. Define a Treatment Create a New Treatment and Define Attributes 1Click , and then click New Treatment . The New Treatment window appears. 2Enter a name for the treatment. 3(Optional) Enter a description for the treatment. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 4Click , and select the folder where you want to save the treatment. 5Click Save to save the treatment. SAS Intelligent Decisioning opens the new treatment and displays the Attributes tab. TIP Objects that are saved in a folder for which the check-out and commit feature is enabled, such as the Decision Repository folder, must be checked out before they can be edited. 6(Optional) If the treatment is in a folder for which the check-out and commit feature is enabled, click the Versions tab and check out the latest version of the treatment. For more information, see “Check Out and Commit a Treatment or Treatment Group Version” on page 110.90Chapter 3 / Working with Treatments and Treatment Groups",368
290,"103. 7(Optional) Define treatment attributes. A treatment can have zero or more attributes. For more information about attributes, see “About Attributes, Eligibility Rules, and Effective Dates” on page 88. You can add new custom attributes, add attributes from other treatments, or duplicate attributes within the same treatment. For more information, see the following topics: n“Define Custom Attributes” on page 95 n“Add Attributes from a Different Treatment” on page 96 n“Duplicate Attributes” on page 96 Specify Eligibility Rules You specify eligibility rules in a filtering rule set. See “About Rules and Rule Set Types” on page 13 for more information. 8On the Eligibility Rule Set tab, click Add Rule Set . The Select Rule Set window appears. 9Select the filtering rule set that you want to use as the eligibility rule set for the treatment, and click OK. 10At the top of the Eligibility Rule Set tab, select the version of the eligibility rule set that you want to use. TIP You can view or edit an eligibility rule set from the Eligibility Rule Set tab by clicking Open . (Optional) Specify Effective Dates 11On the Properties tab, select the Start date and End date for the period in which the treatment can be sent to a subject. If you do not specify effective dates, the treatment is considered as always active. Specify the time based on the Coordinated Universal Time (UTC) time zone. Note: The effective dates are always based on the time zone of the server where the decision is executed. See “Effective Dates” on page 89. Define a Treatment Group Create a New Treatment Group 1Click , and then click New Treatment Group . The New Treatment Group window appears. 2Enter a name for the treatment group. 3(Optional) Enter a description for the treatment group. Descriptions are limited to 1000 characters.Define a Treatment Group 91",394
291,"104. TIP You can edit the description later on the Properties tab. 4Click , and select the folder where you want to save the treatment group. 5Click Save to save the treatment group. SAS Intelligent Decisioning opens the new treatment group and displays the Treatments tab. TIP Objects that are saved in a folder for which the check-out and commit feature is enabled, such as the Decision Repository folder, must be checked out before they can be edited. 6(Optional) If the treatment group is in a folder for which the check-out and commit feature is enabled, click the Versions tab and check out the latest version of the treatment group. For more information, see “Check Out and Commit a Treatment or Treatment Group Version” on page 110. Add Treatments 7On the Treatments tab, click Add Treatments . The Add Treatments window appears. 8Select the treatments that you want to add to the treatment group, and click OK. TIP After you add a treatment to a treatment group, the variables in the eligibility rule set are added to the list of eligibility variables for the treatment group. You can view the eligibility variables for a treatment group on the Eligibility Variables tab. 9(Optional) Select the version of each treatment that you want to use in the treatment group. TIP You can change the version of a treatment at any time on the Treatments tab. Customize Dynamic Treatment Attributes For information about dynamic and fixed attributes, see “Define Custom Attributes” on page 95. 10On the Treatments tab, click Set Attributes . The Set Attributes window appears. By default, dynamic attributes are automatically selected, and their values are set at run-time by the decision flow. 11For each dynamic variable, verify that its setting is correct for the current treatment group. nIf you want the attribute’s value to be set by the decision flow, leave the attribute selected. nIf you want to enter a static value or list of values for the attribute, clear the check box, and then enter the value or values that you want to be used in the current treatment group. To delete a value from a list, click the X for that value. To enter new values, press Enter after each new value.92Chapter 3 / Working with Treatments and Treatment Groups",468
292,"105. Add Attribute Aliases For information about aliases, see “Attributes and Attribute Aliases” on page 88. 12Click the Attributes tab. 13Click for the attribute to which you want to assign an alias. The Choose an Alias window appears and displays the list of existing attribute names that you can associate with the selected attribute. nTo assign an existing attribute name as an alias, select the attribute name in the list and click OK. nTo enter a new alias, click New Alias , enter the new alias name, and click Save . When you create a new alias, SAS Intelligent Decisioning creates a new output variable for the treatment group. TIP In the Set Attributes window, you can view the alias that is assigned to an attribute by clicking . Activating a Treatment Group What Does Activating a Treatment Group Do? Activating a version of a treatment group makes that version available for use by published decisions. Published decisions can use only activated versions. In SAS Micro Analytic Service destinations, the sas.decisions.masInlineTreatmentGroup configuration option on page 94 controls what happens when you activate a treatment group. If this configuration option is set to On, the treatment group is converted into executable code in the form of a SAS Micro Analytic Service module. This module enables decisions that are published to SAS Micro Analytic Service destinations to use the most recently activated version of a treatment group. If this option is set to Off, a static version of the treatment group is included inline in the generated code for decisions. CAS, Teradata, Hadoop, and container destinations do not support SAS Micro Analytic Service modules. Decisions that are published to these destinations always include a static version of each treatment group. You must activate a version of any treatment group that is used in a decision. When you activate a version of a treatment group, that version is locked and cannot be edited. Each treatment group can have only one active version. The active version of a treatment group is used in the following ways: nwhen you run a test or scenario test prior to publishing an object. nto generate a static copy of the treatment group when you publish a decision if you publish the decision to CAS, Teradata, Hadoop, or container destinations. Static copies are always generated for these destinations.Activating a Treatment Group 93",468
293,"106. nby published decisions in SAS Micro Analytic Service destinations if the configuration sas.decisions.masInlineTreatmentGroup property is set to Off. See “Controlling Where Global Variables Are Activated and How They Are Used” on page 149 for more information. Controlling Where Treatment Groups Are Activated and How They Are Used Static versions of treatment groups are automatically embedded in content that is published to CAS, Teradata, Hadoop, and container destinations. Your administrator can use the following configuration options to control how treatment groups are used in SAS Micro Analytic Service destinations: sas.treatmentdefinitions.activation.destinations = destinations specifies the SAS Micro Analytic Service destinations in which treatment groups are activated. Only one SAS Micro Analytic Service destination is supported. By default, that destination is named maslocal . sas.decisions.masInlineTreatmentGroup = On | Off specifies whether the code for treatment groups is included inline in generated code when you publish a decision to SAS Micro Analytic Service destinations. When this property is set to On, a static copy of each treatment group is included in the code that is generated for SAS Micro Analytic Service destinations. Changes to the treatment groups do not affect published objects. When this property is set to Off, the generated code uses a SAS Micro Analytic Service module to retrieve the active version of the treatment group when the decision is run. Activate a Treatment Group Activating a version of a treatment group version locks that version. Locked groups cannot be unlocked. You must activate a treatment group version before you can publish an object that uses that version. By default, when you activate a treatment group, it is activated in all of the publishing destinations that are configured at your site. However, you adminstrator might specify that groups are activated only in specific SAS Micro Analytic Service destinations. For more information, see “Controlling Where Treatment Groups Are Activated and How They Are Used” on page 94. To activate a treatment group: 1Open the treatment group that you want to activate. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled.94Chapter 3 / Working with Treatments and Treatment Groups",465
294,"107. 2On the Versions tab, select the version that you want to activate, and click Activate . Managing Attributes and Aliases About Attributes and Aliases For additional information about attributes and aliases, see the following topics: n“Attributes and Attribute Aliases” on page 88 n“Add Attribute Aliases” on page 93 n“Customize Dynamic Treatment Attributes” on page 92 Define Custom Attributes 1On the Attributes tab of a treatment, click Add Attribute and select Custom attribute . The Add Attribute window appears. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Complete these steps for each attribute: aEnter a name for the attribute. b(Optional) Enter a description for the attribute. cSelect the data type for the attribute. dSelect Fixed or Dynamic , depending on how the attribute’s value will be set when it is included in a treatment group. Dynamic The values of dynamic attributes can be set by the decision at run-time. When you define a dynamic attribute, you can specify a default value or a list of default values for the attribute. Within each treatment group in which the attribute appears, you can specify that the attribute’s value is set by the decision at run time, or you can set a static value that is used only within that specific treatment group. Fixed You define the value or list of values for fixed attributes when you define the attribute. The values cannot be customized in treatment groups.Managing Attributes and Aliases 95",330
295,"108. eSpecify the value or the list of values for the attribute. For dynamic attributes, these values are used as the default values if the attribute’s values are not customized in treatment groups. For attributes that are character, integer, or decimal attributes, you can specify a single value or a list of values. Select the List of values check box to specify a list of possible values for the attribute. In the Value field, press Enter after each specific value. For attributes of other data types, you can specify only a single value. fClick Add to add the attribute to the table. 3Click OK to save the attributes. Add Attributes from a Different Treatment 1On the Attributes tab of a treatment, click Add Attribute , and select Treatment . The Choose an Item window appears. 2Select the treatment from which you want to copy an attribute, and click OK. The Add Attributes window appears. 3Click to select all of the attributes, or select one or more individual attributes and click . 4Click Add to add the attributes, or click Add and replace to replace existing attributes that have the same name. Duplicate Attributes 1On the Attributes tab of a treatment, select the attribute that you want to duplicate. 2Click , and select Duplicate . The Duplicate Attributes window appears. 3Enter a new name for the duplicate attribute, and click Duplicate . Delete Attributes from a Treatment On the Attributes tab of a treatment, select the attribute that you want to delete, click , and select Delete . TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled.96Chapter 3 / Working with Treatments and Treatment Groups",362
296,"109. View Attribute Aliases for a Treatment Group You can view attribute aliases in two ways: nClick the Attribute Aliases tab in a treatment group. nOn the Treatments tab, click Set Attributes , and then click for a specific attribute. Remove an Attribute Alias from a Treatment Group On the Attribute Aliases tab of a treatment group, select the attributes whose aliases you want to remove, click , and select Remove alias . Determine Which Treatments Use an Attribute On the Attribute Aliases tab of a treatment group, select the attribute for which you want treatment information, click , and select Used by . SAS Intelligent Decisioning opens the Used By Treatments window, which lists the treatments that use the attribute. Delete Treatments from a Treatment Group On the Treatments tab of the treatment group, select the treatments that you want to remove from the group, click , and select Delete . Managing Eligibility Rules for a Treatment For additional information about eligibility rules, see “About Attributes, Eligibility Rules, and Effective Dates” on page 88 and “Specify Eligibility Rules” on page 91.Managing Eligibility Rules for a Treatment 97",229
297,"11. Enterprise Decision Management Systems Enterprise decision management systems can transform how businesses make decisions. They enable businesses to use the information they already have to make better decisions—decisions that are based on predictive analytics rather than on past history. Decision management systems automate the process of making decisions, particularly day-to-day operational decisions. They improve the speed, efficiency, and accuracy of routine business processes, in part by reducing the need for human intervention. Automating decisions with SAS Intelligent Decisioning provides a streamlined mechanism for controlling and monitoring the rules and processes used by your organization. By automating decisions, organizations in every industry can improve interactions with customers, partners, suppliers, and employees. In addition, organizations that are highly regulated, such as financial services, health care, and insurance, can more easily achieve compliance as a result of repeatable, traceable decisions. Explicitly defining a decision makes your organization’s decision-making process transparent, and enables you to monitor the process for accuracy. SAS Intelligent Decisioning helps organizations leverage data, author and manage business rules, and integrate analytical models with other business logic. It enables them to create and optimize efficient business decisions within a single interface that gives users a consistent experience. About Business Rules Business rules capture the logic of business decisions and are a core component of decision management systems. Business rules enable you to codify the decision- making process used by your organization. Business rules make the decision- making process transparent and adaptable, enabling organizations to respond quickly to new information about customers and markets. They enable organizations to identify and deal with fraud, avoid unnecessary risk, and find opportunities hidden in customer data. SAS Intelligent Decisioning Features You can use SAS Intelligent Decisioning to create a database of business rules, combine those rules together into decisions, and publish the decisions for use by other applications. SAS Intelligent Decisioning provides the following capabilities:2Chapter 1 / Introduction to SAS Intelligent Decisioning",381
298,"110. Remove Eligibility Rule Set from a Treatment On the Eligibility Rule Set tab of a treatment, click Remove . Change the Eligibility Rule Set for a Treatment 1On the Eligibility Rule Set tab of a treatment, click Replace . The Select Rule Set window appears. 2Select the filtering rule set that you want to use as the eligibility rule set for the treatment, and click OK. 3At the top of the Eligibility Rule Set tab, select the version of the eligibility rule set that you want to use. TIP You can view or edit an eligibility rule set on the Eligibility Rule Set tab by clicking Open . Copy a Treatment or Treatment Group URL To create a link for external documentation that automatically opens a treatment or treatment group in SAS Intelligent Decisioning : 1Open the treatment or treatment group. 2Click , and select either Copy treatment URL or Copy treatment group URL . The Copy URL window appears, and the URL is automatically selected. 3Click Copy , and then click Close . Paste the link into your documentation.98Chapter 3 / Working with Treatments and Treatment Groups",225
299,"111. Compare Treatment or Treatment Group Content You can compare the contents of two different treatments or treatment groups, or you can compare the contents of two different versions of the same treatment or treatment group. 1Select the objects that you want to compare. nTo compare the contents of two different treatments or treatment groups, select the treatments or treatment groups in the category view, click , and select Compare object contents . nTo compare the contents of two versions of the same treatment or treatment group, open the treatment or treatment group, click on the Versions tab, and select Compare object contents . The Select Versions window appears. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Object Contents window. For treatment groups, the Compare Object Contents window displays the name and version number of the treatments that differ in each object. To display all of the treatments in each group, click Show All . For example, in the following figure, both treatment groups contain the card_preferred treatment and the card_silver treatment. The card_gold treatment appears only in the card_offers group, and the card_gold_plus_special treatment appears only in the card_offers_special treatment group. Compare Treatment or Treatment Group Content 99",257
300,"112. TIP Click beside a treatment name or treatment group name to display its location. For treatments, the Attributes tab displays the attribute names and values that are different between the two objects. For example, in the following figure, the two treatments contain the same attributes, but the values of all of the attributes are different except for the annual_fee attribute. 3(Optional) Click the Eligibility Rule Set tab to display the differences in the eligibility rule sets. For example, in the following figure, the two version of the check_score treatment use different versions of the same eligibility rule set. Version 2.0 of the rule set contains an additional rule. 4(Optional) Click Export to export the results of the comparison to a PDF file. The Export Comparison Results window appears.100 Chapter 3 / Working with Treatments and Treatment Groups",169
301,"113. 5(Optional) Select the information that you want to export, and click Export . If you want the PDF file to display only the differences between the two objects, select Show differences . To display all of the objects’ information, select Show all . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Compare Treatment Group Code You can compare the generated code of two different treatment groups, or you can compare the generated code of two different versions of the same treatment group. 1Select the objects that you want to compare. nTo compare the generated code of two different treatment groups, select the groups in the category view, click , and select Compare code . nTo compare the generated code of two versions of the same treatment group, open the treatment group, click on the Versions tab, and select Compare code . The Select Versions window appears. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Code window and highlights the differences. 3(Optional) Click Export to export the results of the comparison to a PDF file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Generate PDF Documentation for a Treatment Group You can generate detailed documentation for a treatment group as a PDF document. The PDF includes the treatment group properties, and details about each treatment that is included in the group. Treatment details include treatment properties, the name of the eligibility rule set, and details about each of the treatment’s attributes. 1Open the treatment group. 2Click , and select Create document . The Create Document window appears.Generate PDF Documentation for a Treatment Group 101",425
302,"114. TIP If this option is disabled, there might be unsaved changes. Click . 3(Optional) Enter a name for the document if you do not want to use the default name. 4Click Create . SAS Intelligent Decisioning creates the PDF. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Managing Treatments and Treatment Groups Duplicate Treatments or Treatment Groups Note: You cannot duplicate a treatment or treatment group if it is open. To duplicate a single treatment or treatment group: 1In the Treatments or Treatment Groups category view, select the treatment or treatment group that you want to duplicate. 2Click and select Duplicate . The Duplicate Treatments or Duplicate Treatment Groups window appears. 3Enter a new name for the duplicate treatment or treatment group. 4(Optional) Enter a description for the treatment or treatment group. 5Select the version of the treatment or treatment group that you want to duplicate. 6Click and select the location where you want to save the duplicate treatment or treatment group. 7Click Duplicate . To duplicate multiple treatments or treatment groups: 1In the Treatments or Treatment Groups category view, select the treatments or treatment groups that you want to duplicate. 2Click and select Duplicate . SAS Intelligent Decisioning duplicates the latest version of the treatments or treatment groups and appends _Copy to the names of the duplicate copies. If needed, a number is also appended to the names of the duplicate copies.102 Chapter 3 / Working with Treatments and Treatment Groups",352
303,"115. Note: When you duplicate a treatment or treatment group, SAS Intelligent Decisioning creates a relationship between the original treatment or treatment group and the duplicate object. If either object is changed, and you later copy the contents of one object into the other, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the treatment or treatment group before you paste the new content. Delete Treatments or Treatment Groups Note: You cannot delete a treatment or treatment group if it is open. In the Treatments or Treatment Groups category view, select the treatments or treatment groups that you want to delete, click , and select Delete . SAS Intelligent Decisioning moves the deleted items to the recycle bin. For more information, see “Manage Folders and Folder Content” on page 9. Rename a Treatment or Treatment Group Note: You cannot rename a treatment or treatment group if it is open. 1In the Treatments or Treatment Groups category view, select the treatment or treatment group that you want to rename. 2Click , and select Rename . 3Enter a new name for the treatment or treatment group, and click Rename . Move Treatments or Treatment Groups to a Different Folder 1In the Treatments or Treatment Groups category view, select the treatments or treatment groups that you want to move. 2Click and select Move . The Choose a Location window appears. 3Select the location to which you want to move the treatments or treatment groups, and click OK.Managing Treatments and Treatment Groups 103",309
304,"116. Managing Versions of Treatments and Treatment Groups Set the Displayed Version The displayed version is the version whose information is displayed on the other tabs, such as the Properties and Attributes tabs. On the Versions tab, a in the Displayed Version column indicates the displayed version. To change the displayed version, click the version number for the version that you want to view. The displayed version is shown in the title bar. Create a New Version Note: For objects that are stored in locations for which the check-out and commit feature is enabled, you cannot manually create a new version. The only way to create a new version is to check out an existing version and commit a new version. For information, see “Check Out and Commit a Treatment or Treatment Group Version” on page 110. Note: The current version of an object is the version with the highest version number. When you create a new version, SAS Intelligent Decisioning locks the current version before it creates the new version. IMPORTANT You cannot unlock a locked version. You cannot save changes to a version that is locked. If you modify a version that is locked and click , SAS Intelligent Decisioning asks you if you want to replace the current unlocked version with your edited version. To manually create a new version: 1On the Versions tab, click the version number for the existing version that you want to use as the basis for the new version. 2Click New Version . The New Version window appears. 3Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented. If you select Minor , the number to the right of the period is incremented.104 Chapter 3 / Working with Treatments and Treatment Groups",358
305,"117. 4(Optional) For each version tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Note: A tag is limited to 100 characters. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. 5(Optional) Enter information about the new version in the Notes field. TIP You can edit these notes at any time on the Versions tab. 6Click Save . Copy the Content of a Version You can copy the content of an object’s version in the category view or on the Version tab for the object. 1In the category view, complete these steps: aSelect the treatment or treatment group whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. cSelect the version whose contents you want to copy. Alternatively, on the Versions tab of the treatment or treatment group whose contents you want to copy: aSelect the version whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. 2Click , and select the target treatment or treatment group into which you want to paste the contents of the version. You can paste version contents only into an object of the same type. When you paste the contents, SAS Intelligent Decisioning creates a new version of the target treatment or treatment group. The target object contains only the pasted content. 3Select whether you want to create a new major or minor version. 4(Optional) Modify the notes that will be associated with new version. 5(Optional) Add tags that will be associated with the new version. Tags that are associated with a source object version are not automatically added to the new version. See “Add a Version Tag” on page 111Managing Versions of Treatments and Treatment Groups 105",398
306,"118. 6Click Paste Version , and then click Yes. Note: When you copy the contents of a source object into a target object, SAS Intelligent Decisioning creates a relationship between the two objects. If the source object is modified after you copy its contents, and you later copy the contents of the target object back into the source object, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the source object before you paste the new content. Delete a Version IMPORTANT When you delete a specific version, that version is deleted permanently. It is not moved into the recycle bin, and it cannot be restored. Note: In order to be able to delete a specific version of an object, you must have permission to delete the object itself. Also, the configuration option sas.treatmentdefinitions.deleteVersions must be turned on. On the Versions tab, select the version that you want to delete, click , and select Delete . You cannot delete the current version. Determine Which Objects Use a Treatment or Treatment Group To list the objects that use a specific treatment or treatment group: 1On the Treatments or Treatment groups category page, select the check box for the treatment or treatment group, click , and select View used by report . The All Objects that Use the Selected Item window appears. This window lists all objects that use any version of the selected treatment or treatment group. 2(Optional) Select a specific version of the treatment or treatment group. SAS Intelligent Decisioning narrows the list to include only the objects that use the selected version of the treatment or treatment group. Note: The View used by report option is also available from within an open treatment or treatment group. In the report, you can use the Filter field to filter the list of objects based on the object names. Click on an object name to open the object. Click next to an object 106 Chapter 3 / Working with Treatments and Treatment Groups",392
307,"119. name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Checking Out and Committing Treatment or Treatment Group Versions About Checking Out and Committing Versions Your administrator can enable the check-out and commit feature for treatments and treatment groups that are in any folder by specifying the folder in the sas.treatmentdefinitions.checkout.checkoutEnabledFolderPaths configuration option. Enabling this feature for a folder does not automatically modify the permissions for the folder or for the objects in it. You can still modify a treatment or a treatment group in the folder without checking it out, but you are expected to check out the latest version before you edit it. However, your administrator might also set permissions that require you to check out treatments and treatment groups in these folders before you can edit them. For more information, see “sas.treatmentdefinitions.checkout” in SAS Intelligent Decisioning: Administrator’s Guide and “Set Permissions for Check-Out Folders” in SAS Intelligent Decisioning: Administrator’s Guide . By default, SAS Intelligent Decisioning defines a folder where you can store treatments and treatment groups that must be checked out before they can be edited. This folder is the Decision Repository folder, and it is the default value for the sas.treatmentdefinitions.checkout.checkoutEnabledFolderPaths configuration option. The default permissions for this folder require that non-administrative users check out a version and commit their changes to the checked-out version. Users who do not have administrative permissions cannot edit the treatments or treatment groups in Decision Repository without first checking them out. If a version can be or must be checked out before it is modified, the Check Out button appears at the top of the Versions tab for that object. You can check out any version of an object. You can check out only one copy of a version at a time.",452
308,"12. business rule authoring A business rule specifies conditions to be evaluated and action to be taken if those conditions are satisfied. For example, you can create a rule that determines whether a particular customer has a mortgage. That same rule can then add the outstanding balance of the mortgage to a running total of the customer’s debt. With SAS Intelligent Decisioning , you define the conditions and actions for each rule. rule set management and publishing A rule set is a logical collection of rules. A single rule set can have many rules, but it generally corresponds to a single step in a decision. For example, you can have a rule set that determines a customer’s asset balance and another rule set that determines a customer’s debt level. You can use SAS Intelligent Decisioning to easily create new rule sets, reorder the rules in a rule set, add new rules to existing rule sets, and so on. When a rule set is published, the versioning features of SAS Intelligent Decisioning create a static version of the rule set. This static version helps you enforce integrity and governance over the rules that are put into production. treatment authoring and management A treatment is an offer that can be sent to a customer as part of an inbound marketing campaign. For example, when a customer visits your company’s website, a customer service application can capture information about the customer. The application can invoke a decision that includes a set of treatments and pass the customer’s information to the decision. The decision determines which of the treatments (offers) are suitable to present to that customer at that time. With SAS Intelligent Decisioning , you can author treatments, combine them into treatment groups, and add the groups to decisions. lookup table authoring and management Lookup tables are tables of key-value pairs. You can use lookup tables for tasks such as retrieving a part name based on a part number or retrieving a location name based on a ZIP code. SAS Intelligent Decisioning provides two predefined lookup tables for use with treatments: one for treatment channels and one for subject levels. code file authoring and management You can define custom code files to do things that are not possible in rules, models, or treatments. For example, you can define a code file that makes HTTP calls to REST APIs, interacts with a database, manipulates files in the file system, or performs custom data transformations. In SAS Intelligent Decisioning , you can easily create, edit, and manage custom data query files, DS2 files, and Python files.",496
309,"120. When you check out a version, SAS Intelligent Decisioning writes a working copy of the version into your My Folder folder and opens the working copy. SAS Intelligent Decisioning adds “(Checked Out) ” to the name that is displayed at the top of the window. While you have a version checked out, the Treatments or Treatment Group category view shows two treatments or treatment groups with the same name, but the folders listed in the Location column differ for each object. The original version is in the location specified by the sas.treatmentdefinitions.checkout.checkoutEnabledFolderPaths configuration option, and the checked-out copy is in your My Folder folder. TIP If an object that you have checked out does not appear in the category view, click to refresh the category view. Note: When a decision that uses a treatment group is deployed to a production environment, the decision always uses the active version of a treatment group. When you edit a decision that uses a treatment group that you have checked out, the properties panel for the treatment group shows the location of the treatment group in the original folder. The panel does not list the location of the treatment group that is checked out because that copy is not the active version. A Commit button appears at the top of the Versions tab for the checked-out version. When you are finished editing the checked-out version, you must commit your changes in order for other users to be able to see them. When you commit your changes, SAS Intelligent Decisioning creates a new version with your changes. If the parent object is deleted before you commit your changes, you will not be able to commit your changes. You cannot activate the checked-out version that is in My Folder . To activate a version with your changes, you must commit your changes, and activate the committed version. Checking Out a Treatment Group from within a Decision See “Checking Out and Committing Objects from within A Decision” on page 274 for information. Checking Out and Committing Treatments from within a Treatment Group You can check out a treatment from within a treatment group if the following conditions are true: nThe treatment group is checked out.108 Chapter 3 / Working with Treatments and Treatment Groups",441
310,"121. nThe treatment is stored in a folder for which the check-out feature is enabled. To check out or commit an individual treatment from within a checked-out treatment group,select the check box for the treatment on the Treatments tab, click , and select Check out or Commit . SAS Intelligent Decisioning displays an asterisk next to the name of any treatment that is checked out from within the treatment group. When you check out a treatment, the treatment group is modified to use the checked-out copy of the treatment, and SAS Intelligent Decisioning enables the Commit option in the menu.. When you commit a treatment group, all checked-out treatments that are used in the treatment group are also committed. To cancel the check out of a treatment, select the check box for the treatment on the Treatments tab, click , and select Cancel check out . Concurrently Checking Out and Committing a Treatment or Treatment Group Versions The ability for multiple users to check out the same treatment or treatment group at the same time is controlled by the sas.treatmentdefinitions.checkout.allowConcurrentCheckout configuration option. This option is turned on by default. When this option is turned on, different users can check out the same version of the same object at the same time. Because the objects that are checked out are saved in each user’s My Folder location, the default permissions allow individual users to see only the copies that they have checked out. When this option is turned off and a user has checked out an object, the Check Out button for that object is disabled for all other users. If multiple users check out the same version of the same object at the same time, each user’s changes are preserved in a new version when they commit their changes. One user’s changes do not overwrite another user’s changes. IMPORTANT If two users attempt to commit changes to the same object simultaneously, the first user's attempt will succeed but the second user might see an error message that the commit has failed. If the second user subsequently commits their changes, the Modified By column on the Versions tab for both the version committed by the first user and the version committed by the second user displays the user ID of the second user.Checking Out and Committing Treatment or Treatment Group Versions 109",449
311,"122. Check Out and Commit a Treatment or Treatment Group Version TIP If a checked-out treatment group includes treatments that are also checked out, committing the treatment group also commits the treatments. 1On the Versions tab, click Check Out . SAS Intelligent Decisioning updates the Properties tab to indicate that the version is checked out. 2Modify the checked-out version as needed, and save it. TIP To discard the changes and delete the checked-out version from My Folder , you can commit the object without saving it first. However, committing the object without saving creates a new version of the object whose contents match the contents of the previous version. For information on undoing a check out, see “Undoing a Check Out” on page 111. 3On the Versions tab, click Commit . The Commit Treatment Version or Commit Treatment Group Version window appears. 4Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented, and the minor number is reset to zero. If you select Minor , the number to the right of the period is incremented. 5(Optional) In the Version tags field, enter any version tags that you want to associate with the new version. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / 6(Optional) Enter information about the new version in the Notes field. 7Click Commit . SAS Intelligent Decisioning creates a new version with your changes, and deletes the working copy from your My Folder folder. Determine Who Has a Version Checked Out If the current version of an object is checked out, the IDs of the users that checked it out and the timestamps when each user checked it out appear in the Checked out by field on the Properties tab for the original object. You can also display this information by clicking beside the version number on the Versions tab.110 Chapter 3 / Working with Treatments and Treatment Groups",413
312,"123. Opening the Original Object When you check out an object, SAS Intelligent Decisioning adds the field Original object link to the Properties tab for the checked-out object. This field contains a link to the original object that was checked out. You can use this link to verify that you have checked out the correct version and to compare the original content with the modified content in the checked-out version. Undoing a Check Out How you undo the checkout of an object depends on how the object was checked out. If both an object and a decision that uses the object are checked out at the same time, or if you checked out the object from within the decision , click on the object's node in the decision diagram, and select Cancel checkout . You can discard a checked-out version and any changes that you made by deleting the working copy of the version from your My Folder folder if the following conditions are true: nYou have not checked out a decision that uses the object. nThe object was not checked out at the same time as a decision that uses the object, or the object was not checked out from within the decision after the decision was checked out. The deleted version is moved to the recycle bin. See “Delete Treatments or Treatment Groups” on page 103. Managing Version Tags for Treatment and Treatment Groups Add a Version Tag Version tags enable you to better organize and group your content. Version tags are associated with specific versions of an object and not with the entire object. You can add the same tag to any version of any object. To add a tag to a treatment or treatment group version: 1On the Versions tab, position your cursor in the Version Tags column for the version that you want to tag. If the version is not tagged, appears. If the version has at least one tag, appears.Managing Version Tags for Treatment and Treatment Groups 111",374
313,"124. 2Click to open the New Version Tags window, or click to open the Edit Version Tags window. 3For each tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. TIP To filter the version list based on a tag, right-click on the Version Tags column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 4Click Close to close the window. Remove a Version Tag 1On the Versions tab, position your cursor in the Version Tags column for the version whose tag you want to remove, and click . 2Click beside the tag that you want to remove. 3Click OK to close the window. The tag remains in the list of previously entered tags that is displayed when you add a tag, but the tag is no longer associated with version. Modify a Version Tag You cannot modify a version tag that already exists. To change the content of an existing tag, delete the tag as described in “Remove a Version Tag” on page 112, and then add the tag again as described in “Add a Version Tag” on page 111.112 Chapter 3 / Working with Treatments and Treatment Groups",332
314,125. 4 Working with Lookup Tables and Functions About Lookup Tables and Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 About Labels for Lookup Keys and Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 Predefined Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 Create a New Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 Importing and Exporting Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,267
315,"117 About Importing, Exporting, and Activating Lookup Tables . . . . . . . . . . . . . . . . . . . . . . 117 Format of the Lookup CSV Import File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117 Import Entries or Refresh Lookup Tables from CSV Files . . . . . . . . . . . . . . . . . . . . . . . 117 Export a Lookup Table to a CSV File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117 Add Lookup Table Entries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 Edit Lookup Table Entries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",277
316,. . . . . . . . . . 120 Delete Lookup Table Entries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Edit Lookup Key or Value Labels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Copy a Lookup Table URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Compare Lookup Table Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Generate PDF Documentation for a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . .,268
317,. . . 123 Managing Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Duplicating Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Delete Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Rename a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Move Lookup Tables . . . . . . . . . . . . . . . . . . . . .,264
318,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Managing Versions of Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 Set the Displayed Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 Create a New Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 Copy the Content of a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 Delete a Version . . . . .,267
319,126. Checking Out and Committing Lookup Table Versions . . . . . . . . . . . . . . . . . . . . . . . . 128 About Checking Out and Committing Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 Checking Out and Committing a Lookup Table from within a Rule Set . . . . . . . . . . . 128 Committing a Lookup Table Together with a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . 128 Concurrently Checking Out and Committing Lookup Table Versions . . . . . . . . . . . . 128 Check Out and Commit a Lookup Table Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 Determine Who Has a Version Checked Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 Opening the Original Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,291
320,. . . . . . . . . . . 128 Undoing a Check Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 Managing Version Tags for Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133 Add a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133 Remove a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133 Modify a Version Tag . . . . . . . . . . . . . . . . . . . .,267
321,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133 Activating a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134 What Does Activating a Lookup Table Do? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134 Controlling Where Lookup Tables Are Activated And How They Are Used . . . . . . . 134 Activate a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
322,"127. Figure 4.1 CSV File Imported Into SAS Intelligent Decisioning In a lookup table, each lookup key is associated with a lookup value . Lookup keys must be unique within each lookup table. SAS Intelligent Decisioning provides two functions, LOOKUP and LOOKUPVALUE, that enable you to determine whether a lookup key exists in a lookup table and to retrieve a lookup value from a lookup table. About Labels for Lookup Keys and Values You can specify labels to use for lookup keys and lookup values. For example, for the lookup table shown in Figure 4.2 on page 115, you could specify Country Abbreviation for the key and Country Name for the value. You could specify the names of variables that are used to store the keys or values as the labels. The labels that you enter are added to the Properties tab for the lookup table. They are also included in windows that contain fields where you enter keys or values. For example, if you add labels to the lookup table shown in Figure 4.2 on page 115 and open the Add Table Entries window, the labels are displayed in parentheses after the existing Key and Value field labels.About Labels for Lookup Keys and Values 115",242
323,"128. Predefined Lookup Tables SAS Intelligent Decisioning defines two lookup tables for you: Treatment Channels defines several channels for use with treatments. Channels are the route by which your company and a subject are in contact. The predefined channels include ATM, Agent, Call Center, Mail, Phone, and Web. Subject Level defines subject levels for use with treatments. A subject level is the type of account that is associated with a subject. For example, a subject might be an individual customer, a company account, or a household. The predefined levels are Account, Customer, and Household. Your administrator can modify these tables as described in “Edit Lookup Table Entries” on page 120. Create a New Lookup Table 1Click to navigate to the Lookup Tables category view. 2Click New Lookup Table . The New Lookup Table window appears. 3Enter a name for the new lookup table. Lookup table names are limited to 250 characters. Lookup table names are case insensitive and must be unique within the database. 4(Optional) Enter a label to use for the lookup key. Labels are limited to 100 characters. For more information, see “About Labels for Lookup Keys and Values” on page 115. 5(Optional) Enter a label to use for the value. Labels are limited to 100 characters. For more information, see “About Labels for Lookup Keys and Values” on page 115.116 Chapter 4 / Working with Lookup Tables and Functions",293
324,"129. 6(Optional) Enter a description for the new lookup table. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 7Click , and select the folder where you want to create the new lookup table. 8Click Save . The application opens the new lookup table and displays the Lookup Table tab. TIP Objects that are saved in a folder for which the check-out and commit feature is enabled, such as the Decision Repository folder, must be checked out before they can be edited. 9(Optional) If the lookup table is in a folder for which the check-out and commit feature is enabled, click the Versions tab and check out the latest version of the lookup table. For more information, see “Check Out and Commit a Lookup Table Version” on page 131. 10Add entries to the new table either by importing a CSV file or by adding entries manually. See “Import Entries or Refresh Lookup Tables from CSV Files” on page 118 and “Add Lookup Table Entries” on page 119 for more information. Importing and Exporting Lookup Tables About Importing, Exporting, and Activating Lookup Tables You can import lookup tables from and export lookup tables to comma-delimited (CSV) files. You can export an existing lookup table, edit the CSV file, and import the updated CSV file. You can export a lookup table from one environment and import it into another environment, or you can import and export lookup tables within the same environment. IMPORTANT The import and export features in SAS Intelligent Decisioning are for modifying an existing lookup table. If you do not need to edit the CSV file, use either the SAS Viya Command-Line (sas-viya)SAS administrative CLI (sas-admin) or SAS Environment Manager to transfer lookup tables between SAS Viya environments. The recommended approach is to use the transfer plug-in to the sas-viyasas-admin CLI. The CLI preserves the ID and version history of the objects being transferred. For lookup tables, the CLI also preserves information about which rule sets use the lookup table. For information about the CLI, see SAS Viya Platform: Content Migration from Importing and Exporting Lookup Tables 117",452
325,"13. decision authoring and publishing You can combine rule sets, analytical models, treatment groups, custom code files, record contacts nodes, and branches (conditional logic) into decisions. You can also add a decision to another decision. You can investigate various scenarios, test and refine the decision logic, and then publish the decisions for use in batch applications and online transactions. After a decision has been published, it is available for use by other applications. Support for Models in Decisions Support for a model depends on the tool that you use to create the model and the model’s score code type. For example, decisions that use certain model score code types cannot be published or can be published only to SAS Micro Analytic Service destinations. For more information, see “High-Level Model Support Matrix for Primary Functions” in SAS Model Manager: User’s Guide . Sign in to SAS Intelligent Decisioning Note: If you are already signed in to SAS Drive, you can access SAS Intelligent Decisioning by clicking and selecting Build Decisions . To sign in to SAS Intelligent Decisioning : 1In the address bar of your web browser, enter the URL for SAS Intelligent Decisioning and press Enter . The Sign In page appears. Note: Contact your system administrator if you need the URL for SAS Intelligent Decisioning . The default URL is http:// host_name /SASDecisionManager. 2Enter a user ID and password. 3Click Sign In . If this is your first time signing in to SAS Intelligent Decisioning , the Welcome to SAS window appears. 4Do one of the following: nSet up a profile and customize user-specific settings. For more information, see “Settings” in SAS Viya Platform: General Usage Help for Web Applications under General Usage in the Help Center and “SAS Intelligent Decisioning Settings” on page 8. nClick Skip setup if you do not want to set up a profile.You can edit your profile settings later by clicking the user icon in the upper right. After you exit the profile setup page, the SAS Intelligent Decisioning home page appears.4Chapter 1 / Introduction to SAS Intelligent Decisioning",427
326,"130. SAS Viya 4 . For information about using SAS Environment Manager, see “Content Page” in SAS Environment Manager: User’s Guide and “Import Page” in SAS Environment Manager: User’s Guide . TIP Whether a lookup table that is active in the source environment is automatically activated in the target environment is determined by the setting of the activation.activateLookupOnImport configuration option. This option affects tables that are imported by using the SAS Viya Command-Line (sas- viya)SAS administrative CLI (sas-admin) and by using SAS Environment Manager. For more information, see “Reference Data Service Properties” in SAS Intelligent Decisioning: Administrator’s Guide . Format of the Lookup CSV Import File Note: The format of the CSV file depends on whether you are importing a CSV file by using the Import button in the user interface or by using the %DCM_IMPORT_LOOKUP macro. For information about the format that the macro uses, see “Format of the Lookup CSV Input File for the Macro” in SAS Intelligent Decisioning: Macro Guide . Do not include a header row in the CSV file. Each row of the CSV input file identifies a key-value pair. To create a blank column in the CSV file, specify two comma separators without any content between them. The following example specifies the keys AU and CA and associates them with the values Australia and Canada , respectively.AU,AustraliaCA,Canada In a spreadsheet application, this lookup table appears as shown in the following figure. Import Entries or Refresh Lookup Tables from CSV Files Note: It is recommended that a single lookup table contains no more than 10,000 entries. If you are importing a very large lookup table, you might need to increase the JVM heap size for the businessRulesReferenceData service. For more 118 Chapter 4 / Working with Lookup Tables and Functions",370
327,"131. information, see “jvm.java_option_xmx” in SAS Intelligent Decisioning: Administrator’s Guide . Note: Lookup key names and values that contain two hash signs (##) are not supported. You can import entries into an empty table, and you can refresh an existing lookup table by re-importing the same table. 1Open the lookup table to which you want to import entries. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Click Import . The Import Lookup Table window appears. 3Click , and select the CSV file that contains the lookup table entries. 4Select the encoding for the lookup table, and click Import . Export a Lookup Table to a CSV File IMPORTANT Do not modify the file structure or the header row in the exported CSV file. You can modify the data values. To export a lookup table, open the lookup table and click Export . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Add Lookup Table Entries Note: It is recommended that a single lookup table contains no more than 10,000 entries. TIP You cannot add new entries to a lookup table version that has been activated. In order to edit the table, you must create a new version.Add Lookup Table Entries 119",332
328,"132. 1Open the lookup table to which you want to add entries. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Click New Entries if the lookup table is empty, or click if the lookup table already contains entries. The Add Table Entries window appears. 3Enter the lookup key name and value for the new entry. Key names and lookup values are each limited to 100 characters. Key names must be unique within the same lookup table. Note: Lookup key names and values that contain two hash signs (##) are not supported. To add additional entries, click Add an entry , and enter the new key name and value. 4Click Save to save the new entries and close the Add Table Entries window. Edit Lookup Table Entries TIP You cannot edit entries in a lookup table version that has been activated. In order to edit the table, you must create a new version. 1Open the lookup table. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Select the entries that you want to edit, and click . The Edit Table Entries window appears. 3Edit the exiting entries, and click Save .120 Chapter 4 / Working with Lookup Tables and Functions",312
329,"133. Delete Lookup Table Entries Open the lookup table, select the entries that you want to delete, and click . Edit Lookup Key or Value Labels 1In the Lookups category view, open the lookup table. 2Click beside the Key or Value column heading in the lookup table. The Rename window appears. 3Enter the label that you want to use for the key or value, and click OK. Copy a Lookup Table URL To create a link for external documentation that automatically opens a lookup table in SAS Intelligent Decisioning : 1Open the lookup table. 2Click , and select Copy lookup table URL . The Copy URL window appears, and the URL is automatically selected. 3Click Copy , and then click Close . Paste the link into your documentation. Compare Lookup Table Content You can compare the contents of two different lookup tables, or you can compare the contents of two different versions of the same lookup table. 1Select the objects that you want to compare. nTo compare the contents of two different lookup tables, select the lookup tables in the category view, click , and select Compare object contents .Compare Lookup Table Content 121",231
330,"134. nTo compare the contents of two versions of the same lookup table, open the lookup table, click on the Versions tab, and select Compare object contents . The Select Versions window appears. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Object Contents window. By default, the Compare Object Contents window displays the names and values in each entry in both objects and highlights the differences. To display all of the entries in each object, click Show All . For example, in the following figure, only version 2.0 of the Country_Codes lookup table contains entries for Algeria, and Antigua and Barbuda. TIP Click beside a table name to display its location. 3(Optional) Click Export to export the results of the comparison to a PDF file. The Export Comparison Results window appears. 4(Optional) Select the information that you want to export, and click Export . If you want the PDF file to display only the differences between the two objects, select Show differences . To display all of the objects’ information, select Show all . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application.122 Chapter 4 / Working with Lookup Tables and Functions",299
331,"135. Generate PDF Documentation for a Lookup Table You can generate detailed documentation for a lookup table as a PDF document. The PDF includes the lookup table properties and a table of the current key-value pairs that are contained in the lookup table. 1Open the lookup table. 2Click , and select Create document . The Create Document window appears. TIP If this option is disabled, there might be unsaved changes. Click . 3(Optional) Enter a name for the document if you do not want to use the default name. 4Click Create . SAS Intelligent Decisioning creates the PDF. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Managing Lookup Tables Duplicating Lookup Tables About Duplicating Lookup Tables in Folders for Which the Check-Out and Commit Feature Is Enabled When you duplicate a lookup table, SAS Intelligent Decisioning first creates an empty lookup table, and then updates the lookup table to add the individual lookup entries. The default permissions for the Decision Repository enable users to create new objects, but the permissions do not include the ability to update the objects. In Managing Lookup Tables 123",269
332,"136. order to duplicate an object that is in the Decision Repository, you must check out the object. If your site has created additional folders for which the check-out and commit feature is enabled, and if those folders have been assigned the same permissions as those assigned to the Decision Repository, you must also check out objects in those folders before you can duplicate them. Duplicate Lookup Tables Note: You can duplicate the predefined Treatment Channels or Subject Level lookup tables, but the duplicates will not be used by SAS Intelligent Decisioning to determine channels or subject levels. You cannot delete the duplicates by using the SAS Intelligent Decisioning user interface because these tables are not stored in a folder. You must use the REST API to delete the duplicate tables. To duplicate a single lookup table: 1Select the table that you want to duplicate, click , and select Duplicate . 2Enter a new name for the duplicate lookup table. Names are limited to 250 characters. Lookup table names are case insensitive and must be unique within the database. 3(Optional) Enter a description for the duplicate table. Descriptions are limited to 1000 characters. 4Select the version of the lookup table that you want to duplicate. 5Click and select the location where you want to save the duplicate lookup table. 6Click Duplicate . To duplicate multiple lookup tables, select the tables that you want to duplicate, click , and select Duplicate . SAS Intelligent Decisioning duplicates the latest version of the lookup tables and appends an -Copy to the names of the duplicate copies. If needed, a number is also appended to the duplicate table names. Note: When you duplicate a lookup table, SAS Intelligent Decisioning creates a relationship between the original lookup table and the duplicate lookup table. If either object is changed, and you later copy the contents of one object into the other, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the lookup table before you paste the new content.124 Chapter 4 / Working with Lookup Tables and Functions",409
333,"137. Delete Lookup Tables Select the tables that you want to delete, click , and select Delete . SAS Intelligent Decisioning moves the lookup table to the recycle bin. For more information, see “Manage Folders and Folder Content” on page 9. Rename a Lookup Table 1Select the table that you want to rename, click , and select Rename . The Rename window appears. 2Enter a new name for the table, and click Rename . Move Lookup Tables Note: You cannot move the predefined Treatment Channels or Subject Level lookup tables. 1Select the tables that you want to move, click , and select Move . The Choose a Location window appears. 2Select the folder where you want to move the tables, and click OK. Managing Versions of Lookup Tables Set the Displayed Version The displayed version is the version whose information is displayed on the Properties and Lookup Table tabs. On the Versions tab, a in the Displayed Version column indicates the displayed version. To change the displayed version, click the version number for the version that you want to view. The displayed version is shown in the title bar.Managing Versions of Lookup Tables 125",231
334,"138. Create a New Version Note: If you activate the only unlocked version of a lookup table, SAS Intelligent Decisioning automatically creates a new unlocked version. When you manually create a new version of a lookup table, previous versions are not locked. The only way to lock a version of a lookup table is to activate it. For more information, see “Activate a Lookup Table” on page 137. Note: For objects that are stored in locations for which the check-out and commit feature is enabled, you cannot manually create a new version. The only way to create a new version is to check out an existing version and commit a new version. For information, see “Check Out and Commit a Lookup Table Version” on page 131. IMPORTANT You cannot unlock a locked version. You cannot save changes to a version that is locked. If you modify a version that is locked and click , SAS Intelligent Decisioning asks you if you want to replace the current unlocked version with your edited version. To manually create a new version: 1On the Versions tab, click the version number for the existing version that you want to use as the basis for the new version. 2Click New Version . The New Version window appears. 3Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented. If you select Minor , the number to the right of the period is incremented. 4(Optional) For each version tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Note: A tag is limited to 100 characters. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. 5(Optional) Enter information about the new version in the Notes field. TIP You can edit these notes at any time on the Versions tab.126 Chapter 4 / Working with Lookup Tables and Functions",423
335,"139. 6Click Save . Copy the Content of a Version You can copy the content of an object’s version in the category view or on the Version tab for the object. 1In the category view, complete these steps: aSelect the lookup table whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. cSelect the version whose contents you want to copy. Alternatively, on the Versions tab of the lookup table whose contents you want to copy: aSelect the version whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. 2Click , and select the target lookup table into which you want to paste the contents of the version. When you paste the contents, SAS Intelligent Decisioning creates a new version of the target lookup table. The target object contains only the pasted content. 3Select whether you want to create a new major or minor version. 4(Optional) Modify the notes that will be associated with new version. 5(Optional) Add tags that will be associated with the new version. Tags that are associated with a source object version are not automatically added to the new version. See “Add a Version Tag” on page 133 6Click Paste Version , and then click Yes. Note: When you copy the contents of a source object into a target object, SAS Intelligent Decisioning creates a relationship between the two objects. If the source object is modified after you copy its contents, and you later copy the contents of the target object back into the source object, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the source object before you paste the new content. Delete a Version IMPORTANT When you delete a specific version, that version is deleted permanently. It is not moved into the recycle bin, and it cannot be restored.Managing Versions of Lookup Tables 127",387
336,"14. SAS Intelligent Decisioning Home Page By default, the SAS Intelligent Decisioning Home page appears when you sign in to the application. To return to the home page at any time, click in the left navigation bar. The Home page displays up to 100 of the most recent objects that you have opened, the date on which each object was last modified, and the user ID of the user who modified it. You can click and to switch between the list view and tile view of the recent objects. In the tile view, you can click to display additional information for a specific object. To open an object, either click on the object name, or click and select Open . You can toggle the display of category labels in the left navigation bar by clicking and . To create a new object, click and select the object type. You can sort the list of recent objects by name or by date modified, and you can filter the list by name. The Stay Connected panel on the right contains links to new topics in SAS Support Communities pages. It also contains links to an overview video and to documentation for SAS Intelligent Decisioning . Using SAS Intelligent Decisioning as a Progressive Web App Benefits of Using a Progressive Web App The benefits of using SAS Intelligent Decisioning as a Progressive Web App (PWA) include the following: nApplication persistence – By default, your session will never time out, so you can restart your work more quickly. Your administrator can control the timing with a configuration property in SAS Environment Manager. nPerformance – When installed as a PWA, SAS Intelligent Decisioning typically starts faster than when accessed in the browser. nDesktop experience – Installing SAS Intelligent Decisioning as a PWA confers all the benefits of a traditional installation. You can launch SAS Intelligent Decisioning from the Start menu or Taskbar, and you do not need to sort through countless tabs to find the correct instance of SAS Intelligent Decisioning . nRenaming – You can rename each PWA instance to quickly access different environments, such as development, test, or production servers.Using SAS Intelligent Decisioning as a Progressive Web App 5",423
337,"140. Note: In order to be able to delete a specific version of an object, you must have permission to delete the object itself. Also, the configuration option sas.referencedata.deleteVersions must be turned on. On the Versions tab, select the version that you want to delete, click , and select Delete . You cannot delete the current version. Determine Which Objects Use a Lookup Table On the Lookup tables category page, select the check box for the lookup table, click , and select View used by report . The All Objects that Use the Selected Item window appears. This window lists all objects that use any version of the selected lookup table. Note: The View used by report option is also available from within an open lookup table. In the report, you can use the Filter field to filter the list of objects based on the object names. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Checking Out and Committing Lookup Table Versions About Checking Out and Committing Versions Your administrator can enable the check-out and commit feature for lookup tables that are in any folder by specifying the folder in the sas.referencedata.checkout.checkoutEnabledFolderPaths configuration option. Enabling this feature for a folder does not automatically modify the permissions for 128 Chapter 4 / Working with Lookup Tables and Functions",368
338,"141. the folder or for the objects in it. You can still modify a lookup table in the folder without checking it out, but you are expected to check out the latest version before you edit it. However, your administrator might also set permissions that require you to check out lookup tables in these folders before you can edit them. For more information, see “sas.referencedata.checkout” in SAS Intelligent Decisioning: Administrator’s Guide and “Set Permissions for Check-Out Folders” in SAS Intelligent Decisioning: Administrator’s Guide . By default, SAS Intelligent Decisioning defines a folder where you can store lookup tables that must be checked out before they can be edited. This folder is the Decision Repository folder, and it is the default value for the sas.referencedata.checkout.checkoutEnabledFolderPaths configuration option. The default permissions for this folder require that non-administrative users check out a version and commit their changes to the checked-out version. Users who do not have administrative permissions cannot edit the lookup tables in Decision Repository without first checking them out. If a version can be or must be checked out before it is modified, the Check Out button appears at the top of the Versions tab for that object. You can check out any version of an object. You can check out only one copy of a version at a time. TIP If the sas.referencedata.checkout.allowConcurrentCheckout option is turned off, and a user has checked out a lookup table version, the Check Out button for that lookup table is disabled for all other users. For more information, see “Concurrently Checking Out and Committing Lookup Table Versions” on page 131. When you check out a version, SAS Intelligent Decisioning writes a working copy of the version into your My Folder folder and opens the working copy. SAS Intelligent Decisioning adds “(Checked Out) ” to the name that is displayed at the top of the window. While you have a version checked out, the Lookup Tables category view shows two lookup tables with the same name, but the folders listed in the Location column differ for each lookup table. The original version is in the location specified by the sas.referencedata.checkout.checkoutEnabledFolderPaths configuration option, and the checked-out copy is in your My Folder folder. TIP If an object that you have checked out does not appear in the category view, click to refresh the category view.",493
339,"142. Checking Out and Committing a Lookup Table from within a Rule Set You can check out a lookup table from within a rule set if the following conditions are true: nThe rule set is checked out. nThe lookup table is stored in a folder for which the check-out feature is enabled. nThe rule set does not have any unsaved changes. If the rule set contains any unsaved changes, the Check out lookup option is disabled. To check out or commit a lookup table from within a checked-out rule set, right-click on the LOOKUP or LOOKUPVALUE expression, and select Check out lookup or Commit lookup . SAS Intelligent Decisioning displays as asterisk in front of the name of any lookup table that is checked out. When you check out a lookup table from within a rule set, the checked-out rule set is modified to use the checked-out copy of the lookup table, and SAS Intelligent Decisioning enables the Commit lookup option in the menu. When you commit the rule set, all of the checked-out lookup tables that are used in the rule set are also committed. The newly committed versions of the lookup tables are not automatically activated when they are committed. You must activate the newly committed versions of the lookup tables. For more instructions, see “Activate a Lookup Table” on page 137. Rule sets that are not checked out always use the activated versions of lookup tables. If you do not activate the newly committed versions of the lookup tables, all rule sets that use the lookup tables will continue to use the previously activated versions of each table. To cancel the check out of a lookup table, right-click on the LOOKUP or LOOKUPVALUE expression, and select Cancel check out . Committing a Lookup Table Together with a Rule Set If you check out a lookup table from within a rule set and then commit the rule set, the lookup table is also committed. For more information, see “Checking Out and Committing a Lookup Table from within a Rule Set” on page 130. Alternatively, you can check out a rule set that uses a lookup table, open the lookup table in the Lookup tables category view and check it out, then change the reference in the rule set to use the checked-out version of the lookup table. The lookup table is committed when you commit the rule set. The newly committed version of the lookup table is not automatically activated when they are committed. You must activate the newly committed version of the lookup table.",493
340,"143. Concurrently Checking Out and Committing Lookup Table Versions The ability for multiple users to check out the same lookup table at the same time is controlled by the sas.referencedata.checkout.allowConcurrentCheckout configuration option. This option is turned on by default. When this option is turned on, different users can check out the same version of the same object at the same time. Because the objects that are checked out are saved in each user’s My Folder location, the default permissions allow individual users to see only the copies that they have checked out. When this option is turned off and a user has checked out an object, the Check Out button for that object is disabled for all other users. If multiple users check out the same version of the same object at the same time, each user’s changes are preserved in a new version when they commit their changes. One user’s changes do not overwrite another user’s changes. IMPORTANT If two users attempt to commit changes to the same object simultaneously, the first user's attempt will succeed but the second user might see an error message that the commit has failed. If the second user subsequently commits their changes, the Modified By column on the Versions tab for both the version committed by the first user and the version committed by the second user displays the user ID of the second user. Check Out and Commit a Lookup Table Version 1On the Versions tab, click Check Out . SAS Intelligent Decisioning updates the Properties tab to indicate that the version is checked out. 2Modify the checked-out version as needed, and save it. TIP To discard the changes and delete the checked-out version from My Folder , you can commit the object without saving it first. However, committing the object without saving creates a new version of the object whose contents match the contents of the previous version. For information on undoing a check out, see “Undoing a Check Out” on page 132. 3On the Versions tab, click Commit . The Commit Lookup Table Version window appears.Checking Out and Committing Lookup Table Versions 131",416
341,"144. 4Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented, and the minor number is reset to zero. If you select Minor , the number to the right of the period is incremented. 5(Optional) In the Version tags field, enter any version tags that you want to associate with the new version. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / 6(Optional) Enter information about the new version in the Notes field. 7Click Commit . SAS Intelligent Decisioning creates a new version with your changes, and deletes the working copy from your My Folder folder. Determine Who Has a Version Checked Out If the current version of an object is checked out, the IDs of the users that checked it out and the timestamps when each user checked it out appear in the Checked out by field on the Properties tab for the original object. You can also display this information by clicking beside the version number on the Versions tab. Opening the Original Object When you check out an object, SAS Intelligent Decisioning adds the field Original object link to the Properties tab for the checked-out object. This field contains a link to the original object that was checked out. You can use this link to verify that you have checked out the correct version and to compare the original content with the modified content in the checked-out version. Undoing a Check Out If both an object and a decision that uses the object are checked out at the same time, or if you checked out the object from within the decision , click on the object's node in the decision diagram, and select Cancel checkout . You can discard a checked-out version and any changes that you made by deleting the working copy of the version from your My Folder folder if the following conditions are true: nYou have not checked out a decision that uses the object. nThe object was not checked out at the same time as a decision that uses the object, or the object was not checked out from within the decision after the decision was checked out. The deleted version is moved to the recycle bin. See “Delete Lookup Tables” on page 125.132 Chapter 4 / Working with Lookup Tables and Functions",473
342,"145. Managing Version Tags for Lookup Tables Add a Version Tag Version tags enable you to better organize and group your content. Version tags are associated with specific versions of an object and not with the entire object. You can add the same tag to any version of any object. To add a tag to a lookup version: 1On the Versions tab, position your cursor in the Version Tags column for the version that you want to tag. If the version is not tagged, appears. If the version has at least one tag, appears. 2Click to open the New Version Tags window, or click to open the Edit Version Tags window. 3For each tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. TIP To filter the version list based on a tag, right-click on the Version Tags column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 4Click Close to close the window. Remove a Version Tag 1On the Versions tab, position your cursor in the Version Tags column for the version whose tag you want to remove, and click . 2Click beside the tag that you want to remove.Managing Version Tags for Lookup Tables 133",335
343,"146. 3Click OK to close the window. The tag remains in the list of previously entered tags that is displayed when you add a tag, but the tag is no longer associated with version. Modify a Version Tag You cannot modify a version tag that already exists. To change the content of an existing tag, delete the tag as described in “Remove a Version Tag” on page 133, and then add the tag again as described in “Add a Version Tag” on page 133. Activating a Lookup Table What Does Activating a Lookup Table Do? Activating a lookup table makes the table available for use by published objects. By default, when you activate a lookup table, the lookup table is converted into executable code in the form of a SAS Cloud Analytic Services (CAS) format. If your site has a SAS Micro Analytic Service publishing destination, then a SAS Micro Analytic Service module is also created for the table. The CAS format is used when you create and run tests and scenario tests (pre-publishing tests) for the rule sets and decisions that use the lookup tables. The CAS format and SAS Micro Analytic Service module also enable objects that are published to those destination types to use the most recently activated version of a lookup table instead of a static copy. However, your administrator can set configuration options to specify that SAS Intelligent Decisioning includes lookup tables inline in generated code instead of using formats and modules for CAS and SAS Micro Analytic Service destinations. For more information, see “Controlling Where Lookup Tables Are Activated And How They Are Used” on page 135. Teradata, Hadoop, and container destinations do not support the format or module that is created when you activate a lookup table. Objects that are published to these destinations must include a static version of each lookup table. You must activate a version of any lookup table that is used in a rule set or decision. When you activate a version of a lookup table, that version is locked and cannot be edited. Each lookup table can have only one active version. The active version of a lookup table is used in the following ways: nwhen you run a test or scenario test prior to publishing an object. nto generate a static copy of the table when you publish an object if a static copy is needed, such as when you publish the object to Teradata, Hadoop, or container destinations.",480
344,"147. nby published objects in CAS and SAS Micro Analytic Service destinations if the lookupStaticBinding configuration property is set to Off. Controlling Where Lookup Tables Are Activated And How They Are Used Your administrator can use the following configuration options to control where lookup tables are activated and how they are used: sas.referencedata.activation.destinations = destinations specifies the SAS Micro Analytic Service publishing destinations in which lookup tables are activated. Only one SAS Micro Analytic Service destination is supported on localhost . By default, that destination is named maslocal. For more information, see “sas.referencedata.activation.destinations” in SAS Intelligent Decisioning: Administrator’s Guide . sas.referencedata.publish.lookupDisableMasPublish = On | Off controls whether lookup tables are activated in your SAS Micro Analytic Service publishing destination. When this option is set to Off and you activate a lookup table, it is activated in this destination. If this option is set to On, then lookup tables are not activated in this destination, and your administrator must set the sas.businessrules.lookupStaticBinding option to On in order to embed static copies of lookup tables in generated code and ensure that published content executes correctly. For more information, see “sas.referencedata.publish.lookupDisableMasPublish” in SAS Intelligent Decisioning: Administrator’s Guide . sas.businessrules.lookupStaticBinding = On | Off controls whether a static copy of the active version of a lookup table is embedded in the generated code for an object when that object is published. When this option is set to On, a static copy of the active version of any lookup table that is used in an object is embedded in the generated code when those objects are published. When this option is set to Off, a published object’s use of lookup tables depends on the destination to which they were published. nObjects that are published to SAS Cloud Analytic Services (CAS) and SAS Micro Analytic Service destinations use the most recently activated version of lookup tables. nObjects that are published to Teradata and Hadoop destinations cannot use lookup tables. Note: Static versions of lookup tables are automatically embedded in content published to container destinations. This option is ignored for container destinations. For more information, see “sas.businessrules.lookupStaticBinding” in SAS Intelligent Decisioning: Administrator’s Guide .Activating a Lookup Table 135",477
345,"148. TIP To publish very large lookup tables to CAS destinations, set both of the following options to On: nsas.referencedata.publish.lookupDisableMasPublish nsas.businessrules.lookupStaticBindingTable 4.1 Interaction of Lookup Table Configuration Settings sas.referen cedata.pub lish. lookupDisa bleMasPub lishsas.busi nessrule s. lookupS taticBin dingSAS Micro Analytic ServiceCASTeradata and HadoopContainer DestinationsOffOffPublished objects use the most recently activated versions of lookup tables.Published objects use the most recently activated versions of lookup tables.Published objects cannot use lookup tables.Published objects use the embedded versions of lookup tables.OffOnPublished objects use the embedded versions of lookup tables.Published objects use the embedded versions of lookup tables.Published objects use the embedded versions of lookup tables.Published objects use the embedded versions of lookup tables.OnOffDo not use lookup tables. These option settings might produce incorrect results if a lookup table was previously activated in a SAS Micro Analytic Service destination.Published objects use the most recently activated versions of lookup tables.Published objects cannot use lookup tables.Published objects use the embedded versions of lookup tables.OnOnPublished objects use the embedded versions of lookup tables.Published objects use the embedded versions of lookup tables.Published objects use the embedded versions of lookup tables.Published objects use the embedded versions of lookup tables.136 Chapter 4 / Working with Lookup Tables and Functions",296
346,"149. Activate a Lookup Table Activating a lookup table locks it. If you activate the only unlocked version of a lookup table, SAS Intelligent Decisioning automatically creates a new unlocked version. You cannot activate a lookup table that has been checked out. You must commit the changes to the lookup table before you can activate it. To activate the latest version of a lookup table that is not in a folder for which the check-out feature has been enabled, open the lookup table, and click Activate at the top of the window. To activate a specific version of the lookup table, or to activate a lookup table that is in a folder for which the check-out feature is enabled, you must activate the lookup table on the Versions tab: 1Open the lookup table that you want to activate. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2On the Versions tab, select the version that you want to activate, and click Set Version to set it as the displayed version. See “Set the Displayed Version” on page 125 for more information. 3Click Activate . Dictionary LOOKUP Function Determines whether a lookup key exists in a lookup table. Restrictions: You can specify the LOOKUP function only in condition expressions. If an expression contains the LOOKUP function, then the expression cannot contain anything else. Returned data type:BooleanLOOKUP Function 137",306
347,"15. Installing SAS Intelligent Decisioning as a Progressive Web App SAS Intelligent Decisioning must be deployed with TLS and HTTPS enabled. To install SAS Intelligent Decisioning as a PWA: 1Open a Chromium-based web browser and sign in to SAS Intelligent Decisioning . 2Open the web browser’s menu and select Install SAS . Note: The Install SAS option might be located under another menu option. For example, in Microsoft Edge it is located under Apps . SAS Intelligent Decisioning is now installed as a desktop program named SAS. After one web application has been installed as a PWA, all other SAS applications are accessible in the PWA. To uninstall the PWA for SAS Intelligent Decisioning : 1Open the PWA for SAS Intelligent Decisioning . 2In the PWA menu, select Uninstall SAS . Sorting, Searching, and Filtering in Category Views You can search, filter, and sort the list of objects in any category view. Sort Object Lists To sort the object list based on the values of a column, right-click the column heading, and select Sort ð Sort (ascending) or Sort (descending) . If the column is sorted in ascending order, appears beside the column heading. When the column is sorted in descending order, appears. To add another column to the sort, right-click the column heading, and select Add to sort ð Sort (ascending) or Sort (descending) . To clear a column filter, right-click the column heading and select Sort ð Remove sort .6Chapter 1 / Introduction to SAS Intelligent Decisioning",315
348,"150. Syntax LOOKUP ('lookup_table_name ', variable_or_value ) Required Arguments lookup_table_name specifies the name of the lookup table that you want to search. variable_or_value specifies either the literal key value or a variable that contains a lookup key value. Example Suppose you have a Country_Codes lookup table that uses two-letter abbreviations for countries as the lookup key and country names as the lookup values. To verify that the value of the variable Cntry_Key exists as a lookup key in the table Country_Codes, you can use the following expression:LOOKUP('Country_Codes',Cntry_Key) If the value of Cntry_Key exists as a lookup key, the LOOKUP function returns the value True . In the following rule, if the key specified by the variable Cntry_Key exists in the lookup table Country_Codes, then the value that is associated with that key is assigned to the variable Country_Name. LOOKUPVALUE Function Retrieves a lookup value from a lookup table. Restrictions: You can specify the LOOKUPVALUE function only in action expressions.138 Chapter 4 / Working with Lookup Tables and Functions",228
349,"151. If an expression contains the LOOKUPVALUE function, then the expression cannot contain anything else. Returned data type:CHARACTER, INTEGER, DECIMAL, DATE, DATETIME, BOOLEAN Tip: Lookup tables are stored as character data. However, you can assign the results of the LOOKUPVALUE function to any of the returned data types. The LOOKUPVALUE function converts the results to match the type of the variable. Syntax LOOKUPVALUE ('lookup_table_name ', variable_or_value ) Required Arguments lookup_table_name specifies the name of the lookup table that you want to search. variable_or_value specifies either the literal key value or a variable that contains the lookup key value. Example Suppose you have a Country_Codes lookup table that uses two-letter abbreviations for countries as the lookup key and country names as the lookup values. The Country_Codes lookup table contains the lookup key CA , and the lookup value that corresponds to that key is Canada . If the Cntry_Key variable in the current input record contains the value CA , you can use the following expression to retrieve the lookup value that is associated with that key from the table Country_Codes:LOOKUPVALUE('Country_Codes',Cntry_Key) In the following rule, if the key specified by the variable Cntry_Key exists in the lookup table Country_Codes, then the value that is associated with that key is assigned to the variable Country_Name.LOOKUPVALUE Function 139",291
350,152. 140 Chapter 4 / Working with Lookup Tables and Functions,14
351,153. 5 Managing Global Variables Using Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141 Create a New Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142 Managing Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143 Duplicate a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143 Remove a Global Variable from the List . . . . . . . . . . . . . . . . . . . . . . .,268
352,. . . . . . . . . . . . . . . . 143 Edit a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 Managing Versions of Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 Set the Displayed Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 Create a New Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 Delete a Version . . . . . . . . . . . . . . . . . .,266
353,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145 Determine Which Objects Use a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146 Managing Version Tags for Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146 Add a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146 Remove a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 Modify a Version Tag . . . . . . . . . . . . .,268
354,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 Manage the Global Variable Recycle Bin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 Activating a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148 What Does Activating a Global Variable Do? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148 Controlling Where Global Variables Are Activated and How They Are Used . . . . . 149 Activate a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
355,"154. TIP You cannot use global variables in models in SAS Model Manager. You can pass the value of a global variable into a model by mapping a model input parameter to a global variable. For more information, see “Mapping Variables within a Decision” on page 247. After you create and activate a global variable, you can add it to the Global Variables tab of a rule set or a decision. You can use global variables in conditional expressions, but you cannot modify the value of a global variable in a rule set or in a decision. When you add a rule set that uses a global variable to a decision, SAS Intelligent Decisioning creates a decision variable with the same name as the global variable. When you test the decision, SAS Intelligent Decisioning assigns the current value of the global variable to the decision variable. When you run a published decision, the value that is assigned to the decision variable depends on the destination type. For information, see “Content Executed by Published Decisions” on page 309. When you add a common rule set to an assignment rule set and the common rule set uses global variables, you must manually add the global variables to the assignment rule set. Note: The decision variable is not a global variable, but it has the same name and value as the global variable. For more information about decision variables, see “About Decision Variables and Mapping” on page 247. For more information, see “Add Global Variables to a Rule Set” on page 19 and “Add Global Variables to a Decision” on page 225. Create a New Global Variable 1Click to navigate to the Global Variables category view. 2Click New Global Variable . SAS Intelligent Decisioning displays the New Global Variable window. 3Enter a name for the variable. 4(Optional) Enter a description for the new global variable. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 5Select the variable’s data type. 6Enter a value for the variable. To enter a value for a date or datetime variable, click or , and select the value in the date or datetime picker. 7Click Save to create the variable.142 Chapter 5 / Managing Global Variables",455
356,"155. Managing Global Variables Duplicate a Global Variable To duplicate a single global variable: 1Select the variable that you want to duplicate, click , and select Duplicate . 2Enter a new name for the duplicate global variable. Names are limited to 250 characters. Global variable names are case insensitive and must be unique within the database. 3(Optional) Enter a description for the duplicate variable. Descriptions are limited to 1000 characters. 4Select the version of the global variable that you want to duplicate. 5Click Duplicate . To duplicate multiple global variables, select the variables that you want to duplicate, click , and select Duplicate . SAS Intelligent Decisioning duplicates the latest version of the global variables and appends -Copy to the names of the duplicate copies. If needed, a number is also appended to the duplicate variable names. Remove a Global Variable from the List You cannot publish an object that uses a global variable that has been removed from the list. In the Global Variables category view, select the variables that you want to remove, click , and select Delete . SAS Intelligent Decisioning moves the deleted global variables to the global variables recycle bin. See “Manage the Global Variable Recycle Bin” on page 147 for more information. TIP A global variable that has been removed from the list might be referenced in objects that have already been published. To remove references to global variables from a published object, you must republish the object.Managing Global Variables 143",296
357,"156. Edit a Global Variable You cannot edit a global variable version that has been activated, and you cannot rename a global variable. To edit the description or value of the most current version of a global variable, click on the variable in the Global Variables category view. Managing Versions of Global Variables Set the Displayed Version The displayed version is the version whose information is displayed on the Properties tab. On the Versions tab, a in the Displayed Version column indicates the displayed version. To change the displayed version, click the version number for the version that you want to view. The displayed version is shown in the title bar. Create a New Version Note: For objects that are stored in locations for which the check-out and commit feature is enabled, you cannot manually create a new version. The only way to create a new version is to check out an existing version and commit a new version. For information, see “Check Out and Commit a Lookup Table Version” on page 131. Note: The current version of an object is the version with the highest version number. When you create a new version, SAS Intelligent Decisioning locks the current version before it creates the new version. IMPORTANT You cannot unlock a locked version. You cannot save changes to a version that is locked. If you modify a version that is locked and click , SAS Intelligent Decisioning asks you if you want to replace the current unlocked version with your edited version. To manually create a new version: 1On the Versions tab, click the version number for the existing version that you want to use as the basis for the new version.144 Chapter 5 / Managing Global Variables",328
358,"157. 2Click New Version . The New Version window appears. 3Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented. If you select Minor , the number to the right of the period is incremented. 4(Optional) For each version tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Note: A tag is limited to 100 characters. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. 5(Optional) Enter information about the new version in the Notes field. TIP You can edit these notes at any time on the Versions tab. 6Click Save . Delete a Version IMPORTANT When you delete a specific version, that version is deleted permanently. It is not moved into the recycle bin, and it cannot be restored. Note: In order to be able to delete a specific version of an object, you must have permission to delete the object itself. On the Versions tab, select the version that you want to delete, click , and select Delete . You cannot delete the current version.Managing Versions of Global Variables 145",277
359,"158. Determine Which Objects Use a Global Variable On the Global variables category page, select the check box for the global variable, click , and select View used by report . The All Objects that Use the Selected Item window appears. This window lists all objects that use any version of the selected global variable. In the report, you can use the Filter field to filter the list of objects based on the object names. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Managing Version Tags for Global Variables Add a Version Tag Version tags enable you to better organize and group your content. Version tags are associated with specific versions of an object and not with the entire object. You can add the same tag to any version of any object. To add a tag to a global variable version: 1On the Versions tab, position your cursor in the Version Tags column for the version that you want to tag. If the version is not tagged, appears. If the version has at least one tag, appears. 2Click to open the New Version Tags window, or click to open the Edit Version Tags window. 3For each tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ /146 Chapter 5 / Managing Global Variables",395
360,"159. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. TIP To filter the version list based on a tag, right-click on the Version Tags column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 4Click Close to close the window. Remove a Version Tag 1On the Versions tab, position your cursor in the Version Tags column for the version whose tag you want to remove, and click . 2Click beside the tag that you want to remove. 3Click OK to close the window. The tag remains in the list of previously entered tags that is displayed when you add a tag, but the tag is no longer associated with version. Modify a Version Tag You cannot modify a version tag that already exists. To change the content of an existing tag, delete the tag as described in “Remove a Version Tag” on page 147, and then add the tag again as described in “Add a Version Tag” on page 146. Manage the Global Variable Recycle Bin To open the recycle bin in the Global Variables category view, click Open and select Recycle bin . To restore an item from the recycle bin, right-click on the item in the recycle bin, and select Restore . To permanently delete an item, right-click on the item in the recycle bin, and select Delete . The item is deleted from the recycle bin and cannot be restored.Manage the Global Variable Recycle Bin 147",329
361,"16. Search Object Lists To search the Name column, enter the string for which you want to search in the search field above the object list, and click . The search is case insensitive. To clear the search text, click . TIP See also “Searching for Objects in a Decision Diagram” on page 251. Filter Object Lists To filter the view, click Filter , enter or select the filter criteria in the Filter window, then click Filter . SAS Intelligent Decisioning filters the object list and displays a token for each filter criteria. For example: TIP If you specify a folder location as part of the filter criteria, the filter searches the selected folder and recursively searches all of its subfolders. The node count for a decision does not include any nodes that are in nested decisions. Filters remain in effect until you remove them. To remove a specific filter, click for that filter. To remove all filters, click at the right of all of the filter tokens. Manage Saved Filters You can save a filter, and then reapply that filter to a category view later without having to redefine the filter criteria. You can save up to 10 filters. To save a filter: 1Do one of the following: nFilter the object list as described in “Filter Object Lists” , click beside the Filter button, and then click Save filter . nClick Filter , enter or select the filter criteria in the Filter window, and then click Save filter . The Save Filter window appears. 2Enter a name for the filter. Filter names are limited to 100 characters and can contain only alphanumeric characters and underscores (_).Sorting, Searching, and Filtering in Category Views 7",334
362,"160. Activating a Global Variable What Does Activating a Global Variable Do? Activating a global variable makes that variable available for use by published objects. Published objects can use only activated versions. By default, when you activate a global variable, the value of the global variable is included inline in code that is generated when you publish rule sets and decisions. However, this behavior is controlled by the inlineGlobalVariables configuration options that your administrator can set. If these configuration options are set to Off, then when you activate a global variable, the global variable is converted into executable code in the form of a SAS Cloud Analytic Services (CAS) format. If your site has a SAS Micro Analytic Service publishing destination, then a SAS Micro Analytic Service module is also created for the variable. The CAS format and SAS Micro Analytic Service module enable objects that are published to those destination types to use the most recently activated version of a global variable instead of using a static copy. The active version of a global variable is the version that is used when you run basic tests, scenario tests, and publishing validation tests for a rule set or decision that uses the global variable. Teradata, Hadoop, and container destinations do not support the format or module that is created when you activate a global variable. Objects that are published to these destinations always include a static version of each global variable. Note: In multi-tenant environments, each tenant has its own global variables that are unique to that tenant. You must activate a version of any global variable that is used in a rule set or in a decision. When you activate a version of a global variable, that version is locked and cannot be edited. Each global variable can have only one active version. The active version of a global variable is used in the following ways: nto generate a static copy of the variable when you publish an object if a static copy is needed, such as when you publish the object to Teradata, Hadoop, or container destinations. Static copies are always generated for these destinations. nby published objects in CAS and SAS Micro Analytic Service destinations if the inlineGlobalVariableValues configuration properties are set to Off. See “Controlling Where Global Variables Are Activated and How They Are Used” on page 149 for more information.148 Chapter 5 / Managing Global Variables",467
363,"161. Controlling Where Global Variables Are Activated and How They Are Used Your administrator can use the following configuration options to control how global variables are used: sas.businessrules.inlineGlobalVariableValues = On | Off specifies whether the current values of global variables are included inline in generated code when you publish a rule set to CAS or SAS Micro Analytic Service destinations. sas.decisions.inlineGlobalVariableValues = On | Off specifies whether the current values of global variables are included inline in generated code when you publish a decision to CAS or SAS Micro Analytic Service destinations. When these properties are set to On, the current value of each global variable is included in the code that is generated for CAS and SAS Micro Analytic Service destinations. Changes to the values of the variables do not affect published objects. When these properties are set to Off, the generated code uses a SAS format or a SAS Micro Analytic Service module to retrieve the current value of the global variable when the rule set or decision is run. Note: Static versions of global variables are automatically embedded in content that is published to Teradata, Hadoop, and container destinations. These options are ignored for those destinations. Activate a Global Variable Activating a version of a global variable locks that version. Locked variables cannot be unlocked. You must activate a global variable before you can publish an object that uses the variable. When you activate a global variable, it is activated in all of the publishing destinations that are configured at your site. Published rule sets and decisions use activated versions of global variables. The version varies according to the destination type. For more information, see “Content Executed by Published Decisions” on page 309 and “Content Executed by Published Rule Sets” on page 79. 1Open the global variable that you want to activate. 2On the Versions tab, select the version that you want to activate, and click Activate . 3Click Save to close the Edit Global Variable window.Activating a Global Variable 149",401
364,162. 150 Chapter 5 / Managing Global Variables,11
365,163. 6 Using Custom Code Files Introduction to Custom Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 DS2 Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 Rules for Creating DS2 Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 Example: Custom DS2 Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154 Testing DS2 Code Files in SAS Studio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,273
366,. . . . . . . . . 155 Python Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157 About Publishing Destinations and Python Distributions . . . . . . . . . . . . . . . . . . . . . . . . 157 Rules For Developing Python Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157 Required Dependencies For Python Files in SAS Container Runtime Destinations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158 Data Query Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
367,. . . . . . . . . . . . . . . . 159 Using Data Query Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159 Query Output Types and Editors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160 Developing SQL Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160 Decision Variables for Data Query Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 161 Using Macro Variables in SAS Studio . . . . . . . . . . . . . . . . . . . . . . . . . .,267
368,". . . . . . . . . . . . . . . 162 Handling Table and Column Names in Data Query Files . . . . . . . . . . . . . . . . . . . . . . . 163 Custom Context Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163 Using Custom Context Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163 Adding an INIT Method to a Custom Context File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 Associating a Custom Context File with a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 Testing or Validating a Rule Set, DS2 File, or Custom Function . . . . . . . . . . . . . . . . .",280
369,165 Referencing a Function That Is Defined in a Context File . . . . . . . . . . . . . . . . . . . . . . 165 Referencing a Variable That Is Defined in a Context File . . . . . . . . . . . . . . . . . . . . . . . 166 Create a New Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167 Managing the Variables in a DS2 or Python Code File . . . . . . . . . . . . . . . . . . . . . . . . . 168 About Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 Syncing Variables and Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,278
370,164. Duplicate a Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173 Importing and Exporting Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174 Delete Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175151,181
371,"165. Edit Variable Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 Edit Metadata for Data Grid Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 Validate SQL, DS2, or Context Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 Copy a Code File URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176 Compare Generated Code for Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",269
372,. 176 Managing Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177 Duplicate Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177 Delete Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 Rename a Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 Move Code Files to a Different Folder . . . . .,265
373,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 Managing Versions of Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 Set the Displayed Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 Create a New Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179 Copy the Content of a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,262
374,180 Delete a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180 Upgrade Decisions to Use a New Version of a Code File . . . . . . . . . . . . . . . . . . . . . . . 181 Determine Which Objects Use a Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181 Checking Out and Committing Code File Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182 About Checking Out and Committing Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182 Checking Out a Code File from within a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183 Concurrently Checking Out and Committing Code File Versions . . . .,284
375,. . . . . . . . . . . . 184 Check Out and Commit a Custom Code File Version . . . . . . . . . . . . . . . . . . . . . . . . . . 184 Determine Who Has a Version Checked Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 Opening the Original Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 Undoing a Check Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 Managing Version Tags for Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 Add a Version Tag . . . . . . . . . . .,274
376,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 Remove a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 Modify a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187 Testing Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187 Ways to Test a Code File . . . . . . . . . . . . . . . . . . . . .,263
377,"166. Ways to Test a Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187 Test a Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188 Test a Scenario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190 Working with Test Output Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194 Status Icons for Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 194 Manage Comments for a Code File Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195 Introduction to Custom Code Files You can define custom code files to do things that are not possible in rules, models, or treatments. For example, you can define a code file that makes HTTP calls to REST APIs, interacts with a database, manipulates files in the file system, or performs custom data transformations. You can use custom context files to define functions that you can use in rule sets, in custom DS2 code files, and in custom functions that are defined in the Custom Functions category.152 Chapter 6 / Using Custom Code Files",465
378,"167. IMPORTANT You are responsible for ensuring that only users who are authorized to do so can install Python libraries, develop, and test code nodes that use SQL or Python, and execute decisions that use custom code nodes. IMPORTANT All changes that you make to a code file affect all unpublished decisions that use that file. For more information, see “Content That Is Used by Tests and Scenarios for Decisions” on page 303 and “Content Executed by Published Decisions” on page 309. Note: Not all of the code that you can write in a custom code file will work in all publishing destinations or in decision tests. For information about adding a custom code file to a decision, see “Adding Objects to a Decision” on page 230. DS2 Code Files Rules for Creating DS2 Code Files When you are developing your DS2 package, follow these rules: nDo not change the package name in the PACKAGE statement:package ""${PACKAGE_NAME}"" /inline; This line must appear exactly as shown and must begin in column one of the code file. The token is replaced with a package name that SAS Intelligent Decisioning uses to maintain the relationship between the code file and the decisions that use it. nIf your custom DS2 code file defines multiple packages, the packages that are used by the ${PACKAGE_NAME} package must be defined before the ${PACKAGE_NAME} package. nDo not specify any DS2 options (DS2_OPTIONS statement) in your package code. nCustom DS2 code files in SAS Intelligent Decisioning support only three data types: double, varchar, and package datagrid. These data type names are case sensitive. List input-only parameters first. List input-output and output-only parameters next, using the in_out modifier. Do not specify a length for input- output and output-only parameters. The length for these parameters is derived from the variables that are passed into the method. For example, the following lines define the variables LOAN, REASON, and ASSETS.package datagrid ""assets"" DS2 Code Files 153",413
379,"168. double ""loan""IN_OUT varchar ""reason"" IMPORTANT Before you validate a DS2 code file or custom context file that uses a data grid package, verify that the declaration statements for the package specify datagrid instead of dcm_datagrid . For example:in_out package datagrid variable;dcl package datagrid variable; Note: Packages are input-output data types. nYour package must define an EXECUTE method. nThe variables that you use as parameters for the EXECUTE method in your code must be mapped to input variables in your decision. nDo not enter comments within the signature of the method parameters in your code file. The comment characters cause the signature to be parsed incorrectly. nTo query a database, use a custom data query file instead of using a DS2 SQLSTMT package in a DS2 code file. For information, see “Data Query Files” on page 159. nCustom DS2 code files are executed by using the runDS2 CAS action. This action supports varying-length binary variables, but it does not support binary variables. For information about developing DS2 packages, processing data grids, and the SAS APIs, see the following: nSAS DS2 Programmer’s Guide nSAS DS2 Language Reference nSAS Intelligent Decisioning: Using Data Grids n“Reserved Words in the DS2 Language” in SAS DS2 Programmer’s Guide nhttp://developer.sas.com n“DS2 Programming for SAS Micro Analytic Service” in SAS Micro Analytic Service: Programming and Administration Guide n“Best Practices for DS2 Programming in SAS Intelligent Decisioning” in SAS Micro Analytic Service: Programming and Administration Guide Example: Custom DS2 Code File The following DS2 package sends a request to the external API http:// helloacm.com/api/fortune . This API returns a character string that contains escaped characters. The GETFORTUNE method uses the DS2 function TRANSTRN to modify these characters.package ""${PACKAGE_NAME}"" /inline; dcl package http fortune_pkg(); 154 Chapter 6 / Using Custom Code Files",417
380,"169. dcl varchar(1048576) character set utf8 http_response; dcl int rc; dcl int getMethodDefined; method execute(in_out varchar ""fortune"");   if missing(getMethodDefined) then do; /* establish GET method */   fortune_pkg.createGetMethod('http://helloacm.com/api/fortune');   ""getMethodDefined"" = 1;  end;  ""fortune"" = 'Gloom and Doom'; /* default fortune */  fortune_pkg.executeMethod();  fortune_pkg.getResponseBodyAsString(http_response, rc);  if (rc = 0) then do; /* clean up escaped characters in the response */   ""fortune"" = transtrn(http_response,' ',' ');   ""fortune"" = transtrn(""fortune"",'\t',' ');   ""fortune"" = transtrn(""fortune"",'\""','""');  end; end;endpackage; Testing DS2 Code Files in SAS Studio Note: If your custom code uses data grid variables, see “Working with Data Grids in SAS Studio” in SAS Intelligent Decisioning: Using Data Grids . If your DS2 custom code file uses functions that are defined in a custom context file, insert the packages that are defined in the custom context file before the DS2 code file package. Replace the placeholder name ${PACKAGE_NAME} with a valid DS2 package name. To test your package in a separate DS2 invocation from where the calling program is running, replace the inline modifier with overwrite=yes .proc ds2; package ""testCustomCode"" /overwrite=yes;  method execute(double l, double w, double h, double d,      in_out double vol, in_out double wgt);   vol = l * w * h;   wgt = vol * d;  end; endpackage;run; quit; In the following example, the package is compiled in the same PROC DS2 invocation as the DS2 data program that instantiates the package, so the code specifies the /inline package modifier./* Create test data. */data work.testdata; length material $13; DS2 Code Files 155",431
381,"17. 3(Optional) Enter a description of the filter. 4Click Save and filter to save the filter and apply the filter to the object list. To apply a saved filter to a category’s object list, click beside the Filter button, and select the filter that you want to use. If the filter specifies criteria that do not apply to the current object list, those criteria are ignored. For example, if you apply a filter that specifies a criterion for location to the Global Variables category view, that criterion is ignored. To edit a saved filter: 1Apply the saved filter, and click Filter to open the Filter window. 2Edit the filter criteria, and click Save filter . To delete a saved filter, click beside the Filter button, and click for the filter that you want to delete. SAS Intelligent Decisioning Settings In addition to the global settings that are available with SAS Viya applications, SAS Intelligent Decisioning provides two additional settings. To access these settings, click the user icon in the top right corner of the application window, select Settings to open the Settings window, and click SAS Intelligent Decisioning . nBy default, if you add an object to a decision and that decision does not already have a variable of the same name and data type as that object’s variable, then SAS Intelligent Decisioning displays the following message: Some objects in the decision define variables for which no corresponding decision variables have been created. You can turn on the Create variables automatically in decisions setting if you want SAS Intelligent Decisioning to automatically create decision variables. For more information, see “Mapping Variables within a Decision” on page 247. nWhen you edit custom functions, custom code files, and rule expressions, the editor can display a list of SAS functions, custom functions, and variables whose names match the letters that you type (an autocomplete list is displayed). By default, the editor displays SAS function names and custom function names in the autocomplete list. You can control what is displayed in this list by selecting or clearing the check boxes for SAS functions , Custom functions , and Variables . If you clear all three check boxes, SAS Intelligent Decisioning does not display the autocomplete list. Note: In order for changes to settings to take effect, you must sign out and sign back in to SAS Intelligent Decisioning .8Chapter 1 / Introduction to SAS Intelligent Decisioning",473
382,"170. long=40; wide=20; high=10; density=0.098; material = 'aluminum'; output; long=20; wide=10; high=4; density=0.284; material = 'iron';  output;run; proc ds2; /* Replace the placeholder name with a package name. */ package ""testCustomCode"" /inline;  method execute(double l,      double w,      double h,      double d,    in_out double vol,    in_out double wgt);   vol = l * w * h;   wgt = vol * d;  end; endpackage;/* Use a DS2 data program to execute the custom code. */ data _null_;  dcl package testCustomCode myCustomCode(); /* Instantiate the package. */  dcl double volume;  dcl double weight;  method run();   /* Read in the variables long, wide, high, and density. */   set work.testdata(drop=(material));   volume = .;   weight = .;   myCustomCode.execute(long, wide, high, density, volume, weight);   put _all_;  end; enddata;run; quit; 156 Chapter 6 / Using Custom Code Files",261
383,"171. Python Code Files About Publishing Destinations and Python Distributions IMPORTANT You can publish decisions that contain Python code files only to SAS Micro Analytic Service destinations, SAS Cloud Analytic Services (CAS) destinations, and container destinations. When you publish a decision that contains a Python code file, SAS Intelligent Decisioning generates a private DS2 PyMAS package. The package is assigned a random name. Your Python program is encapsulated inside a DS2 EXECUTE method. When the decision is executed, the DS2 process sends the Python program to a Python process to be executed. In SAS Micro Analytic Service and CAS destinations, an executing decision uses the Python distribution that is installed at your site. In container destinations, executing decisions use the Python base image that is included in the published container. For information about the Python base image that is included in published containers, see “About a SAS Container Runtime Image” in SAS Container Runtime: Programming and Administration Guide . For information about the standard libraries that are distributed with specific versions of Python, see https:// docs.python.org . Rules For Developing Python Code Files When you are developing your Python code, follow these rules: nYour Python code must define an EXECUTE function. This function is the only public function allowed. nAn Output: docstring is required. This string must immediately follow the Python EXECUTE function declaration, and it must be indented within the EXECUTE function definition. In the docstring, list all of the output variables produced by the program. For example, if your program has two output variables named prediction and probability , your docstring would appear as follows:'''Output: prediction, probability''' nIf your Python code uses packages that are not built-in packages, list these packages in the DependentPackages: docstring. For more information, see “Required Dependencies For Python Files in SAS Container Runtime Destinations” on page 158. nOptional input arguments to the Python EXECUTE function are not supported.Python Code Files 157",399
384,"172. nYou must specify the data types for the input and output variables for the EXECUTE function in your Python code on the Variables tab of the decision. The DS2 package code uses this information to resolve the data types for the variables. These variables are specified in the signature of the DS2 EXECUTE method. If you add a Python code file to a decision and you have not specified the variables on the Variables tab, SAS Intelligent Decisioning might display the following message: Some objects in the decision define variables for which no corresponding decision variables have been created. For more information, see “About Decision Variables and Mapping” on page 247. nThe Python EXECUTE function must return standard Python data types. For more information, see “Return Values ” in SAS Micro Analytic Service: Programming and Administration Guide . nYou can import modules and define other functions and classes that are used by the Python EXECUTE function. nTest your Python code by using a Python interpreter that is outside of SAS Intelligent Decisioning before you incorporate your code into a decision. IMPORTANT After you test your code outside of SAS Intelligent Decisioning , incorporate it into a decision and test the decision. In order to run a test for a decision that contains a Python code file, you or an administrator must configure support for Python. See “Configuring Support for Python Code Files” in SAS Intelligent Decisioning: Administrator’s Guide for more information. For more information about using Python with DS2, see the following: n“Python Support in SAS Micro Analytic Service” in SAS Micro Analytic Service: Programming and Administration Guide n“Executing Python Modules in DS2 Modules” in SAS Micro Analytic Service: Programming and Administration Guide TIP If you encounter errors that are unrelated to syntax or logic, check with your administrator to verify that Python is configured correctly. For additional information, see “Configuring Support for Python Code Files” in SAS Intelligent Decisioning: Administrator’s Guide . Required Dependencies For Python Files in SAS Container Runtime Destinations If you plan to publish a decision that includes a Python code file to a SAS Container Runtime destination, and if your Python file uses packages that are not built-in packages, list these packages in the DependentPackages: docstring. List all of the package names on a single line. Use the official package names. Separate the package names with commas. For example:'''DependentPackages: sklearn, requests, dateutil''' 158 Chapter 6 / Using Custom Code Files",497
385,"173. When you publish the decision, SAS Intelligent Decisioning passes the name and pip3 install command for each package to the model publish service. The model publish service uses this information to install the packages in the container that is published to the destination. For information about the Python base image that is included in published containers, see “About a SAS Container Runtime Image” in SAS Container Runtime: Programming and Administration Guide . Note: Do not specify package aliases or the names of built-in packages in this docstring. If you include the name of a built-in package or of a package alias, SAS Intelligent Decisioning writes the following message to the log when you publish the decision:ERROR: No matching distribution found for name Verify whether a package is built in to the Python distribution that will be used by the executing decision before you add a package name to this docstring. Verify that the docstring is correct by running a publishing validation test for your decision before you deploy your decision in a production environment. For information about the standard libraries that are distributed with specific versions of Python, see https:// docs.python.org . Data Query Files Using Data Query Files A query enables you to extract data from one or more tables according to criteria that you specify. When you create the query, you can choose which editor you want to use to create the file. Your choice of editor affects whether the data query can return scalar variables. For more information, see “Query Output Types and Editors” on page 160. IMPORTANT You can publish decisions that contain data query files to SAS Micro Analytic Service destinations or to container destinations. For SAS Micro Analytic Service destinations, you can query only the data sources that are supported by SAS Micro Analytic Service. For more information, see “Data Sources Supported for Use with SAS Micro Analytic Service” in SAS Micro Analytic Service: Programming and Administration Guide . In container destinations, Oracle is the only database that can be queried by using data query files. In order to test decisions that contain data query files, an administrator must configure support for SQL query files. See “Configuring Support for Data Query Files” in SAS Intelligent Decisioning: Administrator’s Guide .Data Query Files 159",440
386,"174. IMPORTANT Tests that are running in SAS Intelligent Decisioning might encounter a significant performance impact. Pre-publish testing requires SAS Intelligent Decisioning to convert the SQL code to use HTTP protocol and instantiate a MAS module for each call to the SQL package. These actions incur a significant performance impact and create a limitation on the size of the results table. When you test a decision that uses a data query node, use an input data set that is as small as possible. Query Output Types and Editors When you create a new data query file, you can choose to create the file in the SQL editor or in SAS Studio. Files that are created in the SQL editor can return either a data grid or a single row of scalar variables. You can select the output type on the Properties tab of the data query file. Files that are created in SAS Studio are created as stand-alone queries. These files return a data grid. Do not change the output type for these files. For more information, see “Understanding the Differences between a Stand-Alone Query and a Flow Query” in SAS Studio: User’s Guide . For information about data grids, see SAS Intelligent Decisioning: Using Data Grids . Developing SQL Code When you are developing your SQL code, follow these rules: nData query nodes support SELECT, INSERT, UPDATE, and DELETE statements. They do not support any data definition language (DDL) statements such as ALTER or DROP that alter the structure of the table. nData query nodes support only the following data types: decimal, string, date, datetime, and integer. You must specify a length for string variables. You cannot specify a length for other variable types. Specify input variables with a question mark (?). Use the AS keyword to specify the input and output variables in the decision as aliases for the database column names. Enclose the decision variable specifications in braces ({}). For example, in the following SELECT statement, DEBTRATIO, CAUSE, and BADLOAN are decision variables. The variable BADLOAN is an input variable in the decision.",412
387,"175. Note: You can read data from native SQL date and datetime variables. However, do not rely on the accuracy of data that contains fractional seconds. nDo not use an asterisk (* ) to select database columns. SAS Intelligent Decisioning does not have any metadata about the table, so it cannot determine what columns are in the table. nWhen you create a new data query file, SAS Intelligent Decisioning adds the comment /* include sqlReturnInfo */ to the file. This comment enables SAS Intelligent Decisioning to define metadata for the query’s variables. Do not delete this line if you want SAS Intelligent Decisioning to create all of the metadata. For more information, see “Decision Variables for Data Query Files” on page 161. nWhen you create data query files in SAS Studio, you must specify the PROC FEDSQL output option on the Output Options tab in SAS Studio. For more information, see “Generating a FedSQL Query” in SAS Studio: User’s Guide . For additional information about developing SQL code, see the following topics: nFor information about the data sources that are supported by SAS Micro Analytic Service, see “Data Sources Supported for Use with SAS Micro Analytic Service” in SAS Micro Analytic Service: Programming and Administration Guide . nFor syntax information about SQL statements, see “FedSQL Statements” in SAS FedSQL Language Reference . nFor the list of reserved words in FedSQL, see “FedSQL Reserved Words” in SAS Viya Platform: FedSQL Programming for SAS Cloud Analytic Services . nFor information about the functions that are supported in SQL code, see “FedSQL Functions” in SAS FedSQL Language Reference . nFor information about using SAS Studio to create queries, see “Creating a Stand-Alone Query” in SAS Studio: User’s Guide and “Using Macro Variables in SAS Studio” on page 162. Decision Variables for Data Query Files When you create a data query file, SAS Intelligent Decisioning automatically adds the comment /* include sqlReturnInfo */ . When this comment is present and you add the data query file to a decision, SAS Intelligent Decisioning defines the metadata for decision variables for the return code, row count, and query output. If this comment is not present, SAS Intelligent Decisioning defines metadata for only the query output. You can use the Add missing variables option to add these variables to the decision and map these decision variables to the query’s variables.",489
388,"176. Table 6.1 Variables for Query Files Query File VariableDecision VariableDescriptionfile_name _retur nCode_outreturnCodeThe return code that is generated by the query file.file_name _row Count_outrowCountThe number of rows returned by the query.file_name _out dgoThe data grid variable that contains the output of the data query. The lengths of character columns in the data grid are determined by the lengths of the character variables that are specified in the SELECT statement. Note: This variable is created only if the query selects data. If the comment is present but the query does not select data, SAS Intelligent Decisioning creates only the return code variables. If you remove the comment and the query selects data, only the output variables are created. If you remove the comment and the query does not select data, no variables are created. Using Macro Variables in SAS Studio When you author a data query file in SAS Studio, you can pass input data to the decision by using macro variables. When you add the data query file to a decision, SAS Intelligent Decisioning creates decision variables that have the same name as the macro variables. When the decision executes, the values of the decision variables are set to the same values as the macro variables. To define the macro variable in SAS Studio, open a SAS Program tab and submit the %LET statement. For example, the following statement defines the macro variable &myName:%let myname = 'Arinya' To use the macro variable in the Query tab, reference it with an ampersand followed by the macro variable name:SELECT name FROM table WHERE name = &myname When you create a filter expression, set the appropriate options so that SAS Studio recognizes the macro variable. The settings depend on whether the variable is character or numeric. nIf the macro variable is numeric, check the Allow macros check box. nIf the macro variable is character, check the Match Case check box, and clear the Quote Strings check box.162 Chapter 6 / Using Custom Code Files",406
389,"177. You can use custom SQL code for your data query instead of using a quick filter. However, SAS Intelligent Decisioning cannot determine the variable’s data type when it is creating the decision variable. SAS Intelligent Decisioning assumes that the variable is a numeric unless its name ends with char or string . The char and string suffixes are not case sensitive. For more information, see “Filtering Data” in SAS Studio: User’s Guide and “Macro Variables Defined by Users” in SAS Macro Language: Reference . Handling Table and Column Names in Data Query Files FedSQL performs case folding to make all table and column names uppercase if they are not enclosed in quotation marks. This case folding might cause issues with databases that perform case folding on unquoted references to make them lowercase. To avoid issues with running your query code in both SAS Studio and in SAS Intelligent Decisioning , do the following nIn SAS Studio, if you refer to a table column by using a table alias in a JOIN, WHERE, or HAVING clause, do not enclose the table alias in quotation marks. Alternatively, you can refer to the column by using only the column name or by using the full table name instead of the alias. nWhen you define a libref in SAS Studio to connect to your PostgreSQL database, set the PRESERVE_COL_NAMES and PERSERVE_TAB_NAMES options on the LIBNAME statement to Yes. For additional information, see “PRESERVE_COL_NAMES= LIBNAME Statement Option” in SAS/ACCESS for Relational Databases: Reference and “PRESERVE_TAB_NAMES= LIBNAME Statement Option” in SAS/ACCESS for Relational Databases: Reference . nSet the SAS Intelligent Decisioning configuration option quoteStudioQueryIdentifiers to On. For additional information, see “sas.decisions.codefiles.quoteStudioQueryIdentifiers” in SAS Intelligent Decisioning: Administrator’s Guide . Custom Context Files Using Custom Context Files A custom context file is a custom DS2 package file in which you can define context functions that you can use in rule sets, in DS2 code files, and in custom functions that are defined in the Custom Functions category. When SAS Intelligent Decisioning generates the code for a decision, each context function is defined only once in the generated code. You can test or validate rule sets, DS2 code files, and custom functions that use context functions before you publish them. In a production environment, you can Custom Context Files 163",491
390,"178. reference the functions that are defined in a custom context file only from decisions. Rule sets that are published independently (outside of a decision) cannot use context functions. At run time, the custom context can hold information in internal variables about the record that is being processed. This information can be shared with other nodes by calling functions that are defined in the context file. Custom context files that are specified in nested decisions are ignored. You must specify the custom context file in the parent decision. A nested decision cannot use a custom context file that is different from the custom context file that is used by the parent decision. The parent decision’s context file is used to resolve all references to context functions. To create a custom context file, select Custom context for the file type in Step 4 of “Create a New Code File” on page 167. Note: In container destinations, Oracle is the only database that can be queried by using custom context files that contain SQL queries. Adding an INIT Method to a Custom Context File You can add an INIT method to your custom context files. By adding an INIT method, you can initialize variables before the first row of data is processed by the decision. The INIT method is executed the first time the custom context file is executed for the decision. The method is executed only once per thread. For example, the following code creates a custom context file with an INIT method that initializes a hash:package CustomContext; dcl varchar(1024) ctxtKey; dcl varchar(1024000) ctxtValue; dcl package hash context; method init();  context = _new_ hash([ctxtKey],[ctxtValue],0, '', '', '', '', 'MULTIDATA'); end; ...endpackage; Associating a Custom Context File with a Decision You can specify a custom context file for decisions that are published to SAS Micro Analytic Service destinations and specify a different context file for decisions that are published to other destinations. You do not need to specify a file for both destination types unless the content differs between the two files. 1Open the decision, and click the Properties tab. 2Specify a custom context file in one or both of the following fields:164 Chapter 6 / Using Custom Code Files",451
391,"179. nCustom context specifies the context file to use when the decision is published to SAS Cloud Analytic Services (CAS), Git destinations that are compatible with CAS, Teradata, Apache Hadoop, or container destinations. You must specify the custom context file in this field in order to run scoring tests, scenario tests, and publishing validation tests on the decision. nCustom context for SAS Micro Analytic Service specifies the context file to use when the decision is published to SAS Micro Analytic Service destinations and Git destinations that are compatible with SAS Micro Analytic Service. Specify the context file in this field if you plan to publish the decision to one of these destinations. 3Select the version of the custom context file. Testing or Validating a Rule Set, DS2 File, or Custom Function To test or validate rule sets, DS2 code files, or custom functions that use context functions, you must specify the custom context file in the Test custom context field on the Properties tab before you test or validate the object. For instructions, see “Validate SQL, DS2, or Context Files” on page 175 and “Testing Code Files” on page 187. Referencing a Function That Is Defined in a Context File When you add a custom context file to an object’s properties, SAS Intelligent Decisioning defines a variable in the generated code for the object that is named application . This variable appears only in the generated code. It does not appear in the Variables tab for the object. You must use the application variable to refer to functions that are defined in the custom context file. To call a custom context function from within a rule set, DS2 code file, or custom function, use the following format:application.method_name(arguments); For example, you could create a custom context file that defines a custom function named squareIt:package CustomContext; method squareIt(in_out double i) returns double;  dcl double squared;  squared=i*i;  return squared; end;endpackage; In a rule set, you could call the squareIt function as follows:mySquare = application.squareIt(i) Custom Context Files 165",429
392,"18. Manage Folders and Folder Content In the Manage Folders window, with the appropriate permissions, you can create new folders, delete, move, and rename existing folders or objects, and restore objects from the recycle bin. Objects that you delete in SAS Intelligent Decisioning are moved to the recycle bin. For information about permissions, see “Managing Permissions” in SAS Intelligent Decisioning: Administrator’s Guide . Note: When you delete a specific version of an object, that version is permanently deleted. It is not moved to the recycle bin, and it cannot be recovered. When you delete an entire object, that object is moved to the recycle bin and can be restored. To open the Manage Folders window, click , and select Manage folders in any category view except the Custom Functions and Global Variables category views. nTo create a new folder, click , type the folder name, and press Enter. nTo rename an item, right-click the item, select Rename , type the new name, and press Enter. nTo move an item, right-click the item, select Move to folder , select the new folder, and press Enter. nTo delete an item, right-click the item, and select Delete . The deleted item is moved to the recycle bin. nTo restore an item from the recycle bin, right-click on the item in the recycle bin, and select Restore . nTo permanently delete an item, right-click on the item in the recycle bin, and select Delete . The item is deleted from the recycle bin and cannot be restored. nTo empty the recycle bin, right-click Recycle Bin and select Empty recycle bin . For more information about folders, see SAS Viya Platform: Folders . For information about the global variables recycle bin, see “Manage the Global Variable Recycle Bin” on page 147. For information about hiding custom function categories, see “Hide A Custom Function Category” on page 209. View the Properties of Any Object In the category views, you can view the properties of any object. Select the check box for the object, and click in the property pane. Click to close the properties pane.View the Properties of Any Object 9",438
393,"180. In the Custom Functions category, you can define a custom function that calls the squareIt context function as follows:method addSquares() returns double; dcl double tally; dcl double squared; dcl double i; tally = 0; do i= 1 to 5;  squared = application.squareIt(i);  tally + squared; end; return tally;end; Referencing a Variable That Is Defined in a Context File When you add a custom context file to an object’s properties, SAS Intelligent Decisioning defines a variable in the generated code for the object that is named application . This variable appears only in the generated code. It does not appear in the Variables tab for the object. You must use the application variable to refer to variables that are defined in the custom context file. To refer to a custom context variable from within a rule set, DS2 code file, or custom function, use the following format:application.variable_name For example, you could create a custom context file that sets the value of a variable named grade based on the value of the variable score :package CustomContext; dcl varchar(20) grade; method execute(in_out double score);  if score >= 90 then grade='A';  else if score >= 80 then grade='B';  else if score >= 70 then grade='C';  else if score >= 60 then grade='D';  else grade='F'; end;endpackage; In a rule set, you can execute the custom context file and set the value of the rule set variable finalGrade to the value of the custom context variable grade as follows:application.execute(score);finalGrade=application.grade; 166 Chapter 6 / Using Custom Code Files",354
394,"181. Create a New Code File 1Click to navigate to the Code Files category view. 2Click New Code File . The New Code File window appears. 3Enter a name for the new code file. Note: When a data query file generates output, the file name can be up to 28 characters long. When the data query file is added to a decision, SAS Intelligent Decisioning creates an output-only decision variable. The name of the decision variable is the data query file name plus _out . 4Select the code file type. 5(Optional) For data query file types, select the editor with which you want to edit the file. TIP For data query files that you choose to edit in SAS Studio, SAS Intelligent Decisioning adds .cqy.df to the file name, and the file type is displayed as Data Query . For data query files that you choose to edit in the SQL editor, the file type is displayed as SQL. These files can return either a data grid or a single row of scalar variables. You can select the output type on the Properties tab. For more information, see “Query Output Types and Editors” on page 160. 6(Optional) Enter a description for the file. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 7Click , and select the folder where you want to save the file. 8Click Save . SAS Intelligent Decisioning opens the new code file. For data query files that you choose to edit with SAS Studio, SAS Intelligent Decisioning displays the Properties tab, and you can click Open Data Query to open the file in SAS Studio. For all other file types, SAS Intelligent Decisioning uses the appropriate code editor to open the file on the Code tab.Create a New Code File 167",371
395,"182. TIP Except for query files that you edit in SAS Studio, you must check out objects that are saved in a folder for which the check-out and commit feature is enabled before you can edit them. The check-out and commit feature is always enabled for the Decision Repository folder. See “Checking Out and Committing Decision Versions” on page 272 for more information. 9(Optional) If the code file is in a folder for which the check-out and commit feature is enabled, click the Versions tab and check out the latest version of the code file. For more information, see “Check Out and Commit a Custom Code File Version” on page 184. TIP By default, the autocomplete feature is turned on for SAS functions and custom functions. You can turn off this feature or change what is displayed in the autocomplete list by using the SAS Intelligent Decisioning settings. You can specify that SAS Intelligent Decisioning also displays variable names. For information, see “SAS Intelligent Decisioning Settings” on page 8. In the autocmplete list, SAS Intelligent Decisioning displays all function names and variable names that match the text that you enter. Double-click an item to add it to the code field. Single-click an item to display information about the item, such as whether it is a function or a variable. For functions, the information includes the returned data type and category. For variables, the information includes the data type and direction (input, output, or both). The autocomplete list does not include functions that are defined in a custom context file. Managing the Variables in a DS2 or Python Code File About Variables The Properties of a VariablePropertyDescriptionNameVariable names must start with a letter or an underscore (_), and they can contain only alphanumeric characters and the underscore. 168 Chapter 6 / Using Custom Code Files",368
396,"183. PropertyDescriptionVariable names can be up to 32 characters long. They must be unique within a code file. Note: SAS Intelligent Decisioning does not support double-byte character set (DBCS) characters in variable names. Note: Do not use any of these operators or keywords as variable names: AND, OR, IN, NOT, LIKE, TRUE, or FALSE. Do not use _N_ or any DS2 reserved word as a variable name. See “Reserved Words in the DS2 Language” in SAS DS2 Programmer’s Guide for information about reserved words in the DS2 language.Data typeCode files in SAS Intelligent Decisioning support the following data types: Boolean, character, data grid, date, datetime, decimal, and integer. For Boolean variables, you can select True or False for the initial value. However, SAS Intelligent Decisioning represents Boolean values by using the numbers 1 and 0 in the code that it generates. When SAS Intelligent Decisioning is evaluating Boolean expressions, any non-zero number is considered True. When you are entering expressions, specify 1 for True and 0 for False. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.Input and OutputA variable in a DS2 code file can be an input variable, an output variable, or both. A variable in a Python code file can be an input variable or an output variable, but not both. See “Input Variables and Output Variables” on page 170 for more information.LengthThe length for Boolean and numeric variable types is set automatically. For output-only data grid variables, the length is set to the value that you specify. For output-only character variables in decisions that are published to container destinations or to SAS Micro Analytic Service destinations, the length that you specify is ignored unless the sas.decisions.variable.length.honorOutputLengthInMAS configuration option is turned on. For more information,see “sas.decisions.variable.length” in SAS Intelligent Decisioning: Administrator’s Guide . For character variables and data grid variables that are input-only or input-output variables, the variableLengthOverridden configuration property determines how the length is set.",476
397,"184. PropertyDescriptionThe maximum length for character variables (outside of a data grid) and data grid variables is 10485760 characters. The maximum length for character variables within a data grid is 32767 characters.Initial valueYou can specify an initial value for all data types except data grids. Initial values are used only when you test a code file in SAS Intelligent Decisioning . Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.DescriptionDescriptions are limited to 256 characters. Input Variables and Output Variables For each variable in an SQL query, a DS2 method signature, or a Python function signature, you must specify whether the variable is an input variable, an output variable, or, in the case of DS2 files, both an input variable and an output variable. nInput variables are variables that are present in the input table for a decision. When a decision that uses a code file is deployed in a production system, all input variables must be mapped to table columns in input data. When you test a code file in SAS Intelligent Decisioning , for each input variable, you can either map it to a table column or specify a constant as its input value. If you choose not to map a variable to either a table column or a static value, SAS Intelligent Decisioning displays a warning message. When you create or edit a variable, clear the Input check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. nOutput variables are variables that are written to the output table that is created when a decision that uses a code file is run. When you create or edit a variable, clear the Output check box for any variable that you want to exclude from the output data. When you create a new variable, it is created as an output-only variable by default. Syncing Variables and Code To propagate changes that you enter on the Variables tab to the code that is shown on the Code tab, click Sync to Code on the Variables tab. For Python code files, changes to input variables are propagated to the signature of the EXECUTE function, and changes to output variables are propagated both to the docString and to the RETURN statement.",493
398,"185. method. Both output-only and input-and-output variables are added with the in_out keyword. To propagate changes that you enter on the Code tab to the Variables tab, save the code file or click Sync Variables on the Code tab. For Python code files, changes to the signature of the EXECUTE function are propagated to the Variables tab as changes to input variables. Changes to the docString and to the RETURN statement are propagated as changes to output variables. New variables are added as character variables, but you change the data type on the Variables tab. For DS2 files, variables that you add to the signature of the EXECUTE method with the in_out keyword are added to the Variables tab as output-only variables. Variables that are not specified with the in_out keyword are added to the Variables tab as input-only variables. You can specify that any variable is both an input and output variable by selecting both the Input and Output check box on the Variables tab. If you make conflicting changes to both the Code tab and the Variables tab and then save the file, SAS Intelligent Decisioning prompts you to select which tab contains the changes that you want to retain. If you make conflicting changes on the two tabs and then click a sync button, only the changes on the tab on which you click the sync button are retained. Those changes are then propagated to the other tab. Note: You cannot manage local variables on the Variables tab. Local variables are variables for which neither the Input nor the Output checkboxes are selected on the Variables tab. If local variables are listed on the Variables tab, these variables are removed from the tab when you save the code file or click a sync button. Add Variables from a Data Table 1On the Variables tab, click Add variable and select Data table . The Choose Data window appears, and the list of SAS Cloud Analytic Services (CAS) tables that are loaded into memory is displayed on the Available tab. If the table that you need does not appear in the list of available tables, try the following solutions: nIf the table appears on the Data Sources tab, right-click on the table, and select Load to load the table into memory. If the table does not appear on the Available tab, click . nIf the table does not appear on the Data Sources tab, import the data. The process of importing the data loads it into memory.",475
399,"186. 5On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables and Output Variables” on page 170 for more information. TIP To filter the variable list, right-click on the Variable column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 6Save the code file or click Sync to Code to add the variables to the code that is on the Code tab. For more information, see “Syncing Variables and Code” on page 203. Add Variables from a Rule Set, Decision, or Code File 1On the Variables tab, click Add variable , and select Rule set , Decision , or Code file . The Choose an Item window appears. 2Select the object from which you want to import variables, and click OK. The Add Variables window appears. 3Select the variables that you want to import and click . To import all of the variables in the table, click . 4Click Add to add the selected variables, or select Add and replace to replace existing variables that have the same name. 5On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables and Output Variables” on page 170 for more information. 6Save the code file or click Sync to Code to add the variables to the code that is on the Code tab. For more information, see “Syncing Variables and Code” on page 203. Create Custom VariablesCreate Custom Variables Note: For information about data grid variables, see “Defining Data Grid Variables” in SAS Intelligent Decisioning: Using Data Grids . To create custom variables on the Variables tab: 1Click Add variable and select Custom variable . The Add Variables window appears. 2Complete these steps for each variable that you want to add:172 Chapter 6 / Using Custom Code Files",398
400,"187. aEnter the name of the new variable, and select the data type of the variable. See “The Properties of a Variable” on page 168 for additional information. TIP To re-add a variable that was used in a locked version, you must specify the same data type that was used in the previous version. b(Optional) Click Optional to display the Description , Initial value , and Length fields. c(Optional) Enter a length, initial value, and description for the new variable. Whether you can specify an intial value or length for the variable depends on the variable's data type. See “The Properties of a Variable” on page 168 for additional information. dClick Add. SAS Intelligent Decisioning adds the new variable to the table of variables at the bottom of the window. By default, variables are added to the table as both input and output variables. eVerify that the Input and Output check boxes are selected correctly for each variable. nClear the Input check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. nClear the Output check box for any variable that you want to exclude from the output data. nClear both the Input and Output check boxes to create a temporary variable. TIP Variables in DS2 files can be both input and output variables but Python variables cannot. 3(Optional) Modify the variable properties in the table of variables. 4Click OK to add the variables and close the Add Variables window. 5Save the code file or click Sync to Code to add the variables to the code that is on the Code tab. For more information, see “Syncing Variables and Code” on page 203. Duplicate a Variable 1On the Variables tab, select the variable that you want to duplicate, click , and select Duplicate . The Duplicate Variable window appears. 2Enter a new name for the duplicate variable. 3(Optional) Enter a description for the variable. 4Click Duplicate .Managing the Variables in a DS2 or Python Code File 173",424
401,"188. 5Save the code file or click Sync to Code to add the variables to the code that is on the Code tab. For more information, see “Syncing Variables and Code” on page 203. Importing and Exporting Variables Import Variables You can import variables from either comma-delimited (CSV) files or from JavaScript Object Notation (JSON) files. These files must conform to formats described in Appendix 2, “Import File Formats,” on page 325. These formats are the same formats that are created when you export variables. 1Open the code file into which you want to import variables. 2On the Variables tab, click Import , and select either Comma-delimited (*.csv) or JSON (*.json) . The Import File window appears. 3Click Browse and select the file from which you want to import variables. 4Specify the encoding of the CSV file. 5Select Add variables to append the variables to the current list of variables, or select Replace variables to replace the current list of variables with the imported variables. TIP To add new columns to an existing data grid variable, select Replace variables . 6Click Import , and then click to import the variables and save the code file. Export Variables 1Open the code file from which you want to export variables. 2On the Variables tab, select the variables that you want to export. 3Click Export , and select the file type to which you want to export the variables. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application.174 Chapter 6 / Using Custom Code Files",369
402,"189. Delete Variables 1On the Variables tab, select the check box for the variables that you want to delete, click , and select Delete . 2Click Sync to Code to delete the variables from the code that is on the Code tab. Edit Variable Properties On the Variables tab, click on the name of the variable that you want to edit. The Edit Variable window appears. Edit the properties as needed, and then click OK. Note: When you rename a variable, click Sync to Code to change references to that variable within the same object change to use the new name. See “The Properties of a Variable” on page 168 for additional information. Edit Metadata for Data Grid Variables For information, see “Editing Data Grid Variable Metadata” in SAS Intelligent Decisioning: Using Data Grids . Validate SQL, DS2, or Context Files To validate a code file of type SQL, DS2, or custom context, open the file and click Validate . For DS2 code files that use context functions, specify the custom context file in the Test custom context field on the Properties tab. For DS2 code files and custom context files, SAS Intelligent Decisioning compiles the code. IMPORTANT Before you validate a DS2 code file or custom context file that uses a data grid package, verify that the declaration statements for the package specify datagrid instead of dcm_datagrid . For example:in_out package datagrid variable; Validate SQL, DS2, or Context Files 175",297
403,"19. Manage Comments for Any Object In the category views, you can associate comments and attachments with any object. To open the Comments pane for an object, select the check box for the object, and click in the properties pane. To add a new comment, enter the comment in the text box and click Post . To add an attachment to a comment, click , select the file that you want to attach, and click Post . (The attachment icon appears after you enter text in text box.) You cannot attach executable files such as BAT and EXE files. To reply to a comment, click Reply , enter your reply in the text box, and click Post . To delete a comment, click for that comment. Note: You can also add comments to rule set tests, code file tests, decision tests, and to the Start and End nodes within a decision. Comments that you add to tests are not displayed with the comments in the category views. Comments that you add to the Start and End nodes in a decision are displayed in the Decisions category view. For more information, see “Manage Comments for a Rule Set Test” on page 76, “Manage Comments for a Code File Test” on page 195, and “Manage Comments for Decision Nodes and Tests” on page 306.10 Chapter 1 / Introduction to SAS Intelligent Decisioning",271
404,"190. dcl package datagrid variable; For SQL query files, SAS Intelligent Decisioning runs the query in order to verify the SAS Micro Analytic Service connection string, scans the SQL statements for syntax errors, and looks for references to non-existent tables and columns. IMPORTANT Do not validate a query that uses dynamic parameters to alter data. In order to validate a query, SAS Intelligent Decisioning generates values to use for the query parameters and executes the query. These parameter values might not match the values that are passed to the query during normal execution and can produce unintended changes in the database. For example, data might be deleted that should not be deleted. If your query does not use dynamic parameters but does alter the data, be aware that validating the query will alter the data. Copy a Code File URL To create a link for external documentation that automatically opens a code file in SAS Intelligent Decisioning : 1Open the code file. 2Click , and select Copy code file URL . The Copy URL window appears, and the URL is automatically selected. 3Click Copy , and then click Close . Paste the link into your documentation. Compare Generated Code for Code Files You can compare the generated code of two different code files, or you can compare the generated code of two different versions of the same code file. 1Select the objects that you want to compare. nTo compare the generated code of two different code files, select the code files in the category view, click , and select Compare code . nTo compare the generated code of two versions of the same code file, open the code file, click on the Versions tab, and select Compare code . The Select Versions window appears.176 Chapter 6 / Using Custom Code Files",347
405,"191. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Code window and highlights the differences. 3(Optional) Click Export to export the results of the comparison to a PDF file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Managing Code Files Duplicate Code Files Note: You cannot duplicate a code file if it is open. To duplicate a single code file: 1In the Code Files view, select the code file that you want to duplicate. 2Click and select Duplicate . The Duplicate Code Files window appears. 3Enter a new name for the duplicate code file. 4(Optional) Enter a description for the code file. 5Click , and select the folder where you want to save the duplicate file. 6Click Duplicate . To duplicate multiple code files: 1In the Code files view, select the code files that you want to duplicate. 2Click and select Duplicate . SAS Intelligent Decisioning duplicates the code files and appends _Copy to the names of the duplicate copies. If needed, a number is also appended to the names of the duplicate copies. Note: When you duplicate a code file, SAS Intelligent Decisioning creates a relationship between the original code file and the duplicate code file. If either object is changed, and you later copy the contents of one object into the other, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the code file before you paste the new content.Managing Code Files 177",366
406,"192. Delete Code Files In the Code Files category view, select the code files that you want to delete, click , and select Delete . SAS Intelligent Decisioning moves the files to the recycle bin. For more information, see “Manage Folders and Folder Content” on page 9. Rename a Code File Note: You cannot rename a code file if it is open. 1In the Code Files category view, select the code file that you want to rename. 2Click and select Rename . The Rename window appears. 3Enter a new name for the code file, and click Rename . Move Code Files to a Different Folder 1In the Code Files category view, select the code files that you want to move. 2Click and select Move . The Choose a Location window appears. 3Select the location to which you want to move the code files, and click OK. Managing Versions of Code Files Set the Displayed Version The displayed version is the version whose information is displayed on the other tabs, such as the Code , Properties , and Variables tabs. On the Versions tab, a in the Displayed Version column indicates the displayed version. To change the displayed version, click the version number for the version that you want to view. The displayed version is shown in the title bar.178 Chapter 6 / Using Custom Code Files",271
407,"193. Create a New Version Note: For objects that are stored in locations for which the check-out and commit feature is enabled, you cannot manually create a new version. The only way to create a new version is to check out an existing version and commit a new version. For information, see “Check Out and Commit a Custom Code File Version” on page 184. Note: The current version of an object is the version with the highest version number. When you create a new version, SAS Intelligent Decisioning locks the current version before it creates the new version. IMPORTANT You cannot unlock a locked version. You cannot save changes to a version that is locked. If you modify a version that is locked and click , SAS Intelligent Decisioning asks you if you want to replace the current unlocked version with your edited version. To manually create a new version: 1On the Versions tab, click the version number for the existing version that you want to use as the basis for the new version. 2Click New Version . The New Version window appears. 3Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented. If you select Minor , the number to the right of the period is incremented. 4(Optional) For each version tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Note: A tag is limited to 100 characters. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. 5(Optional) Enter information about the new version in the Notes field. TIP You can edit these notes at any time on the Versions tab. 6Click Save .Managing Versions of Code Files 179",389
408,"194. Copy the Content of a Version You can copy the content of an object’s version in the category view or on the Version tab for the object. 1In the category view, complete these steps: aSelect the code file whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. cSelect the version whose contents you want to copy. Alternatively, on the Versions tab of the code file whose contents you want to copy: aSelect the version whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. 2Click , and select the target code file into which you want to paste the contents of the version. When you paste the contents, SAS Intelligent Decisioning creates a new version of the target code file. The target object contains only the pasted content. 3Select whether you want to create a new major or minor version. 4(Optional) Modify the notes that will be associated with new version. 5(Optional) Add tags that will be associated with the new version. Tags that are associated with a source object version are not automatically added to the new version. See “Add a Version Tag” on page 186 6Click Paste Version , and then click Yes. Note: When you copy the contents of a source object into a target object, SAS Intelligent Decisioning creates a relationship between the two objects. If the source object is modified after you copy its contents, and you later copy the contents of the target object back into the source object, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the source object before you paste the new content. Delete a Version IMPORTANT When you delete a specific version, that version is deleted permanently. It is not moved into the recycle bin, and it cannot be restored.180 Chapter 6 / Using Custom Code Files",384
409,"195. Note: In order to be able to delete a specific version of an object, you must have permission to delete the object itself. Also, the configuration option sas.decisions.codeFiles.deleteVersions must be turned on. On the Versions tab, select the version that you want to delete, click , and select Delete . You cannot delete the current version. Upgrade Decisions to Use a New Version of a Code File If you create a new version of a code file that is already used in other decisions, you can upgrade the decisions to use the new version. 1On the Versions tab for the code file, click , and select Upgrade decisions . The Upgrade Decisions window appears. This window lists all of the decisions that include the code file 2In the Version to upgrade to field, select the version of the code file to which you want to upgrade the decisions. 3Select Automatically map variables if you want SAS Intelligent Decisioning to automatically map new code file variables in the decisions where the code file is used. For information about how SAS Intelligent Decisioning maps variables, see “About Decision Variables and Mapping” on page 247. 4Select the check boxes for the decisions that you want to upgrade, and click Upgrade Decisions . TIP To update all of the objects that are used in a decision, see “Update Decisions to Use New Object Versions” on page 253. Determine Which Objects Use a Code File To list the objects that use a specific code file: 1On the Code files category page, select the check box for the code file, click , and select View used by report . The All Objects that Use the Selected Item window appears. This window lists all objects that use any version of the selected code file.Determine Which Objects Use a Code File 181",363
410,"196. 2(Optional) Select a specific version of the code file. SAS Intelligent Decisioning narrows the list to include only the objects that use the selected version of the code file. Note: The View used by report option is also available from within an open code file. In the report, you can use the Filter field to filter the list of objects based on the object names. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Checking Out and Committing Code File Versions About Checking Out and Committing Versions Your administrator can enable the check-out and commit feature for custom code files that are in any folder by specifying the folder in the sas.decisions.checkout.checkoutEnabledFolderPaths configuration option. Enabling this feature for a folder does not automatically modify the permissions for the folder or for the objects in it. You can still modify a code file in the folder without checking it out, but you are expected to check out the latest version before you edit it. However, your administrator might also set permissions that require you to check out code files in these folders before you can edit them. For more information, see “sas.decisions.checkout” in SAS Intelligent Decisioning: Administrator’s Guide and “Set Permissions for Check-Out Folders” in SAS Intelligent Decisioning: Administrator’s Guide . By default, SAS Intelligent Decisioning defines a folder where you can store code files that must be checked out before they can be edited. This folder is the Decision Repository folder, and it is the default value for the sas.decisions.checkout.checkoutEnabledFolderPaths configuration option. The default permissions for this folder require that non-administrative users check out a version and commit their changes to the checked-out version. Users who do not have administrative permissions cannot edit the code files in Decision Repository without first checking them out.",473
411,"197. edit it in the SAS Intelligent Decisioning user interface. However, custom code files are stored in the Files service. The files service grants the file creator full access to the file. The file creator can use the REST API to edit the file without checking it out. The file creator can do this even when the file is in a folder for which the check-out feature is enabled (including the Decision Repository folder). In order to prevent the file from being edited without being checked out, the user ID of the file creator must be different from any user ID that is used to edit the file. For example, an administrator can create an empty code file that other users can then edit if they check it out. If a version can be or must be checked out before it is modified, the Check Out button appears at the top of the Versions tab for that object. You can check out any version of an object. You can check out only one copy of a version at a time. TIP If the sas.decisions.checkout.allowConcurrentCheckout option is turned off, and a user has checked out a code file version, the Check Out button for that code file is disabled for all other users. For more information, see “Concurrently Checking Out and Committing Code File Versions” on page 184. When you check out a version, SAS Intelligent Decisioning writes a working copy of the version into your My Folder folder and opens the working copy. SAS Intelligent Decisioning adds “(Checked Out) ” to the name that is displayed at the top of the window. While you have a version checked out, the Code Files category view shows two code files with the same name, but the folders listed in the Location column differ for each file. The original version is in the location specified by the sas.decisions.checkout.checkoutEnabledFolderPaths configuration option, and the checked-out copy is in your My Folder folder. TIP If an object that you have checked out does not appear in the category view, click to refresh the category view. A Commit button appears at the top of the Versions tab for the checked-out version. When you are finished editing the checked-out version, you must commit your changes in order for other users to be able to see them. When you commit your changes, SAS Intelligent Decisioning creates a new version with your changes. If the parent object is deleted before you commit your changes, you will not be able to commit your changes.",498
412,"198. Concurrently Checking Out and Committing Code File Versions The ability for multiple users to check out the same code file at the same time is controlled by the sas.decisions.checkout.allowConcurrentCheckout configuration option. This option is turned on by default. When this option is turned on, different users can check out the same version of the same object at the same time. Because the objects that are checked out are saved in each user’s My Folder location, the default permissions allow individual users to see only the copies that they have checked out. When this option is turned off and a user has checked out an object, the Check Out button for that object is disabled for all other users. If multiple users check out the same version of the same object at the same time, each user’s changes are preserved in a new version when they commit their changes. One user’s changes do not overwrite another user’s changes. IMPORTANT If two users attempt to commit changes to the same object simultaneously, the first user's attempt will succeed but the second user might see an error message that the commit has failed. If the second user subsequently commits their changes, the Modified By column on the Versions tab for both the version committed by the first user and the version committed by the second user displays the user ID of the second user. Check Out and Commit a Custom Code File Version 1On the Versions tab, click Check Out . SAS Intelligent Decisioning updates the Properties tab to indicate that the version is checked out. 2Modify the checked-out version as needed, and save it. TIP To discard the changes and delete the checked-out version from My Folder , you can commit the object without saving it first. However, committing the object without saving creates a new version of the object whose contents match the contents of the previous version. For information on undoing a check out, see “Undoing a Check Out” on page 185. 3On the Versions tab, click Commit . The Commit Code File Version Commit Code File Version window appears.184 Chapter 6 / Using Custom Code Files",418
413,"199. 4Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented, and the minor number is reset to zero. If you select Minor , the number to the right of the period is incremented. 5(Optional) In the Version tags field, enter any version tags that you want to associate with the new version. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / 6(Optional) Enter information about the new version in the Notes field. 7Click Commit . SAS Intelligent Decisioning creates a new version with your changes, and deletes the working copy from your My Folder folder. Determine Who Has a Version Checked Out If the current version of an object is checked out, the IDs of the users that checked it out and the timestamps when each user checked it out appear in the Checked out by field on the Properties tab for the original object. You can also display this information by clicking beside the version number on the Versions tab. Opening the Original Object When you check out an object, SAS Intelligent Decisioning adds the field Original object link to the Properties tab for the checked-out object. This field contains a link to the original object that was checked out. You can use this link to verify that you have checked out the correct version and to compare the original content with the modified content in the checked-out version. Undoing a Check Out How you undo the checkout of an object depends on how the object was checked out. If both an object and a decision that uses the object are checked out at the same time, or if you checked out the object from within the decision , click on the object's node in the decision diagram, and select Cancel checkout . You can discard a checked-out version and any changes that you made by deleting the working copy of the version from your My Folder folder if the following conditions are true: nYou have not checked out a decision that uses the object. nThe object was not checked out at the same time as a decision that uses the object, or the object was not checked out from within the decision after the decision was checked out.Checking Out and Committing Code File Versions 185",468
414,"2. The correct bibliographic citation for this manual is as follows: SAS Institute Inc. 2023. SAS® Intelligent Decisioning: User’s Guide . Cary, NC: SAS Institute Inc. SAS® Intelligent Decisioning: User’s Guide Copyright © 2023, SAS Institute Inc., Cary, NC, USA All Rights Reserved. Produced in the United States of America. For a hard copy book: No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, electronic, mechanical, photocopying, or otherwise, without the prior written permission of the publisher, SAS Institute Inc. For a web download or e-book: Your use of this publication shall be governed by the terms established by the vendor at the time you acquire this publication. The scanning, uploading, and distribution of this book via the Internet or any other means without the permission of the publisher is illegal and punishable by law. Please purchase only authorized electronic editions and do not participate in or encourage electronic piracy of copyrighted materials. Your support of others' rights is appreciated. U.S. Government License Rights; Restricted Rights: The Software and its documentation is commercial computer software developed at private expense and is provided with RESTRICTED RIGHTS to the United States Government. Use, duplication, or disclosure of the Software by the United States Government is subject to the license terms of this Agreement pursuant to, as applicable, FAR 12.212, DFAR 227.7202-1(a), DFAR 227.7202-3(a), and DFAR 227.7202-4, and, to the extent required under U.S. federal law, the minimum restricted rights as set out in FAR 52.227-19 (DEC 2007). If FAR 52.227-19 is applicable, this provision serves as notice under clause (c) thereof and no other notice is required to be affixed to the Software or documentation. The Government’s rights in Software and documentation shall be only those set forth in this Agreement. SAS Institute Inc., SAS Campus Drive, Cary, NC 27513-2414 August 2023 SAS® and all other SAS Institute Inc. product or service names are registered trademarks or trademarks of SAS Institute Inc. in the USA and other countries. ® indicates USA registration. Other brand and product names are trademarks of their respective companies. v_029-P2:edmug",492
415,20. 2 Working with Rule Sets About Rules and Rule Set Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 About Condition and Action Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Create a New Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 Managing the Variables in a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 About Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
416,". . . . . . . . . . . . . . . . . . . . 16 Add Variables from a Data Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18 Add Variables from a Rule Set, Decision, or Code File . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Add Global Variables to a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 Create a Custom Variable Dynamically . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Create Custom Variables on the Variables Tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Duplicate a Variable . . . . . . . . . . . . . . .",277
417,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 Importing and Exporting Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 Delete Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 Edit Variable Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 Edit Metadata for Data Grid Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,263
418,. . . . . . . . 23 Determine Which Objects Use a Particular Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 Defining New Rules in a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Add a Stand-Alone Assignment Statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Add an IF-THEN or IF-THEN-ELSE Rule to an Assignment or Common Rule Set . 25 Adding a Common Rule Set Reference to an Assignment Rule Set . . . . . . . . . . . . . . 26 Add a New Rule in a Filtering Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Copy Rules From Another Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,291
419,. . . . . . . . . . 30 Controlling Which Conditions Are Evaluated . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 How Rules Are Evaluated and When Rule-Fired Records Are Generated . . . . . . . . . 32 Defining Expressions in Rules and Assignment Statements . . . . . . . . . . . . . . . . . . . . 33 About Defining Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 Using the Expression Editor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 Enter LOOKUP and LOOKUPVALUE Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 Entering Literal Data Values . . . . . . . . . . .,283
420,"200. The deleted version is moved to the recycle bin. See “Delete Code Files” on page 178. Managing Version Tags for Code Files Add a Version Tag Version tags enable you to better organize and group your content. Version tags are associated with specific versions of an object and not with the entire object. You can add the same tag to any version of any object. To add a tag to a code file version: 1On the Versions tab, position your cursor in the Version Tags column for the version that you want to tag. If the version is not tagged, appears. If the version has at least one tag, appears. 2Click to open the New Version Tags window, or click to open the Edit Version Tags window. 3For each tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. TIP To filter the version list based on a tag, right-click on the Version Tags column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 4Click Close to close the window. Remove a Version Tag 1On the Versions tab, position your cursor in the Version Tags column for the version whose tag you want to remove, and click . 2Click beside the tag that you want to remove.186 Chapter 6 / Using Custom Code Files",358
421,"201. 3Click OK to close the window. The tag remains in the list of previously entered tags that is displayed when you add a tag, but the tag is no longer associated with version. Modify a Version Tag You cannot modify a version tag that already exists. To change the content of an existing tag, delete the tag as described in “Remove a Version Tag” on page 186, and then add the tag again as described in “Add a Version Tag” on page 186. Testing Code Files Ways to Test a Code File There are two types of tests for code files: Basic test executes the code file in the SAS Cloud Analytic Services (CAS) destination using the input table that you specify. You can also specify a debugging variable. For more information, see “Create and Run a New Test” on page 188. Scenario test enables you to enter specific input values and the output values that you expect the test to generate. A scenario test identifies differences between the output that you expect to see and the actual output that is generated when the test is run. You can also compare the test definitions and test results of different scenarios. Scenario tests are also run in CAS. For more information, see “Test a Scenario” on page 289. Note: You can create and run basic tests and scenario tests for DS2, SQL, and Python custom code files, but you cannot run these tests directly on custom context files. You can test the functions that are defined in a custom context file by testing the rule set or DS2 file that uses the context functions. Validating a custom context file determines whether the file is syntactically correct and whether it includes declaration statements for the packages that are used in the file. For more information, see “Validate SQL, DS2, or Context Files” on page 175.Testing Code Files 187",375
422,"202. Test a Code File Create and Run a New Test Testing a code file is optional, but doing so is a best practice. Testing enables you to discover any problems before the code file is incorporated into a production system. IMPORTANT If you are testing a DS2 or SQL code file that uses functions that are defined in a custom context file, verify that the context file is specified in the Test custom context field on the Properties before running the test. 1On the Scoring tab, click the Tests tab. 2Click New Test . The New Test window appears. 3Enter a name for the test if you do not want to use the default name. The name cannot contain forward slashes (/) or curly braces ({}). 4(Optional) Enter a description for the test. Descriptions are limited to 1000 characters. 5(Optional) Click for the Location field, and select the folder where you want to save the test definition and results. TIP Selecting a location is optional, but it is highly recommended. Storing test definitions and test results in a folder simplifies the tasks of setting permissions and transferring the test files. 6Click for the Input table field, select the input table for the test, and click OK. 7Verify or change the variable mappings. To run a full test, map all of the input variables to columns in the input table that you selected for the test. To run a partial test, you can map only the input variables that are needed for the test. SAS Intelligent Decisioning automatically maps the input variables in the code file to columns in the input table when the names and data types of the variables match those of the table columns. If any input variables are not mapped to input columns or to static values, the application displays a warning message. At run time, SAS Intelligent Decisioning assigns missing values to input variables that are not mapped. 188 Chapter 6 / Using Custom Code Files",393
423,"203. You can change the automatic variable mappings in the Variable Mappings window. To change variable mappings: aClick Variables . The Variable Mappings window appears. bFor each input variable, select the table column to which the variable should be mapped. If the input table contains more than 25 columns, click More columns to display additional column names. Alternatively, for Decimal, Integer, and Character variables, you can select Use value for the table column, and specify a literal value in the Value column. When you are entering literal values, remember these rules: nDo not enclose character strings in quotation marks. nTo specify a missing value for character variables, select Use value and leave the Value column empty. When SAS Intelligent Decisioning generates code, it generates an empty string ('' ). For numeric values, enter a period (.). Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published. cClick OK to close the Variable Mappings window. 8(Optional) Click Advanced to display the advanced options. 9(Optional) Click and select the library where you want to write the output of the test. 10(Optional) Enter a name for the test results output table if you do not want to use the default name. The default name is test-name_object-name_timestamp_output . 11(Optional) Select the version of the code file that you want to test. 12(Optional) Select the variable that you want to serve as an input debug variable. You can specify an input-only variable or an input-output variable. For more information, see “Debugging Code File Tests” on page 190. 13(Optional) Select Preserve unmapped columns in the output table if you want columns that are not mapped to an output variable to be written to the output table. 14Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 194. 15Click in the Results column to view the results of the test.",472
424,"204. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Log page, you can click to download the log file. Debugging Code File Tests When you create a test, you can specify a variable to use as a debugging variable in the Input debug variable field. You can specify an input-only variable or an input- output variable. For more information, see Step 12 of “Create and Run a New Test” on page 188. When you specify an input debug variable, SAS Intelligent Decisioning automatically sets the maximum number of threads that can be allocated for the test to 1. Setting the thread count to 1 ensures that the variable's values are written to the log in the correct order and are not affected by different threads completing at different times. To capture variable values for input-only or temporary variables after the code file logic has executed for a specific record, you can specify that the variable is an output variable, and then re-run the test. Before incorporating the code file into a production system, return the input and output settings for the variable to their previous settings. For more information, see “Input Variables and Output Variables” on page 170 and “Edit Variable Properties” on page 175. Test a Scenario Create and Run a Scenario Test IMPORTANT If you are testing a DS2 or SQL code file that uses functions that are defined in a custom context file, verify that the context file is specified in the Test custom context field on the Properties before running the test. 1On the Scoring tab, click the Scenarios tab. 2Click New Test . The New Scenario Test window appears.190 Chapter 6 / Using Custom Code Files",418
425,"205. 3Enter a name for the test if you do not want to use the default name. The name cannot contain forward slashes (/) or curly braces ({}). 4(Optional) Click for the Test definition location field, and select the folder where you want to save the test definition. TIP Selecting a test definition location is optional, but it is highly recommended. Storing test definitions in a folder simplifies the tasks of setting permissions and transferring the test files. 5Click for the Output table location field, and select the folder where you want to save the test results. 6(Optional) Select the version of the code file that you want to test. 7(Optional) Enter a description for the test. Descriptions are limited to 1000 characters. 8Enter the values that you want to use for each input variable. You do not have to enter values for every input variable. At run time, SAS Intelligent Decisioning uses missing values to input variables for which you do not specify a value. Note: Values longer than 32767 characters for character variables that are either input-only or input-output will be truncated. You cannot enter input values for variables of type binary or of type varying-length binary. To enter values for the columns in a data grid variable: aClick in the Value field, and then click . The Edit Data Grid window appears. bClick to add the row, and then enter the values for each column. Repeat this step for each row of values that you want to add to the data grid. TIP By default, data grid column names appear across the top of the data grid view, and row numbers appear down the left side. You can click to change the view of the data grid so that row numbers appear across the top and data grid column names appear down the left side. cClick OK to save the data grid values and close the Edit Data Grid window. 9(Optional) For each output variable, select the Include check box and enter the expected output value. The Include check box controls whether a variable’s expected value is used to determine the status of a scenario test. If you select Include for a variable and the test does not return the expected value, the test status is set to Completed with warnings ( ). If you do not select the check box, the application ignores the expected value of that variable when it determines the status of the test.",486
426,"206. Note: A scenario test cannot verify issues with trailing spaces. For example, it cannot distinguish between a string that contains a single space ' ' and a string that contains three spaces ' ' . 10Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 194. 11Click in the Results column to view the results of the test. 12On the Test Results page, click Test Results in the navigation panel to display the URIs and other information for the test. Click Input to display the values of input variables and dynamic attributes. Click Output , Code , or Log to display the output data set, the code that was generated by SAS Intelligent Decisioning , or the SAS log that was generated when the code was run. On the Output page, click Show All to display the expected and actual values of all output variables. Click Show Differences to display only the variables whose expected values do not match the actual values that were returned by the test. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Output page, click Export to export the output table as a comma-separated values (CSV) file. On the Log page, click to download the log file. Import Scenario Test Definitions You can import scenario test values from a comma-delimited (CSV) file. Each line in the CSV file is imported as one scenario test. In the CSV file, add a column of values for each variable. In the header row, enter the names of the input variables and of the output variables with _expected appended to the name. For example, suppose your scenario test has the input variables policyholder , cscore , and claims , and it has the output variables eligible and policies . An import file for this test might appear in a spreadsheet application as shown in the following figure.192 Chapter 6 / Using Custom Code Files",488
427,"207. The policies output variable in this example is a data grid variable. To enter values for data grid variables, use the JSON string format described in “Introduction to Data Grids” in SAS Intelligent Decisioning: Using Data Grids . The format for date and datetime variables depends on your locale. Use the same format that is created by the date and datetime pickers when you click or to enter initial values for custom variables on the Variables tab. To import scenario test definitions: 1On the Scoring tab, click the Scenarios subtab, and then click Import Scenarios . The Import Scenarios window appears. 2In the Import from field, click and select the CSV file that contains the scenario test values. Note: The import file is limited to 10 MB. 3Select or enter the encoding of the CSV file. 4Enter a prefix for the scenario test definitions. SAS Intelligent Decisioning appends a number to this prefix for each test definition. The prefix can include double-byte characters and special characters, including single quotation marks. 5(Optional) Click for the Folder location field, and select the folder where you want to save the test definitions. 6Click for the Output table location field, and select the folder where you want to save the test results. 7Click Import . Compare Different Scenarios You can display the scenario definitions or results of two or more tests side-by-side. On the Scenarios tab, select two or more tests, click , and select one of the following options: Compare ð Definitions displays the input values and the expected output values that you entered for both tests. To edit the input values for a scenario test definition, click next to the test name under Input Table . To edit the expected output values for a test, click next to the test name under Output Table . Compare ð Results displays the input values and the actual output values that were generated by the test. To display both the expected values and the actual values in the output table, select Display expected values . For each variable for which you selected Include in Step 9 on page 191, the application highlights the variable if the actual and expected values do not match. Testing Code Files 193",446
428,"208. Click Export to export the results comparison as a comma-separated values (CSV) file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Working with Test Output Data After you run a test, you can work with the output table in other SAS applications to analyze the data, create and compare models, discover relationships hidden in the data, and generate reports based on the data. Note: The actions available to you depend on the applications that are available at your site. On the Test Results page, select the Output table in the navigation pane, click Actions , and select one of the following options: Explore Lineage opens SAS Lineage Viewer. SAS Lineage Viewer enables you to better understand the relationships between objects in your SAS Viya applications. These objects include data, transformation processes, reports, and visualizations. For more information, see SAS Lineage: User’s Guide . Explore and Visualize Data opens the output table in SAS Visual Analytics. SAS Visual Analytics enables you to create, test, and compare models based on the patterns discovered during exploration of the data. You can export the model before or after performing model comparison for use with other SAS products or to put the model into production. SAS Visual Analytics supports a range of visualization, discovery, and reporting features. For more information, see Welcome to SAS Visual Analytics . Prepare Data opens the output table in SAS Data Studio. SAS Data Studio enables you to perform data transforms such as joining tables, appending data to a table, transposing columns, creating calculated columns, and so on. For more information, see SAS Data Studio: User’s Guide . Status Icons for TestsIconStatusThe test is not ready to run. The test definition is not complete, or it might contain errors.194 Chapter 6 / Using Custom Code Files",405
429,"209. IconStatusThe test has been defined and can be run. Some input variables have not been mapped or have not been assigned a value, so the test might execute only a subset of the code in the custom file.The test is defined correctly and is ready to run.The test is running.The test completed successfully.The test completed, but warnings were issued in the SAS log. The URI to the log file is shown on the Test Results page. On the Test Results page, click Test Results in the navigation panel to display the URI.The test did not run successfully. Check the SAS log for information. The URI to the log file is shown on the Test Results page. On the Test Results page, click Test Results in the navigation panel to display the URI. Manage Comments for a Code File Test You can associate comments and attachments with a code file test. To open the Comments properties pane, select the code file test on the Scoring tab, and click in the property pane. To add a new comment, enter the comment in the text box and click Post . To add an attachment to a comment, click , select the file that you want to attach, and click Post . (The attachment icon appears after you enter text in text box.) You cannot attach executable files such as BAT and EXE files. To reply to a comment, click Reply , enter your reply in the text box, and click Post . To delete a comment, click for that comment.Manage Comments for a Code File Test 195",302
430,21. Using Functions in Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 Working with Missing Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 Delete Expressions or ELSE Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4111,165
431,210. 196 Chapter 6 / Using Custom Code Files,12
432,211. 7 Using Custom Functions About Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 198 Using Custom Functions in a Rule Set or Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . 198 Create a Custom Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199 Using the Custom Function Editor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200 Rules for Writing Custom Function Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201 Managing the Variables in a Custom Function File . . . . . . . .,276
433,. . . . . . . . . . . . . . . . . . . . . 202 The Properties of a Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202 Syncing Variables and Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203 Add Variables from a Data Table or from a SAS Intelligent Decisioning Object . . . 204 Create Custom VariablesCreate Custom Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . 204 Duplicate a Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205 Importing and Exporting Variables . . . . . . . . . . . . . . . . . .,276
434,. . . . . . . . . . . . . . . . . . . . . . . . . . 206 Delete Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Edit Variable Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Edit Metadata for Data Grid Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Validate a Custom Function File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Testing a Custom Function . . . . . . . . .,265
435,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Compare Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 Managing Custom Function Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 Create a Custom Function Category . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 Edit a Custom Function Category . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209 Hide A Custom Function Category . . . . . . . . . . . . . . . . .,266
436,. . . . . . . . . . . . . . . . . . . . . . . . . . 209 Managing Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209 Duplicate Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209 Hide Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210 Rename a Custom Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210 Change a Function’s Category . . . . . . . . .,264
437,"212. About Custom Functions You can use custom functions to perform actions that are not available with the standard functions that SAS provides. Custom functions also enable you to encapsulate and reuse business logic. You can use custom functions in rule sets and in DS2 code files. When SAS Intelligent Decisioning generates the code for a published object, the definitions for custom functions are duplicated each time the function is referenced. Using Custom Functions in a Rule Set or Code File When you add a function category and custom function to SAS Intelligent Decisioning , SAS Intelligent Decisioning adds the category and function to the list of functions in the rule set expression editor. Custom categories appear as subcategories under the category Custom. For example, if you add a function category named Exponential and a function named square , these appear above the SAS functions in the expression editor: 198 Chapter 7 / Using Custom Functions",175
438,"213. IMPORTANT A delay of up to one minute can occur between the time when you define or modify (replace) a function and the time at which the function is available to be executed. When SAS Intelligent Decisioning generates code, it inserts the custom function definition ahead of the code that it generates for the rule set logic or code file logic. In the rule set or code file, you can reference custom functions in the same way that you reference functions that are provided by SAS. Note: You can nest custom function calls. For example, if A and B are custom functions and DIVIDE is the DS2 function provided by SAS, you can nest functions as follows:method B() returns double;  return 5; end;method A() returns double; return DIVIDE(10,B());end; Create a Custom Function 1In the Custom Functions category view, click New Custom Function . The New Custom Function window appears. 2Enter a name for the function if you do not want to use the default name. The name cannot be the same as the name of an existing SAS function. Function names must be unique within an environment and are limited to 250 characters. Function names must be valid DS2 identifiers. For more information, see “DS2 Identifiers” in SAS DS2 Programmer’s Guide . 3(Optional) Enter a description for the new function. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 4Select the category to which the function belongs. TIP Custom functions must be associated with a function category. A category named Category 1 is defined by default. You can change this category name, or create new a new category. For instructions about creating new categories, see “Create a Custom Function Category” on page 208. 5Click Save . SAS Intelligent Decisioning opens the custom function editor.Create a Custom Function 199",388
439,"214. 6Enter the DS2 code for the function. For more information, see the following: n“Using the Custom Function Editor” on page 200 n“Rules for Writing Custom Function Files” on page 201 n“METHOD Statement” in SAS DS2 Language Reference nSAS DS2 Programmer’s Guide Using the Custom Function Editor Use the custom function editor to enter the code for custom functions. To open the custom function editor, select a function in the Custom Function category view. You can enter code directly into the code field, or you can use the lists of operators and functions to add them to the code for the custom function. nTo add an operator, click the operator in the rows above the code pane. Click to select additional operators that are not visible in the rows above the code pane. nTo add a function call, expand the appropriate function category on the Functions tab, and double-click the function name. The custom function editor adds a basic syntax template for the function at the cursor's position in the code field. The icon beside each function name indicates the return type of the function. Functions that return character data are displayed with the icon, and functions that return numeric data are displayed with the icon. You can click Validate at any time to check the syntax of the function that you are building. If the code does not compile correctly, SAS Intelligent Decisioning displays detailed information in the Validation Results window. When you are finished editing the function, click Save .200 Chapter 7 / Using Custom Functions",307
440,"215. TIP By default, the autocomplete feature is turned on for SAS functions and custom functions. You can turn off this feature or change what is displayed in the autocomplete list by using the SAS Intelligent Decisioning settings. You can specify that SAS Intelligent Decisioning also displays variable names. For information, see “SAS Intelligent Decisioning Settings” on page 8. In the autocmplete list, SAS Intelligent Decisioning displays all function names and variable names that match the text that you enter. Double-click an item to add it to the code field. Single-click an item to display information about the item, such as whether it is a function or a variable. For functions, the information includes the returned data type and category. For variables, the information includes the data type and direction (input, output, or both). The autocomplete list does not include functions that are defined in a custom context file. Rules for Writing Custom Function Files When you are developing your DS2 custom function, follow these rules: nDo not change the name of the method. The method name must match the function name. nThe method signature can include variables that are both input and output variables. Specify these variables with the in_out keyword. Custom functions support data grid packages and the DS2 data types that are listed in “Data Types for SAS Data Sets” in SAS DS2 Language Reference . In the method signature, list input-only parameters first. List input-output and output-only parameters next, using the in_out modifier. Do not specify a length for input-output and output-only parameters. The length for these parameters is derived from the variables that are passed into the method. Note: Packages are input-output data types. nThe variables that you use as function parameters must be mapped to input variables in your decision.Rules for Writing Custom Function Files 201",368
441,"216. Managing the Variables in a Custom Function File The Properties of a VariablePropertyDescriptionNameVariable names must start with a letter or an underscore (_), and they can contain only alphanumeric characters and the underscore. Variable names can be up to 32 characters long. They must be unique within a custom function. Note: SAS Intelligent Decisioning does not support double-byte character set (DBCS) characters in variable names. Note: Do not use any of these operators or keywords as variable names: AND, OR, IN, NOT, LIKE, TRUE, or FALSE. Do not use _N_ or any DS2 reserved word as a variable name. See “Reserved Words in the DS2 Language” in SAS DS2 Programmer’s Guide for information about reserved words in the DS2 language.Data typeCustom functions support data grid packages and the DS2 data types that are listed in “Data Types for SAS Data Sets” in SAS DS2 Language Reference . For Boolean variables, you can select True or False for the initial value. However, SAS Intelligent Decisioning represents Boolean values by using the numbers 1 and 0 in the code that it generates. When SAS Intelligent Decisioning is evaluating Boolean expressions, any non-zero number is considered True. When you are entering expressions, specify 1 for True and 0 for False. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.Input and OutputA variable in a custom function signature can be an input variable, an output variable, or both.LengthThe maximum length for character variables (outside of a data grid) and data grid variables is 10485760 characters. The maximum length for character variables within a data grid is 32767 characters.202 Chapter 7 / Using Custom Functions",393
442,"217. PropertyDescriptionInitial valueYou can specify an initial value for all data types except data grids. Initial values are not used when you run a custom function. For custom functions, initial values are only for documentation purposes. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.DescriptionDescriptions are limited to 256 characters. Syncing Variables and Code To propagate changes that you enter on the Variables tab to the code that is shown on the Code tab, click Sync to Code on the Variables tab. Changes to variables are propagated only to the signature of the custom function. The rest of the custom function code is unchanged. Both output-only and input-and-output variables are added with the in_out keyword. To propagate changes that you enter in the method signature on the Code tab to the Variables tab, click and select Sync Variables on the Code tab. Variables that you add to the signature with the in_out keyword are added to the Variables tab as both input and output variables. Variables that are not specified with the in_out keyword are added to the Variables tab as input-only variables. You can specify that any variable is both an input and output variable by selecting both the Input and Output check box on the Variables tab. If you make conflicting changes to both the Code tab and the Variables tab and then save the file, SAS Intelligent Decisioning prompts you to select which tab contains the changes that you want to retain. If you make conflicting changes on the two tabs and then click a sync button, only the changes on the tab on which you click the sync button are retained. Those changes are then propagated to the other tab. Note: You cannot manage local variables on the Variables tab. Local variables are variables for which neither the Input nor the Output checkboxes are selected on the Variables tab. If local variables are listed on the Variables tab, these variables are removed from the tab when you save the code file or click a sync button.Managing the Variables in a Custom Function File 203",439
443,"218. Add Variables from a Data Table or from a SAS Intelligent Decisioning Object 1On the Variables tab, click Add variable and select the object type from which you want to add variables. The Add Variables window appears. 2Click . If you are importing variables from a data table, the Choose Data window appears. If you are importing from another SAS Intelligent Decisioning object, the Choose an Item window appears. TIP In the Choose Data window, you can search for data tables with a specific name by entering Name: ""string"" in the Search field. For example, to search for all tables whose names begin with HMEQ , enter Name: ""HMEQ"" . 3Select the table or object from which you want to import variables, and click OK to return to the Add Variables window. 4Select the variables that you want to import and click . To import all of the variables in the table, click . 5Click Add to add the selected variables, or click Add and replace to replace existing variables that have the same name. 6On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables, Output Variables, and Temporary Variables” on page 224 for more information. TIP To filter the variable list, right-click on the Variable column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 7Click Sync to Code to add the variables to the code that is on the Code tab, and then save the file. For more information, see “Syncing Variables and Code” on page 203. Create Custom VariablesCreate Custom Variables Note: For information about data grid variables, see “Defining Data Grid Variables” in SAS Intelligent Decisioning: Using Data Grids . To create custom variables on the Variables tab:204 Chapter 7 / Using Custom Functions",394
444,"219. 1Click Add variable and select Custom variable . The Add Variables window appears. 2Complete these steps for each variable that you want to add: aEnter the name of the new variable, and select the data type of the variable. See “The Properties of a Variable” on page 202 for additional information. TIP To re-add a variable that was used in a locked version, you must specify the same data type that was used in the previous version. b(Optional) Click Optional to display the Description , Initial value , and Length fields. c(Optional) Enter a length, initial value, and description for the new variable. Whether you can specify an intial value or length for the variable depends on the variable's data type. See “The Properties of a Variable” on page 202 for additional information. dClick Add. SAS Intelligent Decisioning adds the new variable to the table of variables at the bottom of the window. By default, variables are added to the table as both input and output variables. eVerify that the Input and Output check boxes are selected correctly for each variable. nClear the Input check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. nClear the Output check box for any variable that you want to exclude from the output data. nClear both the Input and Output check boxes to create a temporary variable. 3(Optional) Modify the variable properties in the table of variables. 4Click OK to add the variables and close the Add Variables window. 5Click Sync to Code to add the variables to the code that is on the Code tab, and then save the file. For more information, see “Syncing Variables and Code” on page 203. Duplicate a Variable 1On the Variables tab, select the variable that you want to duplicate, click , and select Duplicate . The Duplicate Variable window appears. 2Enter a new name for the duplicate variable. 3(Optional) Enter a description for the variable. 4Click Duplicate .Managing the Variables in a Custom Function File 205",433
445,22. Managing Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Duplicate a Rule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Delete a Rule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Rename a Rule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,259
446,. . . . . . . . . . . 42 Edit a Rule Description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 42 Reorder Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Copy a Rule Set URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Compare Rule Set Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,262
447,. . . 43 Compare Rule Set Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 Generate PDF Documentation for a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 Managing Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 Duplicating Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 Delete Rule Sets . . . . . . . . . . . . . . . . . . . . . .,266
448,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 Rename Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 Move Rule Sets to a Different Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 Managing Versions of Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Set the Displayed Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,264
449,. . . . 49 Create a New Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Create a New Version Automatically When You Publish a Rule Set . . . . . . . . . . . . . . 50 Copy the Content of a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 Delete a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51 Upgrade Decisions to Use a New Version of a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . 52 Determine Which Objects Use a Rule Set . . . . . . . . . . . . . . .,278
450,. . . . . . . . . . . . . . . . . . . . . . . . 52 Checking Out and Committing Rule Set Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 About Checking Out and Committing Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 Checking Out a Rule Set from within a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 Checking Out and Committing a Common Rule Set from within an Assignment Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 Checking Out and Committing a Lookup Table from within a Rule Set . . . . . . . . . . . . 55 Committing a Lookup Table Together with a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . .,287
451,"220. 5Click Sync to Code to add the variables to the code that is on the Code tab, and then save the file. For more information, see “Syncing Variables and Code” on page 203. Importing and Exporting Variables Import Variables You can import variables from either comma-delimited (CSV) files or from JavaScript Object Notation (JSON) files. These files must conform to formats described in Appendix 2, “Import File Formats,” on page 325. These formats are the same formats that are created when you export variables. 1Open the custom function into which you want to import variables. 2On the Variables tab, click Import , and select either Comma-delimited (*.csv) or JSON (*.json) . The Import File window appears. 3Click Browse and select the file from which you want to import variables. 4Select Add variables to append the variables to the current list of variables, or select Replace variables to replace the current list of variables with the imported variables. TIP To add new columns to an existing data grid variable, select Replace variables . 5Click Import , and then click to import the variables and save the custom function. Export Variables 1Open the custom function from which you want to export variables. 2On the Variables tab, select the variables that you want to export. 3Click Export , and select the file type to which you want to export the variables. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application.206 Chapter 7 / Using Custom Functions",359
452,"221. Delete Variables 1On the Variables tab, select the check box for the variables that you want to delete, click , and select Delete . 2Click Sync to Code to delete the variables from the code that is on the Code tab. Edit Variable Properties On the Variables tab, click on the name of the variable that you want to edit. The Edit Variable window appears. Edit the properties as needed, and then click OK. Note: When you rename a variable, click Sync to Code to change references to that variable within the same object change to use the new name. See “The Properties of a Variable” on page 202 for additional information. Edit Metadata for Data Grid Variables For information, see “Editing Data Grid Variable Metadata” in SAS Intelligent Decisioning: Using Data Grids . Validate a Custom Function File To validate a custom function file, open the file, click , and select Validate . For custom function files that use a custom context file, specify the custom context file in the Test custom context field on the Properties tab. Testing a Custom Function Before you use a custom function in a rule set, test the function code by including it in a DS2 custom code file and running a scenario test on the code file. For example, you can test the SQUARE custom function with the following custom code file:Testing a Custom Function 207",272
453,"222. package ""${PACKAGE_NAME}"" /inline; method square(double value) returns double;  return value * value; end; method execute(double value, in_out double result);  result = square(value); end;endpackage; If your custom function uses a custom context file, specify the custom context file in the Test custom context field on the Properties tab. For more information, see “Testing Code Files” on page 187 and “Testing Rule Sets” on page 63. Compare Custom Functions 1In the Custom Functions category view, select the two custom functions that you want to compare, click , and select Compare code . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Code window. 2(Optional) Click Export to export the results of the comparison to a PDF file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Managing Custom Function Categories Create a Custom Function Category 1Click to navigate to the Custom Functions category view. 2Click and select Manage categories . The Manage Categories window appears. 3Click New Category . The Create New Category window appears. 4Enter a name for the category if you do not want to use the default name. Category names are limited to 250 characters and cannot contain forward slashes (/). 5(Optional) Enter a description for the new category. Descriptions are limited to 1000 characters.208 Chapter 7 / Using Custom Functions",333
454,"223. 6Click Save , and then click Close . Edit a Custom Function Category 1In the Custom Functions category view, click and select Manage categories . The Manage Categories window appears. 2Select the category that you want to edit, click , and select Edit. The Edit Custom Function Category window appears. 3Modify the category name and description as needed, and click Save . Hide A Custom Function Category When you hide a custom function category, the category and all of its custom functions are removed from the category list. These items are hidden from view. They are not moved to the recycle bin, and they are not deleted. You cannot create a new category or new functions that have the same names as the hidden items unless you delete the hidden items. You can unhide (restore) or permanently delete the hidden items by using the Manage hidden functions menu option. To hide a custom function category: 1In the Custom Functions category view, click and select Manage categories . The Manage Categories window appears. 2Select the category that you want to hide, click , and select Hide . SAS Intelligent Decisioning prompts you to confirm whether you want to hide the category and all of its functions. Managing Custom Functions Duplicate Custom Functions Note: You cannot duplicate a custom function if it is open. To duplicate a single custom function: 1In the Custom Functions category view, select the custom function that you want to duplicate. 2Click and select Duplicate . The Duplicate Custom Function window appears.Managing Custom Functions 209",305
455,"224. 3Enter a new name for the duplicate custom function. 4(Optional) Enter a description for the custom function. 5Select the category for the function, and click Duplicate . To duplicate multiple custom functions: 1In the Custom Functions view, select the custom functions that you want to duplicate. 2Click and select Duplicate . SAS Intelligent Decisioning duplicates the custom functions and appends _Copy to the names of the duplicate copies. Hide Custom Functions When you hide a custom function, it is removed from the category list. It is hidden from view, but it is not moved to the recycle bin or deleted. You cannot create new functions that have the same names as the hidden functions unless you delete the hidden functions. You can unhide (restore) or permanently delete the hidden functions by using the Manage hidden functions menu option. To hide custom functions, select the functions in the Custom Functions category view, click , and select Hide . Rename a Custom Function Note: You cannot rename a custom function if it is open. 1In the Custom Functions category view, select the custom function that you want to rename. 2Click and select Rename . The Rename window appears. 3Enter a new name for the custom function, and click Rename . Change a Function’s Category 1In the Custom Functions category view, select the custom function, click , and select Change category . The Change Category window appears. 2Select the new category, and click OK.210 Chapter 7 / Using Custom Functions",305
456,"225. Restore or Permanently Delete Hidden Functions or Hidden Categories 1In the Custom functions category view, click , and select Manage hidden functions . The Manage Hidden Functions window appears. 2Select the function or category that you want to restore or delete. 3Click to permanently delete the selected item, or click to unhide (restore) it.Restore or Permanently Delete Hidden Functions or Hidden Categories 211",85
457,226. 212 Chapter 7 / Using Custom Functions,11
458,227. 8 Working with Decisions About Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 Using SAS Workflow with SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . . . 216 About the SID Asset Approval Workflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216 User Roles in the Workflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216 Decision Status Values in the Workflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218 View the Status Change History . . . . . . . . . .,275
459,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 Display and Export the Included Object Report for Decisions That Are in a Workflow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219 Create a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220 Views for Editing a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221 The Decision Flow Tab versus the Decision Tab . . . . . . . . . . . . . . . . . . . . . . . . . .,270
460,". . . . . 221 Controlling the Tab Display . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221 Managing the Variables in a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222 About Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222 Add Variables from a Data Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224 Add Variables from a Rule Set, Decision, or Code File . . . . . . . . . . . . . . . . . . . . . . . . .",268
461,225 Add Global Variables to a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225 Create Custom Variables on the Variables Tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 226 Duplicate a Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227 Importing and Exporting Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227 Delete Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,266
462,. . . 228 Edit Variable Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229 Edit Metadata for Data Grid Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 229 Determine Which Objects Use a Particular Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . 229 Adding Objects to a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230 Add an Existing Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230 Create and Add a New Object . .,272
463,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232 Adding Record Contacts Nodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233 Adding Branches to a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235 Adding Cross-Branch Links . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244 Add a Micro Analytic Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,265
464,228. Add a Micro Analytic Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246 Mapping Variables within a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247 About Decision Variables and Mapping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247 Add Missing Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 248213,215
465,229. Scoring Rows in a Data Grid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249 Mapping Data Grid Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249 Map Object Variables to Decision Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250 Searching for Objects in a Decision Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251 Editing the Objects in a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251 Open an Object from within a Decision . . . . . . . . . . . . .,274
466,. . . . . . . . . . . . . . . . . . . . . . . . . . 251 Edit the Properties of a Decision Node . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252 Reorder Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252 Remove an Object from a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253 Replace an Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253 Update Decisions to Use New Object Versions . . . . . .,269
467,. . . . . . . . . . . . . . . . . . . . . . . . . . 253 Validate a Decision in the Decision Editor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254 Change the Workflow Status of a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254 Copy a Decision URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255 Compare Decision Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255 Compare Decision Code . . . . . . . . . . . . . . . . . . . . . . . . .,267
468,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258 Generate PDF Documentation for a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258 Managing Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260 Duplicating Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260 Delete Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,261
469,262 Rename a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262 Move Decisions to a Different Folder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262 Managing Versions of Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262 Set the Displayed Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262 Create a New Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,266
470,. . . . . . . . . . . . . . . . . 263 Creating a New Version by Using Tags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264 Create a New Version Automatically When You Publish a Decision . . . . . . . . . . . . . 269 Copy the Content of a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269 Delete a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 270 Upgrade Decisions to Use a New Version of a Nested Decision . . . . . . . . . . . . . . . . 270 Determine Which Objects Use a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,278
471,23. Concurrently Checking Out and Committing Rule Set Versions . . . . . . . . . . . . . . . . . . 56 Check Out and Commit a Rule Set Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 Determine Who Has a Version Checked Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 Opening the Original Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 Undoing a Check Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57 Managing Version Tags for Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . .,276
472,. . . . . . . . . . . . . . . . 58 Add a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 Remove a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 Modify a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 Publishing a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,262
473,. . . . . . . . 59 Introduction to Publishing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 Publish Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 Testing Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 Ways to Test a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,260
474,63 Test a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 63 Test a Scenario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 Run a Rule-Fired Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 70 Validate a Published Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73 Working with Test and Validation Test Output Data . . . . . . .,267
475,230. Determine Which Objects Use a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271 Checking Out and Committing Decision Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272 About Checking Out and Committing Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272 Checking Out and Committing Included Objects Together with A Decision . . . . . . . 273 Checking Out and Committing Objects from within A Decision . . . . . . . . . . . . . . . . . . 274 Concurrently Checking Out and Committing Decision Versions . . . . . . . . . . . . . . . . . 274 Check Out and Commit a Decision Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275 Determine Whether a Version Is Checked Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,287
476,276 Determine Who Has a Version Checked Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276 Opening the Original Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277 Undoing a Check Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277 Managing Version Tags for Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277 Add a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,267
477,231. Where Can I Publish Decisions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279 Publishing Decisions That Include Analytic Store Models . . . . . . . . . . . . . . . . . . . . . . 281 Publish Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281 Testing Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284 Ways to Test a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,268
478,. . . . . . . . . 284 Test a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285 Test a Scenario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 289 Run a Rule-Fired Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298 Run a Path Tracking Analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301 Content That Is Used by Tests and Scenarios for Decisions .,270
479,. . . . . . . . . . . . . . . . . . . 303 Validate a Published Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303 Working with Test and Validation Test Output Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305 Status Icons for Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306 Manage Comments for Decision Nodes and Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306 Executing Published Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,265
480,"232. Using SAS Workflow with SAS Intelligent Decisioning About the SID Asset Approval Workflow SAS Intelligent Decisioning provides a predefined approval workflow for decisions. This workflow is named SID Asset Approval. Your administrator can enable this workflow for decisions in SAS Intelligent Decisioning by turning on the sas.decisions.workflow.enabled configuration property. For more information, see “Enable the Asset Approval Workflow” in SAS Intelligent Decisioning: Administrator’s Guide . When the workflow is enabled, a new instance of the workflow is started each time a new decision or a new version of an existing decision is created in SAS Intelligent Decisioning . A workflow is associated with a specific version of a decision. Each decision version that is actively being worked on has its own workflow instance. Decisions that already existed before the workflow was enabled are not automatically put into the workflow. To put these decisions into the workflow, you must create a new version of the decision. As the users who are responsible for developing, testing, reviewing, approving, and deploying a particular version of a decision each finish their tasks, they set the status of the workflow to the appropriate value. To set workflow status values, you must be included in the appropriate SAS Intelligent Decisioning workflow permissions group. See “User Roles in the Workflow” on page 216 for more information. IMPORTANT Do not modify the SID Asset Approval workflow. Updates to your system will overwrite any customized changes to the workflow. User Roles in the Workflow Users that participate in the SID Asset Approval workflow can have up to four different roles: Author creates, develops, and tests the decision in SAS Intelligent Decisioning . When the workflow is enabled, and the author creates a new decision or a new version of an existing decision, the decision status is automatically set to Developing. When the author is ready for the new decision version to be reviewed, the author sets the status to Review-ready. Before the author sets the status to Review-216 Chapter 8 / Working with Decisions",391
481,"233. ready, it is recommended that the author verify that the objects used in the decision are locked and cannot be edited. Authors must be included in the SIDWFAuthor custom user group. Reviewer reviews the new version and decides whether to approve it. For example, the reviewer might compare the new version against the previously approved version and review the tests that were run by the author. The reviewer approves the decision by setting the status to Approved. The reviewer rejects the decision by setting the status back to Developing. Reviewers must be included in the SIDWFReviewer custom user group. TIP If the sas.decisions.workflow.authorMayApprove configuration option is turned on, then users who are a member of both the SIDWFAuthor and the SIDWFReviewer custom user groups can approve work that they authored. Deployer determines whether the new version can be published and promoted to other environments for additional testing and production. If the version can be deployed, this user sets the status to Deployment-ready. When the version is ready to be deployed, the deployer can publish and promote the version, and set the status to Deployed. Deployers must be included in the SIDWFDeployer custom user group. Auditor view workflow status change histories and produce audit reports. Auditors must be in at least one of the four user groups described in “Granting Access to the History of Workflow Status Changes” in SAS Intelligent Decisioning: Administrator’s Guide . Administrator can perform any task that the author, reviewer, auditor, or deployer can perform. SAS Intelligent Decisioning workflow administrators must be included in the SIDWFAdmin custom user group. TIP Members of the SAS Administrators group also have permission to make all status changes. Note: Users in all roles can publish a decision, but it is strongly recommended that only users who have the role of Deployer or Administrator be permitted to publish decisions to testing and production environments. In cases where decisions are published to a Git repository, it is recommended that only users with the roles of Deployer or Administrator have access to the Git repository. For information about defining custom user groups for the workflow, see “Define Asset Approval Workflow User Groups” in SAS Intelligent Decisioning: Administrator’s Guide .Using SAS Workflow with SAS Intelligent Decisioning 217",457
482,"234. Decision Status Values in the Workflow The basic movement of a decision version through the workflow status values is shown in the following figure. Until the version’s status is set to Deployed, the version can be moved back to a previous status value. The following figure shows all of the possible transitions between status values. Note: These diagrams do not show the actual workflow. They show only the possible changes in a version’s status value as it moves through the workflow. When the SID Asset Approval workflow is enabled, the Status column in the Decisions category view shows the current status of the latest version of each decision that was created when the workflow was enabled. The same status value is displayed on the Properties tab and in the Properties panel in the Decisions category view. The Status column is blank for decisions that were created when the workflow was not enabled. The Status column on the Versions tab displays the status value for each version of a decision. On the Versions tab, you can click to view or change the version’s status and to edit the comments that are associated with the version’s status. For more information, see “Change the Workflow Status of a Decision” on page 254. If a version's status is not set to Developing, appears beside the version number in the Version column. You can edit or delete a decision version only if its status is set to Developing. You can delete a version only if its status is blank, or if its status is set to Developing and the version’s status has never been set to Deployed. After a version’s status has been set to Deployed, the version cannot be deleted, and its status cannot be changed. To make additional changes to the decision, you must create a new version. The icon also appears next to the version number for any version that is not the latest version. You can edit the content of only the latest version of a decision, and you can edit its content only if its status is Developing. You can change the workflow status of any version if you have the appropriate permissions and the decision’s status has never been set to Deployed.218 Chapter 8 / Working with Decisions",431
483,"235. Note: A workflow can be canceled by an administrator in SAS Workflow Manager if its status has not been set to Deployed. View the Status Change History You must have permission to view the status history. For more information, see “Granting Access to the History of Workflow Status Changes” in SAS Intelligent Decisioning: Administrator’s Guide . To view the history of workflow status changes for a decision: 1Open the decision, click , and select View status change history . The Status Change History Range window appears. 2Select the dates or versions for which you want to view the history: nSelect Dates , select a start date, and, if needed, select an end date. nSelect Versions , and, if needed, select a different start version and end version. 3Click OK. The Status Change History window appears. To download a status history report in the Status Change History window, click Download . SAS Intelligent Decisioning downloads the report as a comma- separated values (CSV) file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Display and Export the Included Object Report for Decisions That Are in a Workflow To display the versions of the objects that are included in a decision version that is in a workflow, click in the Status column on the Versions tab for that decision version. The Included Objects window appears. For assignment rule sets, filtering rule sets, nested decisions, and code files, this window lists each object and the version that is used in the decision. For treatment groups and for lookup tables that are referenced by other objects, the window lists the active version. Note: This report does not list common rule sets. To export the Included Objects report: 1Click Export in the Included Objects window. The Create Document window appears. 2Enter a file name for the report.Using SAS Workflow with SAS Intelligent Decisioning 219",422
484,"236. 3Select either CSV or PDF, and click Create . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Note: Approving a decision does not automatically lock the objects that are included in the decision. If you do not lock the included objects before a decision is approved, the included objects can be modified after the decision is approved. Create a Decision 1Click to navigate to the Decisions category view. 2Click New Decision . The New Decision window appears. 3Enter a name for the decision if you do not want to use the default name. Decision names are limited to 100 characters and must be unique within a folder. Note: Some publishing destinations restrict the characters that can be used in the published name of a decision. For more information, see Table 8.4 on page 282. 4(Optional) Enter a description for the new decision. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 5Click , and select the folder where you want to save the decision. 6Click Save . SAS Intelligent Decisioning opens the new decision and displays the Decision Flow tab. TIP Objects that are saved in a folder for which the check-out and commit feature is enabled, such as the Decision Repository folder, must be checked out before they can be edited. 7(Optional) If the decision is in a folder for which the check-out and commit feature is enabled, click the Versions tab and check out the latest version of the decision. For more information, see “Check Out and Commit a Decision Version” on page 275. 8Add objects, and if needed, add variables to the decision. For more information, see “Adding Objects to a Decision” on page 230 and “Managing the Variables in a Decision” on page 222.220 Chapter 8 / Working with Decisions",431
485,"237. 9Click to save the decision. 10(Optional) If the SID Asset Approval workflow is enabled at your site, click Move to status , and change the decision’s status. For more information, see “Using SAS Workflow with SAS Intelligent Decisioning” on page 216 and “Change the Workflow Status of a Decision” on page 254. TIP If the workflow is not enabled at your site, Move to status does not appear in the SAS Intelligent Decisioning interface. Views for Editing a Decision The Decision Flow Tab versus the Decision Tab There are two tabs on which you can view and edit decisions. nOn the Decision Flow tab, you can edit a decision by using a graphical editor. To add objects to a decision, right-click on a node to display a menu or click or . To choose objects that have already been defined by navigating to their location, click . To add branches, record contacts nodes, or create new objects by selecting the object type, click . nOn the Decision tab, you can edit the decision by using a tabular view similar to the rule set editor. To add objects to a decision, click Add if nothing is selected, or select Edit ð Add if a decision node is already selected. You can add an existing object or click the New button in the file selection window for custom code file types to create new objects. Save your work before you switch tabs. Click to refresh the view in a tab. Controlling the Tab Display On the Decision Flow tab: nClick to open the properties panel for the selected object. Click to hide the properties panel. nClick to open the diagram overview. The diagram overview is a scaled-down version of the entire diagram. You can pan across the diagram and position the view over different sections of the diagram. The section that is currently visible on the screen is outlined. The overview is useful when a decision diagram is too large to display all of the nodes on one screen.Views for Editing a Decision 221",400
486,"238. nClick to switch between displaying cross-branch links as either dashed lines or as nodes. See “Overview of Cross-Branch Links” on page 244 for more information. nClick to switch between displaying decision node titles on one line or on two lines. On the Decision tab: nClick or to collapse or expand a single node in the decision. nClick or to collapse or expand all of the nodes in the decision. Managing the Variables in a Decision About Variables The Properties of a Variable Note: For information about data grid variables, see “Using Data Grids in SAS Intelligent Decisioning” in SAS Intelligent Decisioning: Using Data Grids .PropertyDescriptionNameVariable names must start with a letter or an underscore (_), and they can contain only alphanumeric characters and the underscore. Variable names can be up to 32 characters long. They must be unique within a decision. Note: SAS Intelligent Decisioning does not support double-byte character set (DBCS) characters in variable names. Note: Do not use any of these operators or keywords as variable names: AND, OR, IN, NOT, LIKE, TRUE, or FALSE. Do not use _N_ or any DS2 reserved word as a variable name. See “Reserved Words in the DS2 Language” in SAS DS2 Programmer’s Guide for information about reserved words in the DS2 language.Data typeSAS Intelligent Decisioning supports the following data types: Boolean, character, data grid, date, datetime, decimal, and integer. Binary and varying-length binary variables are supported only in decisions. Binary variables are supported only as input variables or temporary variables in order to support models that require binary data. For Boolean variables, you can select True or False for the initial value. However, SAS Intelligent Decisioning represents Boolean 222 Chapter 8 / Working with Decisions",369
487,"239. PropertyDescriptionvalues by using the numbers 1 and 0 in the code that it generates. When SAS Intelligent Decisioning is evaluating Boolean expressions, any non-zero number is considered True. When you are entering expressions, specify 1 for True and 0 for False. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.Input and OutputA variable can be an input variable, an output variable, both, or neither (a temporary variable). See “Input Variables, Output Variables, and Temporary Variables” on page 224 for more information.LengthThe length for Boolean and numeric variable types is set automatically. For output-only data grid variables, the length is set to the value that you specify. For output-only character variables in decisions that are published to container destinations or to SAS Micro Analytic Service destinations, the length that you specify is ignored unless the sas.decisions.variable.length.honorOutputLengthInMAS configuration option is turned on. For more information,see “sas.decisions.variable.length” in SAS Intelligent Decisioning: Administrator’s Guide . For character variables and data grid variables that are input-only or input-output variables, the variableLengthOverridden configuration property determines how the length is set. By default, this property is set to Off, and the length is set to the length in the input data. When the variableLengthOverridden property is set to On, the length of input-only and input-output character variables and data grid variables is set to the value that you specify. For more information, see “sas.decisions.variableLengthOverridden” in SAS Intelligent Decisioning: Administrator’s Guide . The maximum length for character variables (outside of a data grid), data grid variables, binary variables, and varying-length binary variables is 10485760 characters. The maximum length for character variables within a data grid is 32767 characters.Initial valueYou can specify an initial value for all data types except data grid, binary, and varying-length binary types. Initial values are used only at run time and only for output-only variables. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric.",487
488,24. Status Icons for Tests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 Manage Comments for a Rule Set Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 Executing Published Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 Executing Content Published to SAS Micro Analytic Service Destinations . . . . . . . . 77 Executing Content That Has Been Published to SAS Cloud Analytic Services Destinations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 Content Executed by Published Rule Sets . . . . . . . . . . . . . . .,280
489,". . . . . . . . . . . . . . . . . . . . . . 79 Importing and Exporting Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 Import a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 Export a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 About Rules and Rule Set Types A rule specifies conditions to be evaluated, and it can also specify actions to be taken if those conditions are satisfied. Rules are grouped together into rule sets. Rule sets are logical collections of rules that are grouped together because of interactions or dependencies between the rules or because they are processed together after they are published. A rule set can be one of following types: filtering rule sets contain rules that correspond to the form:IF condition_expressions These rules contain only IF statements.",309
490,"240. Input Variables, Output Variables, and Temporary Variables For each variable, you must specify whether the variable is an input variable, an output variable, both an input variable and an output variable, or a temporary variable. nInput variables are variables that are present in the input table for a decision. When a decision is deployed in a production system, all input variables must be mapped to table columns in input data. When you test a decision in SAS Intelligent Decisioning , for each input variable, you can either map it to a table column or specify a constant as its input value. If you choose not to map a variable to either a table column or a static value, SAS Intelligent Decisioning displays a warning message. When you create or edit a variable, clear the Input check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. nOutput variables are variables that are written to the output table that is created when a decision is run. When you create or edit a variable, clear the Output check box for any variable that you want to exclude from the output data. nTemporary variables are variables that are not present in the input data, and they are not written to the output table. To create a temporary variable for use only while a decision is executing, clear both the Input and Output check boxes. When you create a new variable, it is created as an input-output variable by default. Note: Binary variables are supported in decisions only as input variables or temporary variables in order to support models that require binary data. Add Variables from a Data Table 1On the Variables tab, click the Decision Variables subtab. 2Click Add variable and select Data table . The Choose Data window appears, and the list of SAS Cloud Analytic Services (CAS) tables that are loaded into memory is displayed on the Available tab. If the table that you need does not appear in the list of available tables, try the following solutions: nIf the table appears on the Data Sources tab, right-click on the table, and select Load to load the table into memory. If the table does not appear on the Available tab, click . nIf the table does not appear on the Data Sources tab, import the data. The process of importing the data loads it into memory.",474
491,"241. 3Select the table from which you want to import variables, and click OK. The Add Variables window appears. 4Select the variables that you want to import and click . To import all of the variables in the table, click . 5Click Add to add the select variables, or click Add and replace to replace existing variables that have the same name. 6On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables, Output Variables, and Temporary Variables” on page 224 for more information. TIP To filter the variable list, right-click on the Variable column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. Add Variables from a Rule Set, Decision, or Code File 1On the Variables tab, click the Decision Variables subtab. 2Click Add variable , and select Rule set , Decision , or Code file . The Choose an Item window appears. 3Select the object from which you want to import variables, and click OK. The Add Variables window appears. 4Select the variables that you want to import and click . To import all of the variables in the table, click . 5Click Add to add the selected variables, or select Add and replace to replace existing variables that have the same name. 6On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables, Output Variables, and Temporary Variables” on page 224 for more information. Add Global Variables to a Decision In order to use a global variable in a decision, the global variable must be activated. Instructions for defining and activating global variables are in “Create a New Global Variable” on page 142 and “Activate a Global Variable” on page 149. Note: You can add a global variable that has not been activated to a decision and publish the decision, but the variable’s value is set to missing until the global variable is activatedManaging the Variables in a Decision 225",422
492,"242. 1On the Variables tab, click the Global Variables subtab. 2Click Select Variables . The Select Variables window appears. 3Select the check boxes for the variables that you want to add to the decision, and click OK. 4(Optional) Select the Output check box if you want the value of the variable to be written to the output table that is generated when the decision is run. TIP In the Global Variables category view, the Value column displays the value of the latest version of the variable. The Activated Value column displays the value of the currently active version. A check mark in the Deleted column indicates that the variable has been deleted from the list of global variables. Create Custom Variables on the Variables Tab Note: For information about data grid variables, see “Defining Data Grid Variables” in SAS Intelligent Decisioning: Using Data Grids . To create custom variables on the Variables tab: 1Click the Decision Variables subtab. 2Click Add variable and select Custom variable . The Add Variables window appears. 3Complete these steps for each variable that you want to add: aEnter the name of the new variable, and select the data type of the variable. See “The Properties of a Variable” on page 222 for additional information. TIP To re-add a variable that was used in a locked version, you must specify the same data type that was used in the previous version. b(Optional) Click Optional to display the Description , Initial value , and Length fields. c(Optional) Enter a length, initial value, and description for the new variable. Whether you can specify an intial value or length for the variable depends on the variable's data type. See “The Properties of a Variable” on page 222 for additional information. TIP You can specify an expression as the intial value only for variables of type character, integer, decimal, or boolean. To enter an expression, click to open the expression editor. For more information, see “Using the Expression Editor” on page 33.226 Chapter 8 / Working with Decisions",422
493,"243. dClick Add. SAS Intelligent Decisioning adds the new variable to the table of variables at the bottom of the window. By default, variables are added to the table as both input and output variables. eVerify that the Input and Output check boxes are selected correctly for each variable. nClear the Input check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. nClear the Output check box for any variable that you want to exclude from the output data. nClear both the Input and Output check boxes to create a temporary variable. 4(Optional) Modify the variable properties in the table of variables. 5Click OK to add the variables and close the Add Variables window. Duplicate a Variable 1On the Variables tab, click the Decision Variables subtab. 2Select the variable that you want to duplicate, click , and select Duplicate . The Duplicate Variable window appears. 3Enter a new name for the duplicate variable. 4(Optional) Enter a description for the variable. 5Click Duplicate . Importing and Exporting Variables Import Variables You can import variables from either comma-delimited (CSV) files or from JavaScript Object Notation (JSON) files. These files must conform to formats described in Appendix 2, “Import File Formats,” on page 325. These formats are the same formats that are created when you export variables. 1Open the decision into which you want to import variables. 2On the Variables tab, click Import , and select either Comma-delimited (*.csv) or JSON (*.json) . The Import File window appears. 3Click Browse and select the file from which you want to import variables. Managing the Variables in a Decision 227",361
494,"244. 4Specify the encoding of the CSV file. 5Select Add variables to append the variables to the current list of variables, or select Replace variables to replace the current list of variables with the imported variables. TIP To add new columns to an existing data grid variable, select Replace variables . Note: If you replace the list of variables in a decision and a variable is used in the decision is not included in the import file, the variable is removed from the list of variables. An error marker is added to the nodes that use that variable in the diagram on the Decision Flow tab. 6Click Import , and then click to import the variables and save the decision. Export Variables 1Open the decision from which you want to export variables. 2On the Decision Variables tab, select the variables that you want to export. 3Click Export , and select the file type to which you want to export the variables. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Delete Variables Note: You cannot delete a variable if it is used in the current version of an object. You can delete variables from the current version if they are used only in locked versions, but those variables are still included in the locked versions. 1On the Variables tab, click the Decision Variables subtab. 2Select the check box for the variables that you want to delete, click , and select Delete .228 Chapter 8 / Working with Decisions",339
495,"245. Edit Variable Properties On the Variables tab, click the Decision Variables subtab, and click on the name of the variable that you want to edit. The Edit Variable window appears. Edit the properties as needed, and then click OK. Note: When you rename a variable, references to that variable within the same object change to use the new name. You cannot change the name or data type of a variable that is used in locked versions. See “The Properties of a Variable” on page 222 for additional information. Edit Metadata for Data Grid Variables For information, see “Editing Data Grid Variable Metadata” in SAS Intelligent Decisioning: Using Data Grids . Determine Which Objects Use a Particular Variable 1On either the Decision Variables subtab or the Global Variables subtab, select the check box for the variable, click , and select View used by report . The Select the Objects to Include in the Report window appears. 2Select the objects within which you want to search for the selected variable. Select Search the current object and all objects included within it to search only the objects that are included in the current decision and in the objects that are used in the decision. Select Search all objects in the SAS Intelligent Decisioning environment to search all of the rule sets, decisions, and code files that are defined in your current environment. 3Click Search . In the report, you can use the Filter field to filter the list of objects based on the object names. If the variable that was selected in Step 1 above is a data grid variable, and if you are interested only in a specific column within the data grid, you can select the column in the Column name field, and then click Apply . SAS Intelligent Decisioning narrows the search results to only the objects that use the data grid with the selected column. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status.Managing the Variables in a Decision 229",455
496,"246. Click next to nested decision names to display the list of objects within the nested decision that use the selected variable. Click and to open and close the list objects within the nested decision. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Adding Objects to a Decision Add an Existing Object 1On the Decision Flow tab, click to open the Content Selection window, and then drag the object from the list onto the diagram where you want to add it. On the Decision tab: aClick Add and select the object type that you want to add to the decision. If an object in the decision is selected, select Edit ð Add, and then select the object type. The Content Selection window appears. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. bSelect the object that you want to add, and click OK. Note: The objects that are included in a decision determine the destination types to which you can publish the decision. For more information, see “Where Can I Publish Decisions?” on page 279. IMPORTANT It is recommended that you do not add a decision as a nested decision within itself. If you are using the default settings, and you have not already defined decision variables with the same name and data type as the object’s input and output variables, SAS Intelligent Decisioning displays the following message: Some objects in the decision define variables for which no corresponding decision variables have been created. A decision that includes an object must define decision variables to which you can map the object’s variables. If a decision does not already have a variable of the same name and data type as an object’s variable, then SAS Intelligent Decisioning displays the message. For more information, see “About Decision Variables and Mapping” on page 247.230 Chapter 8 / Working with Decisions",418
497,"247. 2(Optional) Click in the toolbar, and select Add missing variables to add any missing variables to the decision. For more information, see “Add Missing Variables” . 3(Optional) Reorder the objects in the decision. For more information, see “Editing the Objects in a Decision” on page 251. 4(Optional) For rule sets, code files, models, and nested decisions, select the version of the object that you want to include in the decision in the Properties panel for the object. For models, if you select a specific version, the decision always uses that version, even if newer versions of the model are deployed. If you select latest , the decision always uses the most recently deployed version of the model. TIP You can change the version of most objects at any time by changing the version on the Properties panel. See “Edit the Properties of a Decision Node” on page 252 for more information. You cannot specify the version of a treatment group that is used in a decision. For more information, see “Content That Is Used by Tests and Scenarios for Decisions” on page 303 and “Content Executed by Published Decisions” on page 309. 5(Optional) If you are adding an object that uses a function that is defined in a custom context file, specify the custom context file on the Properties tab. See “Associating a Custom Context File with a Decision” on page 164 for more information. 6(Optional) On the Properties tab, select the Subject ID variable and the Subject level variable that you want to associate with subject contact records that are recorded by the decision. TIP If you do not specify the subject ID or subject level, the subject ID or subject level is recorded as NONE in the subject contact history. For more information about subjects and subject contact histories, see the following topics: n“About Treatments and Decisions” on page 84 n“Example: A Decision That Includes a Treatment Group” on page 85 n“Adding Record Contacts Nodes” on page 233 n“Predefined Lookup Tables” on page 116 7Verify that the object’s variables are mapped to the correct decision variables. For more information, see “Mapping Variables within a Decision” on page 247.Adding Objects to a Decision 231",468
498,"248. Create and Add a New Object On the Decision Flow tab, you can create and add new objects of any type except models. On the Decision tab, you can create and add new data query files, DS2 code files, or Python code files. 1On the Decision Flow tab, click , and drag the new object type onto the diagram where you want to add it. The New object window appears. On the Decision tab: aClick Add and select Data query , DS2 code file , or Python code file . If an object in the decision is selected, select Edit ð Add, and then select the object type. The Content Selection window appears. bClick New object type . The New object type window appears. 2Enter a name for the new object if you do not want to use the default name. File names are limited to 32 characters and must be unique within a folder. 3(Optional) Enter a description. Descriptions are limited to 1000 characters. TIP You can edit the description at any time in the Properties panel. 4Click , and select the folder in which you want to save the object. 5(Optional) If you are creating a new data query file, select the editor that you want to use to create the file. TIP For data query files that you choose to edit in SAS Studio, SAS Intelligent Decisioning adds .cqy.df to the file name, and the file type is displayed as Data Query . For data query files that you choose to edit in the SQL editor, the file type is displayed as SQL. These files can return either a data grid or a single row of scalar variables. You can select the output type on the Properties tab. For more information, see “Query Output Types and Editors” on page 160. 6Click Save . SAS Intelligent Decisioning creates a new object and adds it to the decision. 7Click to save the decision. 8In the Properties panel on the Decision Flow tab, click Open to open the new file in the editor. Alternatively, on the Decision tab, click , click the Properties tab, and then click Open to open the new file in the editor. 9Define the content for the new object. For more information, see the following topics:232 Chapter 8 / Working with Decisions",472
499,"249. nChapter 2, “Working with Rule Sets” nChapter 3, “Working with Treatments and Treatment Groups” nChapter 6, “Using Custom Code Files” nChapter 8, “Working with Decisions” 10Click and Close to save and close the new object. If you added new variables to the object, SAS Intelligent Decisioning displays the message Some objects in the decision define variables for which no corresponding decision variables have been created. 11(Optional) Click in the toolbar, and select Add missing variables to add any missing variables to the decision. For more information, see “About Decision Variables and Mapping” and “Add Missing Variables” . Adding Record Contacts Nodes About Recording Contacts The primary purpose of record contacts nodes is to record the outcome of a decision. You can use record contacts nodes to record the values of specific variables at specific points in a decision. For treatment groups, a record contacts node records metadata for the treatments. IMPORTANT Decisions that include record contacts nodes cannot be published to container destinations. Record contacts nodes record information when the decision that they are in is executed in the publishing destination. The behavior of record contacts nodes differs based on whether the decision is published to a SAS Micro Analytic destination or to a destination of another type. nFor decisions that are published to a SAS Micro Analytic Services destination, the record contacts node writes a record to the subject contact history. The record contains the information that you specified that you want to track, such as the data grid of treatments returned by the decision and the values of other variables. In addition, the record contacts node creates an output variable, the record contacts variable, that contains a response tracking code. An application, such as a customer service application, can use this response tracking code to add additional data to the subject contacts history. nFor destinations of other types, the record contacts node does not write a record to the subject contact history. Instead, the information that you specified that you want to track is written to the record contacts variable. The name of this variable is based on the name of the record contacts node: rt_node-name . This variable is a character string, and it also contains the response tracking code. You can issue a POST request to post the data to the subject contact history. The POST request type is application/vnd.sas.decision.subject.contact+json . For more information, see the Subject Contacts API documentation.Adding Objects to a Decision 233",495
500,"25. common rule sets enable you to share the same rules among different assignment rule sets without redefining the rules in each assignment rule set. Common rule sets can contain assignment statements, IF-THEN statements, and IF-THEN-ELSE statements just like an assignment rule set can. You add common rule sets to assignment rule sets. When the assignment rule set executes, the rules in the common rule set execute as if they were defined directly in the assignment rule set. Any change to a common rule set affects all assignment rule sets that include the common rule set. About Condition and Action Expressions An assignment rule corresponds to this form:IF condition_expressions THEN action_expressions For example, suppose you have the following rule:IF customer_debt > customer_assets THEN approval_status = 'Decline' In this case, customer_debt > customer_assets is a condition expression, and approval_status = ""Decline"" is an action expression. For example, the following figure shows the rule above as it appears in the rule set editor: Note: Filtering rules do not contain action expressions. A single assignment rule can contain multiple condition expressions and action expressions. Multiple condition expressions within the same rule are joined together with the AND operand. For example, suppose you define the following rule in SAS Intelligent Decisioning : SAS Intelligent Decisioning generates the following rule:IF ((customer_debts > customer_assets) AND (credit_score < 750) AND (isHomeowner = false)) THEN approval_status = 'Decline' 14Chapter 2 / Working with Rule Sets",313
501,"250. A decision can contain multiple record contacts nodes. For example, your decision might have different paths for different channels, and you might want a record contacts node on each path. Add a Record Contacts Node 1On the Decision Flow tab, select , and drag the Record Contacts object onto the diagram where you want to add it. SAS Intelligent Decisioning opens the Properties panel for the node. Alternatively, on the Decision tab, select Add ð Record contacts . If an object in the decision is selected, select Edit ð Add below ð Record contacts . 2(Recommended) Rename the record contacts node. Record contacts node names must be unique within the decision. To rename the node: aOn the Decision Flow tab, click for the node, and select Rename . Alternatively, on the Decision tab, select the node, and select Edit ð Rename . The Rename window appears. bEnter a new name and click Rename . TIP When a decision is executed in a destination other than a SAS Micro Analytic Service destination, the record contacts node writes information to a variable. The name of this variable is based on the name of the record contacts node: rt_node-name . If you define a variable with this name on the Variables tab, the data in your decision variable will be overwritten by the record contacts node. To avoid this, rename either the record contacts node or the decision variable. 3Click to edit the properties of the record contacts node. 4(Optional) Select the variable that contains the channel information to which you want to attribute the contact data that is recorded by the node. 5(Optional) Select the variables whose values you want to record. Note: You cannot track data grids in record contacts node because of the amount of space required to store the data. For character variables, SAS Intelligent Decisioning stores only the first 4000 characters of the value. 6(Optional) Select Track treatments if you want to record which treatments are sent to the calling application. Then, select the data grid variable for the specific set of treatments that you want to track. TIP If you specify a subject ID or subject level in the decision properties, this information is included in the records that are generated for the record contacts node. If you do not specify the subject ID or subject level, the subject ID or subject level is recorded as NONE .234 Chapter 8 / Working with Decisions",483
502,"251. 7(Optional) Clear the Record rule-fired data check box if you do not want to record the rule-fired information for all rules in the decision up to the point at which the record contacts node is included. Note: This rule-fired data is recorded in the subject contact history. The rule- fired data that is recorded when you select Record rule-fired data when you publish a rule set or decision is recorded in the ruleFiredFlags column in the output table. 8(Optional) Clear the Record path tracking check box if you do not want to record the path-tracking information for all nodes in the decision up to the point at which the record contacts node is included. Note: This path-tracking data is recorded in the subject contact history. The path-tracking data that is recorded when you select Record path tracking when you publish a decision is recorded in the pathID column in the output table. 9(Optional) Clear the Include in contact policy check box if you do not want this contact record included in aggregate reports for the channel. 10Click OK to save your changes. Adding Branches to a Decision Overview of Branches Branches enable you to add conditional logic to a decision. Depending on the branch type, a branch can have multiple outgoing paths. You can add four types of branches to a decision: n“About Yes/No Branches” on page 236 n“About Equals Branches” on page 238 n“About Range Branches” on page 239 n“About Like Branches” on page 240 The conditions for the branch paths are evaluated in the order in which you specify them. The first path whose condition evaluates to True is taken by the executing decision. The conditions for the remaining branches are not evaluated. You can change the labels used for branch paths in Equals, Range, and Like branches. For more information, see “Customize Branch Path Labels” on page 243.Adding Objects to a Decision 235",394
503,"252. Adding Yes/No Branches About Yes/No Branches A Yes/No branch expression is evaluated as a Boolean expression. A Yes/No branch has a single condition and two outgoing paths: Yes (True) and No (False). The default name for a Yes/No branch is Yes/No , but you can specify a custom name. For example, the following branch tests whether the value of the DEBTINC variable is less than the constant 35.5. The name in the diagram is customized to display the condition that is being tested. The following figure shows the property panel for this branch: For more information, see “Add a Yes/No Branch on the Decision Flow Tab” on page 237 and “Yes/No Branches and THEN/ELSE Clauses” on page 236. Yes/No Branches and THEN/ELSE Clauses Objects in a THEN clause on the Decision tab correspond to nodes in a Yes branch path on the Decision Flow tab. Objects in an ELSE clause correspond to nodes in a No branch path. For example, suppose you have the following nodes on the Decision Flow tab:236 Chapter 8 / Working with Decisions",238
504,"253. The same nodes appear on the Decision tab as an IF-THEN-ELSE statement: Add a Yes/No Branch on the Decision Flow Tab Note: When you add a Yes/No branch, any objects that follow the currently selected object become part of the No path. 1Select , and drag the Branch object from the list of objects onto the diagram where you want to add it. The Create New Branch window appears. 2(Optional) Enter a name for the branch if you do not want to use the default name. The default name is Yes/No . 3Select Yes/No , and click OK. SAS Intelligent Decisioning adds the branch and opens the Properties panel. 4On the Properties panel, click . SAS Intelligent Decisioning opens the expression editor. 5Define the expression for the branch. See “Using the Expression Editor” on page 33 for additional information. 6Click Save in the expression editor to save the expression and return to the decision editor. 7(Optional) Add objects to the Yes and No branch paths. Right-click on the branch node, and select either Add to yes path ð object or Add to no path ð object . For more information, see the following topics:Adding Objects to a Decision 237",257
505,"254. n“Add an Existing Object” on page 230 n“Create and Add a New Object” on page 232 n“Adding Record Contacts Nodes” on page 233 Add a Yes/No Branch on the Decision Tab Note: When you add a Yes/No branch, any objects that follow the currently selected object become part of the ELSE clause. 1Select Add ð Branch . If an object in the decision is selected, select Edit ð Add ð Branch . The Create New Branch window appears. 2(Optional) Enter a name for the branch. 3Select Yes/No , and click OK. SAS Intelligent Decisioning adds an IF-THEN- ELSE statement to the decision. 4For the IF condition, click . SAS Intelligent Decisioning opens the expression editor. 5Define the expression for the branch. See “Using the Expression Editor” on page 33 for additional information. 6Click Save in the expression editor to save the expression and return to the decision editor. 7(Optional) Add objects to the THEN and ELSE clauses. Click Edit and select either Add to yes path ð object-type or Add to no path ð object-type . For more information, see the following topics: n“Add an Existing Object” on page 230 n“Create and Add a New Object” on page 232 n“Adding Record Contacts Nodes” on page 233 Adding Equals, Range, or Like Branches About Equals Branches An Equals branch compares the value of the branch expression to other variables or to literal values. By default, this branch has one outgoing path for each comparison variable or literal value, plus a branch labeled Other for any values that are not included in the branches that you create. However, you can combine an outgoing path with the path that immediately follows it by selecting the OR check box. For example, the following branch compares the value of the character variable MODEL to the string ‘Aventador’, then to ‘Huracan’, and so on, in the order listed in the property panel. The first two comparison strings and the last two strings are combined into one path by using the OR operator.238 Chapter 8 / Working with Decisions",446
506,"255. The following figure shows the properties panel for this branch: For more information, see “Add Equals, Range, or Like Branches” on page 241. About Range Branches A Range branch compares the value of the branch expression against one or more ranges of values. You can specify range values by using variables or constants. This branch has an outgoing path for each range, plus a branch labeled Other for any values that are not included in the branches that you create. For example, the following branch compares the value of the expression credit-balance to three ranges. The first range has no minimum value, so it is treated as if the minimum is negative infinity. The third branch has no maximum value, so it is treated as if the maximum is positive infinity.Adding Objects to a Decision 239",162
507,"256. The following figure shows the properties panel for this branch: For more information, see “Add Equals, Range, or Like Branches” on page 241. About Like Branches A Like branch compares the value of the branch expression against one or more strings by using the LIKE operator. In LIKE expressions, you can use the underscore (_) and percent (%) characters as wildcards. For more information, see “Using the LIKE Operator” on page 38. By default, this branch has one outgoing path for each comparison string, plus a branch labeled Other for any values that are not included in the branches that you create. You can combine paths by selecting the OR check box. For example, the following branch compares the last four characters of the variable EXPIRATIONDATE to determine whether it ends with the characters “2021” or “2022”.240 Chapter 8 / Working with Decisions",181
508,"257. The following figure shows the properties panel for this branch: For more information, see “Add Equals, Range, or Like Branches” on page 241. Add Equals, Range, or Like Branches 1Select , and drag the Branch object from the list of objects onto the diagram where you want to add it. The Create New Branch window appears. 2(Optional) Enter a name for the branch. 3Select Equals , Range , or Like, and click OK. SAS Intelligent Decisioning adds the branch and, if you are working on the Decision Flow tab, opens the Properties panel. 4If you are working on the Decision tab, click to open the Properties window. For more information, see “The Decision Flow Tab versus the Decision Tab” on page 221. 5In the Properties panel or window, click to open the branch expression editor. 6Define the expression for the branch. See “Using the Expression Editor” on page 33 for additional information. 7If you are defining an Equals branch or a Range branch, select the Expression result type . For Like branches, the result of the expression must be a character value.Adding Objects to a Decision 241",244
509,"258. 8For each outgoing path that you want to add to the branch node, complete the following steps: aClick to add the path. Note: SAS Intelligent Decisioning automatically adds a path labeled Other . bSpecify the values or expressions for the path.Branch TypeValues or ExpressionsEqualsSpecify a comparison variable or constant of the branch variable for the path. See “About Equals Branches” on page 238 for more information.RangeSpecify a minimum value, a maximum value, or both for the branch variable. Minimum and maximum values are optional. If you do not specify a minimum value, the minimum is treated as negative infinity. If you do not specify a maximum value, the maximum is treated as positive infinity. If the minimum and maximum are the same value, the path is followed only if the branch variable is equal to that value. The minimum and maximum boundary values are inclusive. If the minimum or maximum values for any ranges are static and overlapping, SAS Intelligent Decisioning displays a warning, but you can still publish the decision. See “About Range Branches” on page 239 for more information.LikeSpecify the LIKE expression for the path in single quotation marks. See “Using the LIKE Operator” on page 38 and “About Like Branches” on page 240 for more information. 9(Optional) Click or to reorder the paths. Branch paths are evaluated in order. The decision follows the first path that evaluates to True. 10(Optional) Combine branch paths. For Equals and Like branches, you can select the OR check box to combine a branch path with the path that immediately follows it. The application combines the conditions for the branch paths by using the OR operator. 11If you are working on the Decision tab, click OK to add the branches to the decision and close the Properties panel. 12In the decision diagram, add objects to the outgoing branch paths. On the Decision Flow tab, right-click on the branch node, and select Add to branch path ð Branch label ð Object type . On the Decision tab, select Edit ð Add to branch path ð Branch label ð Object type . SAS Intelligent Decisioning opens the appropriate window, depending on the object type. For more information, see the following topics:242 Chapter 8 / Working with Decisions",465
510,"259. n“Add an Existing Object” on page 230 n“Create and Add a New Object” on page 232 n“Adding Record Contacts Nodes” on page 233 Customize Branch Path Labels You can change the labels that are used for branch paths in Equals, Range, and Like branches. 1In the Properties panel for the branch, click More . The More Branching Properties window appears. 2Edit the labels in the Alternate Label field for each branch path that you want to change, and click Close to close the More Branching Properties window. TIP You can also change the branch variable and search branch path values in the More Branching Properties window. Rename Branches The default name for a branch is the branch type, such as ""Equals"" or ""Yes/No"". Multiple branches in the same decision can have the same name. To rename any branch type: 1Select the branch. 2In the Name field on the Properties panel for the branch, click 3Enter the new name, and click Rename . Alternatively, to rename an Equals, Range, or Like branch: 1Right-click on the branch node, and select Rename . The Rename window appears. 2Enter the new name, and click Rename . The maximum length is 100 characters. Adding Objects to a Decision 243",268
511,"26. Create a New Rule Set 1Click to navigate to the Rule Sets category view. 2Click New Rule Set . The New Rule Set window appears. 3Enter a name for the rule set if you do not want to use the default name. Rule set names are limited to 100 characters and must be unique within a folder. Rule set names are case-sensitive. Note: Some publishing destinations restrict the characters that can be used in the published name of a rule set. For more information, see Table 2.5 on page 61. 4Select the rule set type. See “About Rules and Rule Set Types” on page 13 for descriptions of each rule set type. IMPORTANT You can publish decisions that include filtering rule sets to SAS Micro Analytic Service destinations and to container destinations, but you cannot publish the filtering rule sets themselves to SAS Micro Analytic Service destinations, to Git destinations, or to container destinations. 5(Optional) Enter a description for the new rule set. Descriptions are limited to 1000 characters. TIP You can edit the description later on the Properties tab. 6Click , and select the folder where you want to save the rule set. 7Click Save . SAS Intelligent Decisioning opens the new rule set and displays the Variables tab. TIP Objects that are saved in a folder for which the check-out and commit feature is enabled, such as the Decision Repository folder, must be checked out before they can be edited. 8(Optional) If the rule set is in a folder for which the check-out and commit feature is enabled, click the Versions tab and check out the latest version of the rule set. For more information, see “Check Out and Commit a Rule Set Version” on page 56. 9Add variables and rules to the rule set. For more information, see the following topics: n“Managing the Variables in a Rule Set” on page 16Create a New Rule Set 15",399
512,"260. Adding Cross-Branch Links Overview of Cross-Branch Links Cross-branch links enable you to easily reuse components in a decision. You can add a cross-branch link to a target node at a branch level that is the same as or lower than the level of the source node. You can add cross-branch links that link to the End node, but you cannot add a cross-branch link that ends at the Start node. For example, given the decision shown in the following figure, you can add cross- branch links between any of the rule sets. The Range branch has one path for each of three different ranges of loan values. Suppose you want all three paths to include the Set_interest_rate rule set, and you want both the mid-range and Other path to include the Verify_equity_amt rule set. You can add a cross-branch link from the Review_collateral node to the Verify_equity_amt node and a cross-branch link from the Verify_equity_amt node to the Set_interest_rate node.244 Chapter 8 / Working with Decisions",215
513,"261. Figure 8.1 Cross-Branch Links Displayed as Arcs You can display cross-branch links as either arcs or nodes. By default, cross-branch links are displayed as arcs. To switch between the two views, click in the upper right corner of the diagram. Figure 8.2 Cross-Branch Links Displayed as Nodes TIP To remove or edit a cross-branch link that is displayed as an arc, right- click on the dashed line and select Remove or Properties . When you select a cross-branch link node, both the selected node and the link’s target node are highlighted.Adding Objects to a Decision 245",132
514,"262. Add a Cross-Branch Link 1Right-click the source node (the node where you want the link to start), and select Add ð Cross-branch link . The New Cross-branch Path window appears. This window displays the nodes that you can link to from the current source node. When you select a target node in the New Cross-branch Path window, that node is highlighted in the decision diagram. 2Select the node to which you want to link, and click OK. Add a Micro Analytic Module When you publish content to a SAS Micro Analytic Service destination, SAS Intelligent Decisioning generates code for the content and writes that code as a module in SAS Micro Analytic Service. You can use a Micro Analytic Module node in a decision to call a SAS Micro Analytic Service module. Micro Analytic Module nodes use the MASCall package to call published modules. You can call the modules only for published decisions. When you add a Micro Analytic Module node to a decision, the decision always uses the most recently published version of the selected module. You do not need to edit and republish the decision in order to pick up newly published versions of the selected modules. Note: SAS Micro Analytic Service modules that are referenced in a Micro Analytic Module node can use data grids as local variables, but the data grids cannot be passed as input or output parameters to the module. To execute a decision that contains a Micro Analytic Module node, the setting of the SAS Intelligent Decisioning sas.decisions.masnode.removeTrailingUnderscoresFromInput configuration option must match the setting of the SAS Micro Analytic Service configuration option service.removetrailingunderscoresfrominputs . IMPORTANT You can publish decisions that contain Micro Analytic Module nodes only to SAS Micro Analytic Service destinations and Git destinations that are compatible with SAS Micro Analytic Service. Using the %DCM_EXECUTE_DECISION macro to execute in batch a decision that contains a Micro Analytic Module node is not supported. Execution times and performance might be unacceptable. To add a Micro Analytic Module node to a decision: 1On the Decision Flow tab, click , and drag the Micro Analytic Module object onto the diagram where you want to add it. Alternatively, on the Decision tab, select Add ð Micro Analytic Module . If an object in the decision is selected, select Edit ð Add below ð Micro Analytic Module .246 Chapter 8 / Working with Decisions",498
515,"263. The Choose a SAS Micro Analytic Module window appears. 2Click , and select the decision whose module you want to call. 3Click Browse . SAS Intelligent Decisioning displays the list of published modules for the selected decision. 4Select the module that you want to use, and then click OK. For more information about MASCall packages, see “Performing Calls between SAS Micro Analytic Service Modules” in SAS Micro Analytic Service: Programming and Administration Guide . Mapping Variables within a Decision About Decision Variables and Mapping The objects that you add to a decision, such as models, treatment groups, and other decisions, each define their own variables. Each decision that includes an object must define decision variables to which you can map the object’s variables. By default, if a decision does not already have a variable of the same name and data type as an object's variable, then when you add the object to a decision, SAS Intelligent Decisioning displays the following message: Some objects in the decision define variables for which no corresponding decision variables have been created. You can use the Add missing variables option to add the missing decision variables, or you can turn on the Create variables automatically in decisions setting if you want SAS Intelligent Decisioning to automatically create decision variables. For information, see “Add Missing Variables” on page 248 and “SAS Intelligent Decisioning Settings” on page 8. If you turn on the Create variables automatically in decisions setting, SAS Intelligent Decisioning does not display the message. When you add a treatment group to a decision, SAS Intelligent Decisioning creates a decision variable of type data grid with the name group_name _out. If the treatment group name is longer than 32 characters, then this name is truncated. When you add a data query file to a decision, the decision variables that are created depend on whether the query selects data and on whether the file contains the comment /* include sqlReturnInfo */ .For more information, see “Decision Variables for Data Query Files” on page 161. You can create decision variables with different names, and then change the decision variable mappings on the Input Variables and Output Variables property panels for objects in the decision. For example, suppose you have a decision named Credit Approval, and this decision contains a model named Loan Default and a rule set named Evaluate Credit. The model has an output variable named em_prob .",478
516,"264. decision variable, and you must map the probability input variable of the rule to the em_prob decision variable.Loan Default ModelCredit Approval Decision VariablesCredit Approval Decision• approval • em_prob • income • probability • stateEvaluate Credit Rule SetstateincomeprobabilityprobabilityVariableInput Variablesem_probincomeincomeMaps Toem_probVariableOuput Variablesem_probMaps Toincomeem_probapproval IMPORTANT When the decision is published and run in a production environment, the decision expects the input data to contain variables that have the same name and data type as the decision’s input variables. Add Missing Variables If the Create variables automatically in decisions setting is turned off, SAS Intelligent Decisioning does not automatically add decision variables when you add an object to the decision. In these cases, you can use the Add missing variables option to define decision variables with the same name and data type as the object’s variables and add them to the decision. 1Click and select Add missing variables . 2In the Add Missing Variables window, select the variables that you want to add to the decision, and click Add. SAS Intelligent Decisioning adds the decision variables and maps the object’s variables to the decision variables.248 Chapter 8 / Working with Decisions",246
517,"265. TIP You can turn on the Create variables automatically in decisions setting if you want SAS Intelligent Decisioning to automatically create decision variables. For more information, see “SAS Intelligent Decisioning Settings” on page 8 and “Mapping Variables within a Decision” on page 247. If you change a setting, you must sign out and sign back in to SAS Intelligent Decisioning in order for the changes to take effect. Scoring Rows in a Data Grid Data grid variables are processed like any other character variable unless you do one of the following: nuse data grid functions to process the individual data values within the data grid. For more information, see “Using Data Grid Functions” in SAS Intelligent Decisioning: Using Data Grids . nuse the Score rows in this data grid option to process each row in the data grid. To process the rows within a data grid, select the Score rows in this data grid option on the Input Variables property panel when you are mapping decision variables for the node. If you select this option, you can map the node’s input variables to columns in the data grid instead of to columns in the input table. SAS Intelligent Decisioning changes the default variable mappings to columns in the data grid if columns exist that have the same names as the node's input variables. You can customize the variable mappings as needed. When you select this option, the decision node processes all of the rows in the data grid before execution moves to the next node in the decision. IMPORTANT When the node object is a filtering rule set, and you select Score rows in this data grid , rows that do not meet the criteria defined by the rules are removed from the data grid. Mapping Data Grid Variables When you add an object to a decision and the object contains a data grid variable, SAS Intelligent Decisioning creates a decision variable for the data grid in the same way that it creates decision variables for object variables of other data types. When you select Score rows in this data grid for an object that uses a data grid, you can choose to map the columns in the object’s data grid variable either to columns in the decision’s data grid variable or to other decision variables. In the lists of variables in the Input Variables property pane, the decision’s scalar variables are identified by the icon, and the decision’s data grid columns are identified by the icon.",472
518,"266. Map Object Variables to Decision Variables On the Decision Flow tab, complete these steps: 1Select the object whose variables you want to map. 2(Optional) Click to open the Input Variables property panel. 3(Optional) Select Score rows in this data grid , and select the name of the data grid. Note: This option appears only for objects that process data grid variables. For more information, see “Scoring Rows in a Data Grid” on page 249. 4(Optional) For each object variable in the Input Variable column, select the decision variable that you want to map it to in the Maps To column. 5(Optional) Click . 6If the object that you selected is a treatment group, select the data grid that contains the outcome of the treatment group. 7For each object variable in the Output Variable column, select the decision variable that you want to map it to in the Maps To column. For information about mapping variables for data query files, see “Decision Variables for Data Query Files” on page 161. On the Decision tab, complete these steps: 1Select the object for which you want to map variables. 2Click to open the Properties window. 3(Optional) Select Score rows in this data grid , and select the name of the data grid. Note: This option appears only for rule sets, models, and decisions that process data grid variables. For more information, see “Scoring Rows in a Data Grid” on page 249. 4For each object variable in the Input Variable column, select the decision variable that you want to map it to in the Maps To column. 5If the selected node is a treatment group, select the data grid that contains the outcome of the treatment group. 6For each object variable in the Output Variable column, select the decision variable that you want to map it to in the Maps To column. For information about mapping variables for data query files, see “Decision Variables for Data Query Files” on page 161. 7Click OK to close the Properties window.250 Chapter 8 / Working with Decisions",429
519,"267. Searching for Objects in a Decision Diagram Use the Search field and the object type drop-down list on the Decision Flow tab to search for specific objects or object types in decision diagrams. To search for a specific object, enter the object name in the Search field. To search for object types, select the object type from the drop-down list. Use both fields to narrow the search. For example, to search for all objects with the name “MSRP > price”, enter the following criteria: For any object that matches the search criteria, SAS Intelligent Decisioning highlights the object node with a thicker, darker outline. Editing the Objects in a Decision Open an Object from within a Decision On a node in the Decision Flow diagram, double-click on the object name, or click for the object that you want to open, and select Open . On the Decision tab, select the object that you want to open, click Edit, and select Open . The object opens in the appropriate editor. Models open in SAS Model Manager if you have access to that application. When you object an object on the Decision Flow tab, the decision name at the top of the window is replaced with a breadcrumb. When you close an object, SAS Intelligent Decisioning returns to the previous object in the breadcrumb. You can click on any object in the breadcrumb to switch to that object. Any object that appears later in the breadcrumb is automatically closed. For example, if you open version one of the card_approval decision, the calc_interest_rate nested decision, and the get_credit_data rule set, the breadcrumb appears as follows: Editing the Objects in a Decision 251",325
520,"268. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. Edit the Properties of a Decision Node On the Decision Flow tab: 1Select the decision node. 2(Optional) Click to display the Input Variables panel, and modify the input variable mappings for the node. 3(Optional) Click to display the Output Variables panel, and modify the output variable mappings for the node. 4(Optional) Click to display the Properties panel. a(Optional) Select a different object or object version for the selected node. b(Optional) For code file nodes, modify the node description, or click Open to edit the code file in the appropriate editor. c(Optional) For cross-branch links, select a different target node. On the Decision tab: 1Click for the node. The properties window for the node appears. 2(Optional) On the Variables tab, modify the variable mappings. 3(Optional) On the Properties tab, select a different object or object version. For code files, modify the description, or click Open to edit the file in the appropriate editor. 4Click Close to save your changes and close the properties window. Reorder Objects On the Decision Flow tab, you can drag rule sets, branches, models, treatment groups, nested decisions, and code files from one position to another. You cannot move the nodes for cross-branch links, but you can move the target node of a cross- branch link. On the Decision tab, to move an object up or down, including into and out of conditions, select the object and click or . You can also move the selected object by using Shift + and Shift + .252 Chapter 8 / Working with Decisions",373
521,"269. Remove an Object from a Decision On the Decision Flow tab, click on the object that you want to remove, and select Remove . To delete a cross-branch link that is displayed as a dashed line, right-click on the dashed line and select Remove . On the Decision tab, click on the object that you want to remove. If you delete the target of a cross-branch link, the link adopts the next node between itself and the End node. If the next node is the End node, the link is deleted. Replace an Object To replace an existing object with a different object of the same type, click on the Decision tab. In the window that appears, select the new object, and click OK. To change the target node of a cross-branch link, open the Properties panel for the link, click , and select a new target node. Update Decisions to Use New Object Versions You can update the versions of any of the objects that are used in a decision. 1Open the decision, click , and select Update object versions . For each object that is included in the decision, SAS Intelligent Decisioning determines whether newer versions of the objects are available, and it displays the results in the Update Versions window. 2(Optional) In the Update Versions window, select the objects that you want to update, or select Select all to update all of the objects. 3Click Update to update the object versions that are used in the decision. TIP To upgrade multiple decisions that use the same object, see n“Upgrade Decisions to Use a New Version of a Rule Set” on page 52 n“Upgrade Decisions to Use a New Version of a Code File” on page 181 n“Upgrade Decisions to Use a New Version of a Nested Decision” on page 270Update Decisions to Use New Object Versions 253",374
522,"27. n“Add a Stand-Alone Assignment Statement” on page 24 n“Defining New Rules in a Rule Set” on page 24 Managing the Variables in a Rule Set About Variables The Properties of a VariablePropertyDescriptionNameVariable names must start with a letter or an underscore (_), and they can contain only alphanumeric characters and the underscore. Variable names can be up to 32 characters long. They must be unique within a rule set. Note: SAS Intelligent Decisioning does not support double-byte character set (DBCS) characters in variable names. Note: Do not use any of these operators or keywords as variable names: AND, OR, IN, NOT, LIKE, TRUE, or FALSE. Do not use _N_ or any DS2 reserved word as a variable name. See “Reserved Words in the DS2 Language” in SAS DS2 Programmer’s Guide for information about reserved words in the DS2 language.Data typeSAS Intelligent Decisioning supports the following data types: Boolean, character, data grid, date, datetime, decimal, and integer. Binary and varying-length binary variables are supported only in decisions. Binary variables are supported only as input variables or temporary variables in order to support models that require binary data. For Boolean variables, you can select True or False for the initial value. However, SAS Intelligent Decisioning represents Boolean values by using the numbers 1 and 0 in the code that it generates. When SAS Intelligent Decisioning is evaluating Boolean expressions, any non-zero number is considered True. When you are entering expressions, specify 1 for True and 0 for False. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.16Chapter 2 / Working with Rule Sets",391
523,"270. Validate a Decision in the Decision Editor To validate a decision in the decision editor, open the decision. Then, on the Decision Flow or Decision tab, click Validate . SAS Intelligent Decisioning validates everything that can be determined without executing the decision. The following list describes some of the validations that SAS Intelligent Decisioning performs: nThe rule sets that are used in the decision contain no errors, such as missing required values or branch values that overlap. nThe model type of each model that is used in the decision is a supported type , and DS2 code can be generated for the model. nTreatment groups , lookup tables , and global variables that are used in the decision have been activated. nThe objects that are specified in each of the decision nodes exist, and the current user has permission to access the objects. nObject variables are mapped to decision variables on page 247. Error messages are shown in the Errors panel and are categorized by error type. For many error types, this panel is updated as you fix the errors. For some errors, such as errors in nested decisions or activation errors, you must click Validate again to clear the error message. TIP If you routinely validate very large decisions, increasing the number of threads available to the validation process can improve performance. For more information, see the sas.decisions.validation.validationCoreThreadPoolSize configuration option. If the validation finds errors, you can click Export in the Errors panel to export the list of errors to a PDF file. Change the Workflow Status of a Decision 1(Optional) To change the status of a version other than the latest version, click the Versions tab, and then click the version number for the version that you want to change. 2Click Move to status , and select the new status value. The Move to status window appears.254 Chapter 8 / Working with Decisions",373
524,"271. 3(Optional) Enter a comment. It is recommended that you enter a comment for governance purposes. For example, if you are the author and you are setting the status to Review-ready, describe the changes that you made and the reasons for making the changes. 4Click Submit . TIP The Status column on the Versions tab displays the status value for each version. You can click to view or change the version’s status and to edit the comments that are associated with the version’s status. Only the user who changed a decision’s status to its current setting can edit the comments for that setting. Copy a Decision URL To create a link for external documentation that automatically opens a decision in SAS Intelligent Decisioning : 1Open the decision. 2Click , and select Copy decision URL . The Copy URL window appears, and the URL is automatically selected. 3Click Copy , and then click Close . Paste the link into your documentation. Compare Decision Content You can compare the contents of two different decisions, or you can compare the contents of two different versions of the same decision. 1Select the objects that you want to compare. nTo compare the contents of two different decisions, select the decisions in the category view, click , and select Compare object contents . nTo compare the contents of two versions of the same decision, open the decision, click on the Versions tab, and select Compare object contents . The Select Versions window appears. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Object Contents window. Compare Decision Content 255",328
525,"272. By default, the Decision Flow tab displays all of the nodes in each object and highlights the differences. Click Show Differences to limit the display to only the nodes that are different in each object. Click Show All to return to the default view. For example, in the following figure, both version 1.0 and version 2.0 of the Evaluate_Loans decision contain the same rule sets, but the branches are different. Version 1.0 uses a Yes/No branch that is based on the value of the DEBTINC variable, and Version 2.0 uses an Equals branch that is based on the value of the BAD variable. In Version 1.0, the Low_Ratio rule set is in the Yes branch path, and in Version 2.0, the Low_Ratio rule set in the BAD=0 path. TIP Click beside a decision name to display its location. 3(Optional) Click the Decision tab to display the contents of each object. In this view, the information icon on Record contacts nodes displays which variables and treatments are being tracked, whether rule-fired data or path-tracking are turned on, and whether the contact record is included in aggregate reports. For other node types, this icon displays information about whether a node was added, deleted, moved to another position in the decision, or changed to use a different version of the node object. However, if the decision is large or complex and a node was moved a significant distance, SAS Intelligent Decisioning might not be able to determine if the node was moved or deleted.256 Chapter 8 / Working with Decisions",328
526,"273. 4(Optional) Click the Variables tab to display the properties of the variables in the two objects. This tab displays the name, type, initial value (if a value is defined), and length of each variable in both objects. The tab also indicates whether the variable is an input variable or an output variable. If the variable list for both objects is the same, this tab displays a message stating that the two objects are identical. If either of the objects that you are comparing contain a data grid variable, you can click beside the variable name to display the data type and length of each data grid column. Compare Decision Content 257",128
527,"274. 5(Optional) Click Export to export the results of the comparison to a PDF file. The Export Comparison Results window appears. 6(Optional) Select the information that you want to export, and click Export . To export the information on a specific tab, select the tab name. To export the data type and length of each column in data grid variables, select Data grid metadata . If you want the PDF file to display only the differences between the two objects, select Show differences . To display all of the objects’ information, select Show all . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Compare Decision Code You can compare the generated code of two different decisions, or you can compare the generated code of two different versions of the same decision. 1Select the objects that you want to compare. nTo compare the generated code of two different decisions, select the decisions in the category view, click , and select Compare code . nTo compare the generated code of two versions of the same decision, open the decision, click on the Versions tab, and select Compare code . The Select Versions window appears. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Code window and highlights the differences. 3(Optional) Click Export to export the results of the comparison to a PDF file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Generate PDF Documentation for a Decision You can generate detailed documentation for a decision as a PDF document. The PDF includes the decision properties, the properties and variable mappings for each node, and a table of the decision variables. You can download documents with 258 Chapter 8 / Working with Decisions",441
528,"275. additional details about the rule sets, treatment groups, and nested decisions that are used in the decision. 1Open the decision. 2Click , and select Create document . The Create Document window appears. TIP If this option is disabled, there might be unsaved changes. Click . 3(Optional) Enter a name for the document if you do not want to use the default name. 4(Optional) Select Show a diagram of the decision to include the decision diagram in the PDF. 5(Optional) Select Include code from code nodes to include the code from custom code files that are used in the decision. 6(Optional) Select Choose additional documents to download to display a window from which you can download additional documents. You can download documents for any rule sets, treatment groups, and nested decisions that are used in the decision. 7Click Create . SAS Intelligent Decisioning creates the PDF. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. If you download additional documents in Step 4 , the Download Additional Documents window appears. 8(Optional) Click Download for each additional document that you want to download. 9(Optional) Click Close to close the Download Additional Documents window.Generate PDF Documentation for a Decision 259",295
529,"276. Managing Decisions Duplicating Decisions About Duplicating Decisions in Folders for Which the Check-Out and Commit Feature Is Enabled When you duplicate a decision, SAS Intelligent Decisioning first creates an empty decision, and then updates the decision to add references to the included objects. The default permissions for the Decision Repository enable users to create new objects, but the permissions do not include the ability to update the objects. In order to duplicate an object that is in the Decision Repository, you must check out the object. If your site has created additional folders for which the check-out and commit feature is enabled, and if those folders have been assigned the same permissions as those assigned to the Decision Repository, you must also check out objects in those folders before you can duplicate them. Duplicating Included Objects When you duplicate a decision, you can choose whether to also duplicate the objects that are in the decision. If you choose not to duplicate the included objects, the duplicate decision uses the existing objects. If you choose to duplicate the included objects, the new copy of the decision uses the new copies of the included objects. If the decision includes a nested decision (subdecision), SAS Intelligent Decisioning duplicates the objects that are in the nested decision. Note: Any models, lookup tables, custom context files, or Micro Analytic modules that are used in the decision are not duplicated. The duplicated decision uses the original objects. If the decision includes treatment groups, the treatment groups are duplicated, but the individual treatments within the treatment groups are not duplicated. The duplicated treatment group uses the original treatments. When you duplicate a decision and its included objects, you must enter a custom suffix that SAS Intelligent Decisioning appends to the names of the duplicated objects. See “Duplicate Decisions” on page 261. All of the duplicated objects are placed in the same folder260 Chapter 8 / Working with Decisions",380
530,"277. Duplicate Decisions Note: You cannot duplicate a decision if it is open. To duplicate a single decision: 1In the Decisions category view, select the decision that you want to duplicate. 2Click and select Duplicate . The Duplicate Decision window appears. 3(Optional) Enter a new name for the duplicate decision. If you do not specify a new name or specify a suffix in Step 7b SAS Intelligent Decisioning appends _Copy to the name of the duplicate object. 4(Optional) Enter a description for the decision. 5Select the version of the decision that you want to duplicate. 6Click and select the location where you want to save the duplicate decision. If you select Duplicate included objects in the next step, the duplicated objects are also saved to the location that you choose. 7(Optional) Click the Duplicate included objects toggle if you want to duplicate the objects that are included in the decision. Selecting this option enables the View included objects link and the Name suffix field. a(Optional) Click the View included objects link to open the Included Objects window. This window lists the objects that will be duplicated together with the decision. You can use the Search field to search for specific objects by name in order to verify which objects will be duplicated. Objects that will not be duplicated are identified with the warning icon. See “Duplicating Included Objects” on page 260 for more information. Click Cancel to close the window. bIn the Name suffix field, enter a custom string that you want SAS Intelligent Decisioning to append to the names of all of the duplicated objects. 8Click Duplicate . To duplicate multiple decisions: 1In the Decisions view, select the decisions that you want to duplicate. 2Click and select Duplicate . SAS Intelligent Decisioning duplicates the latest version of the decisions and appends _Copy to the names of the duplicate copies. If needed, a number is also appended to the names of the duplicate copies. Note: When you duplicate a decision, SAS Intelligent Decisioning creates a relationship between the original decision and the duplicate decision. If either object is changed, and you later copy the contents of one object into the other, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the decision before you paste the new content.Managing Decisions 261",474
531,"278. Delete Decisions Note: You cannot delete a decision if it is open. In the Decisions category view, select the decisions that you want to delete, click , and select Delete . SAS Intelligent Decisioning moves the decisions to the recycle bin. For more information, see “Manage Folders and Folder Content” on page 9. Rename a Decision Note: You cannot rename a decision if it is open. 1In the Decisions category view, select the decision that you want to rename. 2Click and select Rename . The Rename window appears. 3Enter a new name for the decision, and click Rename . Move Decisions to a Different Folder 1In the Decisions category view, select the decisions that you want to move. 2Click and select Move . The Choose a Location window appears. 3Select the location to which you want to move the decisions, and click OK. Managing Versions of Decisions Set the Displayed Version The displayed version is the version whose information is displayed on the other tabs, such as the Properties , Decision , and Variables tabs. On the Versions tab, a in the Displayed Version column indicates the displayed version. To change the displayed version, click the version number for the version that you want to view. The displayed version is shown in the title bar.262 Chapter 8 / Working with Decisions",276
532,"279. Create a New Version Note: For objects that are stored in locations for which the check-out and commit feature is enabled, you cannot manually create a new version. The only way to create a new version is to check out an existing version and commit a new version. For information, see “Check Out and Commit a Decision Version” on page 275. Note: The current version of an object is the version with the highest version number. When you create a new version, SAS Intelligent Decisioning locks the current version before it creates the new version. IMPORTANT You cannot unlock a locked version. You cannot save changes to a version that is locked. If you modify a version that is locked and click , SAS Intelligent Decisioning asks you if you want to replace the current unlocked version with your edited version. To manually create a new version: 1On the Versions tab, click the version number for the existing version that you want to use as the basis for the new version. 2Click New Version . The New Version window appears. 3Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented. If you select Minor , the number to the right of the period is incremented. 4(Optional) For each version tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Note: A tag is limited to 100 characters. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. 5(Optional) Enter information about the new version in the Notes field. TIP You can edit these notes at any time on the Versions tab. 6Click Save .Managing Versions of Decisions 263",387
533,"28. PropertyDescriptionInput and OutputA variable can be an input variable, an output variable, both, or neither (a temporary variable). See “Input Variables, Output Variables, and Temporary Variables” on page 17 for more information.LengthThe length for Boolean and numeric variable types is set automatically. For output-only data grid variables, the length is set to the value that you specify. For character variables and data grid variables that are input-only or input-output variables, the variableLengthOverridden configuration property determines how the length is set. By default, this property is set to Off, and the length is set to the length in the input data. When the variableLengthOverridden property is set to On, the length of input-only and input-output character variables and data grid variables is set to the value that you specify. For more information, see “sas.businessrules.variableLengthOverridden” in SAS Intelligent Decisioning: Administrator’s Guide . The maximum length for character variables (outside of a data grid) and data grid variables is 10485760 characters. The maximum length for character variables within a data grid is 32767 characters.Initial valueYou can specify an initial value for all data types except data grids. Initial values are used only at run time and only for output-only variables. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published.DescriptionDescriptions are limited to 256 characters. Input Variables, Output Variables, and Temporary Variables For each variable, you must specify whether the variable is an input variable, an output variable, both an input variable and an output variable, or a temporary variable. nInput variables are variables that are present in the input table for a rule set. When a rule set is deployed in a production system, all input variables must be mapped to table columns in input data. When you test a rule set in SAS Intelligent Decisioning , for each input variable, you can either map it to a table column or specify a constant as its input value. If you choose not to map a variable to either a table column or a static value, SAS Intelligent Decisioning displays a warning message. When you create or edit a variable, clear the Input Managing the Variables in a Rule Set 17",492
534,"280. Creating a New Version by Using Tags About Using Tags to Create a Version If the objects in a decision are tagged with version tags, you can create a new version of the decision by using these object tags to select which version of the included objects to use in the new decision version. This feature is useful when, for example, multiple users are developing the objects that are used within a decision. Each user can assign tags to object versions that they have developed for a new decision version. The person who is creating the new decision version can then use these tags to easily create the new version. When you use version tags to create a new decision version, the versions of the included objects are ignored. Suppose your current decision uses version 1 of a rule set that has four versions. Versions 2 and 3 of the rule set are tagged with Tag_1, but versions 1 and 4 are not tagged. If you create a new decision version by specifying the tag Tag_1, you will be able to select either version 2 or 3 of the rule set for use in the new decision version. You cannot select version 4 of the rule set because it is not tagged with Tag_1. Note: You cannot use tags to create new versions of common rule sets. To create a new version of a common rule set, open the rule set and select New Version on the Versions tab. Create a New Version by Using Tags TIP Before you begin, you need to know the version tags of the objects that you want to include in the new decision. 1Open the decision for which you want to create a new version. TIP For decisions that are in folders for which the check-out feature has been enabled, your administrator must give you permission to create a new version by using tags. For more information, see “Grant Permission to Create Versions in Check-Out Folders by Using Tags” in SAS Intelligent Decisioning: Administrator’s Guide . 2On the Versions tab, click and select Create version from tags . The Create Version From Tags wizard opens.264 Chapter 8 / Working with Decisions",427
535,"281. 3On the Choose Strategy: Step 1 page of the wizard, enter up to two tags that are associated with object versions that you want to use to create the new decision version. Press Enter after each tag. 4(Optional) If you want to select specific versions of each object to use in the new decision version, select Let me choose the version of each object . 5(Optional) If you do not want to automatically map the object’s variable to the decision’s variables, deselect Automatically map the object’s variable to the decision’s variables . If you select this option, new object variables are mapped to decision variables only if decision variables of the same name and type already exist. If a decision variable does not already exist, you must manually map the object variable to a decision variable. For additional information, see “Mapping Variables within a Decision” on page 247. 6Click Next . The node objects that have versions that are tagged with a tag that you specified are listed on the Review and Confirm: Step 2 page of the wizard. Note: Common rule sets are not listed in the wizard. To create a new version of a common rule set, open the rule set and select New Version on the Versions tab. 7(Optional) Select any node that you want to remove from the update process. Click , and then confirm the deletion. For any node that you remove from the update process, the existing node is used in the new decision version. TIP You can filter the list of nodes by using the Search field or by clicking to filter by more specific criteria in the Filter Nodes window. 8(Optional) If you selected Let me choose the version of each object in Step 4 and any node object has multiple versions that are tagged with the same tag, select the version of those objects that you want to use in the new decision version. To use the latest version of all of the objects, click Use latest version . 9Click Next . 10On the Create Version: Step 3 page of the wizard, do the following: aSelect the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period increments. If you select Minor , the number to the right of the period increments. b(Optional) Enter any version tags and notes for the new version of the decision. 11Click Create .",488
536,"282. Example Suppose you have the decision flow Update_credit_history. Version 2 of this decision contains the following objects: nVersion 2 of the rule set Select_accounts, which is not tagged. Version 1 of this rule set is tagged with APR_rules_chg, but this tag was added to the wrong version of this rule set. The tag should have been added to version 2 of the rule set. nVersion 3 of the decision Calc_credit_chgs. Both version 3 and version 4 of this decision are tagged with APR_rules_chg. nVersion 1 of the code file Update_history. This version is the only version of this code file and it is not tagged. You need to create a new version of Update_credit_history that includes version 4 of the decision Calc_credit_chgs (the tagged version) and version 2 of the rule set Select_accounts (which is not tagged). 1On page 1 of the Create New Version wizard, specify the tag APR_rules_change and select the option Let me choose the version of each object . Page 2 of the wizard contains a list of the objects that are tagged with APR_rules_chg.266 Chapter 8 / Working with Decisions",245
537,"283. If you do not make any changes in this list, then the new version of the decision Update_credit_history will include the objects that are shown in the list. If multiple versions of an object are tagged with the same tag, the wizard includes each version in the Node Version and Tag column for that object. In this example, both versions 3 and 4 of the subdecision Calc_credit_chgs are tagged with APR_rules_chg. By default, the latest version in this list is selected, but you can select a different version in the drop-down list. The new version of the decision Update_credit_history will use the version that you select. For the Select_accounts rule set, the wrong version (version 1) of the rule set was tagged. Remove the Select_accounts rule set from the list of objects that will be updated in the new version of the decision Update_credit_history. 2Select the Select_accounts rule set. Click , and then confirm the deletion. When you remove an object from the list, the original object that is used in the decision is still used in the new version of the decision. 3Click Next . 4On page 3 of the wizard, select Major for the version type, and then click Create . Managing Versions of Decisions 267",259
538,284. SAS Intelligent Decisioning creates version 3 of the decision. 268 Chapter 8 / Working with Decisions,24
539,"285. Create a New Version Automatically When You Publish a Decision You can automatically create a new version of a decision when you publish the current version by selecting Publish and Lock .For information, see “Publish Decisions” on page 281. Copy the Content of a Version You can copy the content of an object’s version in the category view or on the Version tab for the object. 1In the category view, complete these steps: aSelect the decision whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. cSelect the version whose contents you want to copy. Alternatively, on the Versions tab of the decision whose contents you want to copy: aSelect the version whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. 2Click , and select the decision into which you want to paste the contents of the version. When you paste the contents, SAS Intelligent Decisioning creates a new version of the target decision. The target object contains only the pasted content. 3Select whether you want to create a new major or minor version. 4(Optional) Modify the notes that will be associated with new version. 5(Optional) Add tags that will be associated with the new version. Tags that are associated with a source object version are not automatically added to the new version. See “Add a Version Tag” on page 277 6Click Paste Version , and then click Yes.Managing Versions of Decisions 269",306
540,"286. TIP The input and output designations for a variable on the Variables tab for the new version are removed, and the variable is treated as a temporary variable in the following situations: nThe new version of the target object does not use a variable that is used in an earlier version. nThe source and target object originally had a variable of the same name, and you deleted the variable from the source object before you copied it into the target object. Note: When you copy the contents of a source object into a target object, SAS Intelligent Decisioning creates a relationship between the two objects. If the source object is modified after you copy its contents, and you later copy the contents of the target object back into the source object, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the source object before you paste the new content. Delete a Version IMPORTANT When you delete a specific version, that version is deleted permanently. It is not moved into the recycle bin, and it cannot be restored. Note: In order to be able to delete a specific version of an object, you must have permission to delete the object itself. Also, the configuration option sas.decisions.deleteVersions must be turned on. On the Versions tab, select the version that you want to delete, click , and select Delete . You cannot delete the current version. Upgrade Decisions to Use a New Version of a Nested Decision If you create a new version of a nested decision that is already used in other decisions, you can upgrade the decisions to use the new version. 1On the Versions tab for the nested decision, click , and select Upgrade decisions . The Upgrade Decisions window appears. This window lists all of the decisions that include the nested decision. 2In the Version to upgrade to field, select the version of the nested decision to which you want to upgrade the decisions.270 Chapter 8 / Working with Decisions",392
541,"287. 3Select Automatically map variables if you want SAS Intelligent Decisioning to automatically map new nested decision variables in the decisions where the nested decision is used. For information about how SAS Intelligent Decisioning maps variables, see “About Decision Variables and Mapping” on page 247. 4Select the check boxes for the decisions that you want to upgrade, and click Upgrade Decisions . TIP To update all of the objects that are used in a decision, see “Update Decisions to Use New Object Versions” on page 253. Determine Which Objects Use a Decision To list the objects that use a specific decision: 1On the Decisions category page, select the check box for the decision, click , and select View used by report . The All Objects that Use the Selected Item window appears. This window lists all objects that use any version of the selected decision. 2(Optional) Select a specific version of the decision. SAS Intelligent Decisioning narrows the list to include only the objects that use the selected version of the decision. Note: The View used by report option is also available from within an open decision. In the report, you can use the Filter field to filter the list of objects based on the object names. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab.Determine Which Objects Use a Decision 271",372
542,"288. Checking Out and Committing Decision Versions About Checking Out and Committing Versions Your administrator can enable the check-out and commit feature for decisions that are in any folder by specifying the folder in the sas.decisions.checkout.checkoutEnabledFolderPaths configuration option. Enabling this feature for a folder does not automatically modify the permissions for the folder or for the objects in it. You can still modify a decision in the folder without checking it out, but you are expected to check out the latest version before you edit it. However, your administrator might also set permissions that require you to check out decisions in these folders before you can edit them. For more information, see “sas.decisions.checkout” in SAS Intelligent Decisioning: Administrator’s Guide and “Set Permissions for Check-Out Folders” in SAS Intelligent Decisioning: Administrator’s Guide . By default, SAS Intelligent Decisioning defines a folder where you can store decisions that must be checked out before they can be edited by users without administrator privileges. This folder is the Decision Repository folder, and it is the default value for the sas.decisions.checkout.checkoutEnabledFolderPaths configuration option. The default permissions for this folder require that non- administrative users check out a version and commit their changes to the checked- out version. Users who do not have administrative permissions cannot edit the decisions in Decision Repository without first checking them out. Note: The sas.decisions.checkoutEnabledFolderPaths option controls the check- out and commit feature for both decisions and code files. The check out and commit feature for lookup tables, treatments and treatment groups, and rule sets are controlled by configuration options that are specific to those object types. If a version can be or must be checked out before it is modified, the Check Out button appears at the top of the Versions tab for that object. You can check out any version of an object. You can check out only one copy of a version at a time. TIP If the sas.decisions.checkout.allowConcurrentCheckout option is turned off, and a user has checked out a decision version, the Check Out button for that decision is disabled for all other users. For more information, see “Concurrently Checking Out and Committing Decision Versions” on page 274. When you check out a version, SAS Intelligent Decisioning writes a working copy of the version into your My Folder folder and opens the working copy.",486
543,"289. While you have a version checked out, the Decisions category view shows two decisions with the same name, but the folders listed in the Location column differ for each decision. The original version is in the location specified by the sas.decisions.checkout.checkoutEnabledFolderPaths configuration option, and the checked-out copy is in your My Folder folder. TIP If an object that you have checked out does not appear in the category view, click to refresh the category view. Note: When a decision that uses a treatment group is deployed to a production environment, the decision always uses the active version of a treatment group. When you edit a decision that uses a treatment group that you have checked out, the properties panel for the treatment group shows the location of the treatment group in the original folder. The panel does not list the location of the treatment group that is checked out because that copy is not the active version. A Commit button appears at the top of the Versions tab for the checked-out version. When you are finished editing the checked-out version, you must commit your changes in order for other users to be able to see them. When you commit your changes, SAS Intelligent Decisioning creates a new version with your changes. If you check out objects that are used in the decision and modify the checked-out decision to use the checked-out objects, SAS Intelligent Decisioning also commits the checked-out objects when you commit the decision. If the decision uses a treatment group that is checked out, and if the treatments are also checked out, then the treatment group and the treatments are all committed when you commit the decision. If the parent object is deleted before you commit your changes, you will not be able to commit your changes. You cannot publish the checked-out version that is in My Folder . To publish a version with your changes, you must commit your changes, and publish the committed version. Checking Out and Committing Included Objects Together with A Decision When you check out a decision version, SAS Intelligent Decisioning displays the list of object versions that are used in the decision in the Choose Objects to Check Out window. You can select any object that you want to check out at the same time. For any object that you choose to check out, SAS Intelligent Decisioning writes a working copy of the version into your My Folder folder, and updates the checked- out decision so that it uses the checked-out versions of each object that you select.",488
544,"29. check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. TIP If the sas.businessrules.inputVariableReadOnly configuration option is set to Off and the value of an input-only character variable is modified in a rule set, the modified value is passed back to the parent decision and is available to the remaining objects in the decision. For more information, see “sas.businessrules.inputVariableReadOnly” in SAS Intelligent Decisioning: Administrator’s Guide . nOutput variables are variables that are written to the output table that is created when a rule set is run. When you create or edit a variable, clear the Output check box for any variable that you want to exclude from the output data. nTemporary variables are variables that are not present in the input data, and they are not written to the output table. To create a temporary variable for use only while a rule set is executing, clear both the Input and Output check boxes. When you create a new variable, it is created as an input-output variable by default. Note: Binary variables are supported in decisions only as input variables or temporary variables in order to support models that require binary data. Add Variables from a Data Table 1On the Variables tab, click the Rule Set Variables subtab. 2Click Add variable and select Data table . The Choose Data window appears, and the list of SAS Cloud Analytic Services (CAS) tables that are loaded into memory is displayed on the Available tab. If the table that you need does not appear in the list of available tables, try the following solutions: nIf the table appears on the Data Sources tab, right-click on the table, and select Load to load the table into memory. If the table does not appear on the Available tab, click . nIf the table does not appear on the Data Sources tab, import the data. The process of importing the data loads it into memory. For information about importing data from different sources, see “Making Data Available to CAS” in SAS Data Explorer: User’s Guide . 3Select the table from which you want to import variables, and click OK. The Add Variables window appears. 4Select the variables that you want to import and click . To import all of the variables in the table, click .",476
545,"290. If you select an object that is used only in a nested decision, ensure that you also select the nested decision. If you did not check out the nested decision, the object that is used in the nested decision is not committed when you commit your work. Your decision might use an older version of an object, or it might use different versions of the same object. The list of included objects has an entry for each object version that is used in the decision. If you select two versions of the same object, SAS Intelligent Decisioning checks out the oldest version. SAS Intelligent Decisioning checks out only one version of each selected object. If a selected object is an older version of the object, you must select the Update the decision to use the latest version of the selected objects check box in the Choose Objects to Check Out window in order to successfully check out the selected objects. When you select this option, SAS Intelligent Decisioning asks you to confirm that you want to replace references to the selected versions of the objects with references to the latest version. References to any version of any objects that you do not select in the Choose Objects to Check Out window remain unchanged when you commit the decision. Checking Out and Committing Objects from within A Decision If a decision is checked out, and if an object that is included in the decision is stored in a folder for which the check-out feature is enabled, then you can check out the object from within the decision. When you check out an included object, the decision is modified to use the checked-out copy of the object and is saved. When you commit the decision, all checked-out objects that are used in the decision are also committed. If the object is a nested decision, SAS Intelligent Decisioning does not display the list of objects that are included in the nested decision. You cannot check out a nested decision’s objects from within a decision. After you check out the nested decision, you can open the nested decision and check out its included objects from within the nested decision itself. To check out an object from within a checked-out decision, right-click on the node for the object that you want to check out, and select Check out . To commit a single object from within a checked-out decision, right-click on the node for the object, and select Commit . SAS Intelligent Decisioning displays the Commit dialog for the object. For more information, see the topics about checking out and committing a version of a specific object type.",493
546,"291. in each user’s My Folder location, the default permissions allow individual users to see only the copies that they have checked out. When this option is turned off and a user has checked out an object, the Check Out button for that object is disabled for all other users. If multiple users check out the same version of the same object at the same time, each user’s changes are preserved in a new version when they commit their changes. One user’s changes do not overwrite another user’s changes. IMPORTANT If two users attempt to commit changes to the same object simultaneously, the first user's attempt will succeed but the second user might see an error message that the commit has failed. If the second user subsequently commits their changes, the Modified By column on the Versions tab for both the version committed by the first user and the version committed by the second user displays the user ID of the second user. Check Out and Commit a Decision Version 1On the Versions tab, click Check Out . The Choose Objects to Check Out window appears. This window displays the list of object versions that are used in the decision. 2(Optional) Select the objects that you want to check out, and click . See “Checking Out and Committing Included Objects Together with A Decision” on page 273 for more information. Note: If you select an object that is used only in a nested decision, ensure that you select the nested decision also. If you do not check out the nested decision, the object that is used in the nested decision is not committed when you commit your work. 3(Optional) Select the check box Update the decision to use the latest version of the selected objects to confirm that you want to replace references to the selected versions of the objects with references to the latest version. Note: If your decision uses an older version of an object or different versions of the same object, you must select this check box in order to check out the object. See “Checking Out and Committing Included Objects Together with A Decision” on page 273 for more information. 4Click Check Out in the Choose Objects to Check Out window to check out the decision and any additional objects that you selected. SAS Intelligent Decisioning updates the Properties tab to indicate that the version is checked out. 5Modify the checked-out version as needed, and save it.Checking Out and Committing Decision Versions 275",478
547,"292. TIP To discard the changes and delete the checked-out version from My Folder , you can commit the object without saving it first. However, committing the object without saving creates a new version of the object whose contents match the contents of the previous version. For information on undoing a check out, see “Undoing a Check Out” on page 277. 6On the Versions tab, click Commit . The Commit Decision Version window appears. 7Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented, and the minor number is reset to zero. If you select Minor , the number to the right of the period is incremented. 8(Optional) In the Version tags field, enter any version tags that you want to associate with the new version. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / 9(Optional) To add the tags in the Version tags field to all of the objects that you are committing, select the Apply tags to all committed components check box. 10(Optional) Enter information about the new version in the Notes field. 11Click Commit . SAS Intelligent Decisioning creates a new version with your changes, and deletes the working copy from your My Folder folder. If you have checked out any objects that are used in the decision, and if the decision is updated to use the checked-out objects, SAS Intelligent Decisioning also commits the additional objects. Determine Whether a Version Is Checked Out If an object in a decision is checked out, an asterisk appears before the object name in the diagram on the Decision Flow tab. Also, the Properties panel for each object in the decision specifies whether the object is checked out. Determine Who Has a Version Checked Out If the current version of an object is checked out, the IDs of the users that checked it out and the timestamps when each user checked it out appear in the Checked out by field on the Properties tab for the original object. You can also display this information by clicking beside the version number on the Versions tab.276 Chapter 8 / Working with Decisions",452
548,"293. Opening the Original Object When you check out an object, SAS Intelligent Decisioning adds the field Original object link to the Properties tab for the checked-out object. This field contains a link to the original object that was checked out. You can use this link to verify that you have checked out the correct version and to compare the original content with the modified content in the checked-out version. Undoing a Check Out If both an object and a decision that uses the object are checked out at the same time, or if you checked out the object from within the decision , click on the object's node in the decision diagram, and select Cancel checkout . You can discard a checked-out version and any changes that you made by deleting the working copy of the version from your My Folder folder if the following conditions are true: nYou have not checked out a decision that uses the object. nThe object was not checked out at the same time as a decision that uses the object, or the object was not checked out from within the decision after the decision was checked out. The deleted version is moved to the recycle bin. See “Delete Decisions” on page 262. Managing Version Tags for Decisions Add a Version Tag Version tags enable you to better organize and group your content. Version tags are associated with specific versions of an object and not with the entire object. You can add the same tag to any version of any object. To add a tag to a decision version: 1On the Versions tab, position your cursor in the Version Tags column for the version that you want to tag. If the version is not tagged, appears. If the version has at least one tag, appears. 2Click to open the New Version Tags window, or click to open the Edit Version Tags window. 3For each tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Managing Version Tags for Decisions 277",405
549,"294. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. TIP To filter the version list based on a tag, right-click on the Version Tags column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. 4Click Close to close the window. Remove a Version Tag 1On the Versions tab, position your cursor in the Version Tags column for the version whose tag you want to remove, and click . 2Click beside the tag that you want to remove. 3Click OK to close the window. The tag remains in the list of previously entered tags that is displayed when you add a tag, but the tag is no longer associated with version. Modify a Version Tag You cannot modify a version tag that already exists. To change the content of an existing tag, delete the tag as described in “Remove a Version Tag” on page 278, and then add the tag again as described in “Add a Version Tag” on page 277. Publishing a Decision Introduction to Publishing Publishing content makes it available to other applications. Publishing a decision creates an entity that can be managed and run in another environment. When you publish content, SAS Intelligent Decisioning generates code for that content and 278 Chapter 8 / Working with Decisions",318
550,"295. writes it to the destination. The following table describes what form the generated code takes for each destination type.Table 8.1 What SAS Intelligent Decisioning Publishes to Each Destination Type Destination TypeWhat SAS Intelligent Decisioning Does SAS Cloud Analytic Services (CAS), Teradata, or Apache HadoopAdds a row to the model table for the destinationSAS Micro Analytic ServiceWrites a Micro Analytic Service module in the serviceGitCreates a directory in the remote Git repository with the same name as the published object and writes the generated code to a file named scoreResource.txt . If the decision includes analytic store models, the model files are written as either .sasast files or .astore files, depending on how the model was built.Container destinationsCreates a SAS Container Runtime container and writes it to the destination. Note: The container destination types to which you can publish content from SAS Intelligent Decisioning are Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP), and private Docker repositories. The rows in the model tables, the Micro Analytic Service modules, and the SAS Container Runtime containers all become callable REST API endpoints, independent of SAS Intelligent Decisioning . For content that is published to Git destinations, you can use the SAS Intelligent Decisioning Git Deployment CLI to deploy content from the remote repository either to a CAS destination or to a SAS Micro Analytic Service destination. The deployed content then becomes a callable REST API endpoint. Where Can I Publish Decisions? The destinations to which you can publish a decision depend on the destinations that are available and on the objects that are used in the decision. Your system administrator determines which publishing destinations are available. The following table shows the destination types to which you can publish a decision that contains various object types.Publishing a Decision 279",360
551,"296. Table 8.2 Decision Objects and the Destinations to Which Decisions Can Be Published Objects in the DecisionSAS Micro Analytic Service and Compatible Git DestinationsSAS Cloud Analytic Services (CAS) and Compatible Git DestinationsTeradata and Hadoop DestinationsContainer DestinationsAssignment rule sets, treatment groups, models, nested decisions, or DS2 code files and custom context files that do not contain SQL queries1, 2yesyesyesyesFiltering rule set nodes1 yesyesyesyesPython code filesyesyesnoyesData query files, DS2 code files that contain SQL queries, or custom context files that contain SQL queriesyesnonoyes3Record contacts nodesyesyesyesnoMicro Analytic Module nodesyesnonono 1Rule sets and nested decisions can use lookup tables, custom functions, and global variables. 2The score code type of a model determines the destination types to which you can publish a decision that contains the model. See Table 8.3 on page 280. 3In container destinations, Oracle is the only database that can be queried by using data query files, DS2 code files that contain SQL queries, or custom context files that contain SQL queries. The score code type of a model determines the destination types to which you can publish a decision that contains those models. The following table lists the score code types a model can have when it is used in a decision that is published to a specific destination type.Table 8.3 Model Score Code Types and the Destinations to Which Decisions Can Be Published Model Score Code TypeCAS Destinat ionsGit DestinationsSAS Micro Analytic Service DestinationsHadoop and Teradata DestinationsContainer DestinationsDATA stepyesyesyesyesyesDS2 multi-typeyesyesyesyesyesDS2 packagenoyesyesnoyes 280 Chapter 8 / Working with Decisions",381
552,"297. Model Score Code TypeCAS Destinat ionsGit DestinationsSAS Micro Analytic Service DestinationsHadoop and Teradata DestinationsContainer DestinationsPythonyesyesyesnoyes1 1You can publish decisions that include a model node for a Python model that is stored in the common model repository. The packages that are used by the model must be specified in the requirements.json file. For more information, see “Scoring Python Models” in SAS Model Manager: User’s Guide . SAS Model Manager supports publishing some additional model types independently (not in a decision). For additional information, see “Model Score Code Types and Publishing Destinations” in SAS Model Manager: User’s Guide . For more information about publishing destinations, see “Configuring Publishing Destinations” in SAS Intelligent Decisioning: Administrator’s Guide . Publishing Decisions That Include Analytic Store Models If you are publishing a decision that includes an analytic store model, the model’s analytic store (ASTORE) file must be in the /opt/sas/viya/config/data/modelsvr/astore directory on the CAS server for the destination to which you are publishing the decision. The ASTORE file is copied to that location when you do any of the following: nrun a decision test for the decision that uses the analytic store model nset the model as a project champion in SAS Model Manager npublish the model to SAS Micro Analytic Service from SAS Model Manager If you are publishing a decision that includes an analytic store model and the model has not been set as a project champion or published from SAS Model Manager, you must test the decision before you publish it. For more information, see “Testing Decisions” on page 284. Publish Decisions Note: You must validate decisions and correct any errors that are found by the validation process before you publish the decisions. For information, see “Validate a Decision in the Decision Editor” on page 254. 1Open the decision, and click the Versions tab. By default, the version that is published when you click Publish is the displayed version. 2(Optional) Click the version number to change the displayed version to the version that you want to publish.Publishing a Decision 281",445
553,"298. 3(Optional) Enter any tags that you want to associate with the published object. Press Enter after each tag. 4Either click Publish or select Publish and Lock . nTo publish the selected version without also creating a new minor version, click Publish . nTo lock and publish the selected version and create a new minor version at the same time, click , and select Publish and Lock . The Publish Decisions window appears. 5Select the destination to which you want to publish. The publishing destinations that are available to you depend on what is configured at your site. See SAS Viya Platform: Publishing Destinations for more information. 6(Optional) In the ITEMS TO PUBLISH section, complete the following steps for each item that you are publishing: aEdit the Published name if you do not want to use the default name for the published module. The maximum length and character restrictions differ depending on your destination. See Table 8.4 .Table 8.4 Requirements and Restrictions for Published Names DestinationMaximu m LengthRequirements And RestrictionsContainer destinations127The published name must start with a letter or an underscore. It cannot contain spaces, multi-byte characters, or special characters other than the underscore. The name that you enter is assigned to the SAS_SCR_APP_PATH environment variable. The value of this variable determines the module name. For more information, see “Changing the Endpoint Name for a Container” in SAS Container Runtime: Programming and Administration Guide .Git128The published name cannot contain forward slashes (/), single quotation marks ('), or double quotation marks ("").SAS Micro Analytic Service100The published name cannot contain the following characters: ! @ # $ % ^ & * ( ) | = ~` \ / . { } "" ' ;SAS Cloud Analytic Services (CAS)128The published name cannot contain single or double quotation marks.Teradata128The published name must start with a letter or an underscore. It cannot contain spaces, multi-byte 282 Chapter 8 / Working with Decisions",406
554,"299. DestinationMaximu m LengthRequirements And Restrictionscharacters, or special characters other than the underscore.Apache Hadoop128The published name cannot contain colons (:) or double quotation marks. bIf you have previously published the decision, turn on the Replace item with the same name option in order to replace the previously published decision of the same name in the same destination. cSelect the Path tracking check box if you want the published decision to generate path tracking data. TIP This path-tracking data is recorded in the pathID column in the output table. The path-tracking data that is recorded when you select Record path tracking for a record contacts node is recorded in the subject contact history. This option is disabled if you are publishing content to a SAS Micro Analytic Service destination, a Git destination, or a container destination. dSelect the Rule-fired tracking check box if you want the published decision to generate rule-fired data. TIP This rule-fired data is recorded in the ruleFiredFlags column in the output table. The rule-fired data that is recorded when you select Record rule-fired data for a record contacts node is recorded in the subject contact history. This option is disabled if you are publishing content to a SAS Micro Analytic Service destination, a Git destination, or a container destination. 7Publish the decisions. To publish content to a SAS Cloud Analytic Services (CAS) destination, you must reload the CAS destination table in order to make the newly published items available to other applications. You do not need to reload the destination table when you publish content to other destination types. Select one of the following options: Publish publishes the decisions and, if you are publishing content to a CAS destination, automatically reloads the CAS destination table. If another user is executing the code for an item that was previously published to CAS while the destination table is being reloaded, reloading the table might cause temporary problems with accessing the table content. After the table is reloaded, all authorized users can access all items in the table.Publishing a Decision 283",409
555,3. Contents Chapter 1 /Introduction to SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 Enterprise Decision Management Systems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 About Business Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 SAS Intelligent Decisioning Features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 Support for Models in Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Sign in to SAS Intelligent Decisioning . . . . . . . . . . . . . . . .,274
556,". . . . . . . . . . . . . . . . . . . . . . . . 4 SAS Intelligent Decisioning Home Page . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Using SAS Intelligent Decisioning as a Progressive Web App . . . . . . . . . . . . . . . . . . . 5 Sorting, Searching, and Filtering in Category Views . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 SAS Intelligent Decisioning Settings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8 Manage Folders and Folder Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9 View the Properties of Any Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",277
557,. . . . . . . . 9 Manage Comments for Any Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10 Chapter 2 /Working with Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 About Rules and Rule Set Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 About Condition and Action Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Create a New Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,270
558,. . . 15 Managing the Variables in a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 16 Defining New Rules in a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Defining Expressions in Rules and Assignment Statements . . . . . . . . . . . . . . . . . . . 33 Managing Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Copy a Rule Set URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Compare Rule Set Content . . . . . . . . . . . . . . . .,274
559,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 Compare Rule Set Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 Generate PDF Documentation for a Rule Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 Managing Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 Managing Versions of Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Determine Which Objects Use a Rule Set . . . . . . . . . . . . . . . . . . . . . . .,268
560,"30. 6On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables, Output Variables, and Temporary Variables” on page 17 for more information. TIP To filter the variable list, right-click on the Variable column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter. Add Variables from a Rule Set, Decision, or Code File 1On the Variables tab, click the Rule Set Variables subtab. 2Click Add variable , and select Rule set , Decision , or Code file . The Choose an Item window appears. 3Select the object from which you want to import variables, and click OK. The Add Variables window appears. 4Select the variables that you want to import and click . To import all of the variables in the table, click . 5Click Add to add the selected variables, or select Add and replace to replace existing variables that have the same name. 6On the Variables tab, select or clear the Input and Output check boxes as necessary. See “Input Variables, Output Variables, and Temporary Variables” on page 17 for more information. Add Global Variables to a Rule Set In order to use a global variable in a rule set, the global variable must be activated. Instructions for defining and activating global variables are in “Create a New Global Variable” on page 142 and “Activate a Global Variable” on page 149. Note: You can add a global variable that has not been activated to a rule set and publish the rule set, but the variable’s value is set to missing until the global variable is activated 1On the Variables tab, click the Global Variables subtab. 2Click Select Variables . The Select Variables window appears. 3Select the check boxes for the variables that you want to add to the rule set, and click OK.Managing the Variables in a Rule Set 19",404
561,"300. Publish without reloading publishes the decisions but does not reload the CAS destination table. You must manually reload the table in order for the newly published items to be accessible. Publish and lock locks and publishes the decision and creates a new minor version, but does not reload the CAS destination table. You must manually reload the table in order for the newly published items to be accessible. Note: This option is not available unless you chose Publish and Lock in Step 4 . The Publishing Results window appears. It displays the names of the published items, their status, and a link to the log that was generated during the publishing process. 8After the status changes to Published successfully , click Close to close the Publishing Results window. TIP To view the publishing history for a decision, click the History tab. 9(Optional) Click Close to close the decision. Testing Decisions Ways to Test a Decision There are three types of tests: Basic test executes the decision in the SAS Cloud Analytic Services (CAS) destination using the input table that you specify. You can also specify a debugging variable and enable value tracing. For more information, see “Create and Run a New Test” on page 285. Scenario test enables you to enter specific input values and the output values that you expect the test to generate. A scenario test identifies differences between the output that you expect to see and the actual output that is generated when the test is run. You can also compare the test definitions and test results of different scenarios. Scenario tests are also run in CAS. For more information, see “Test a Scenario” on page 289. Publishing validation test executes the decision in a publishing destination using the input table that you specify. When you publish the decision, a validation test is automatically defined 284 Chapter 8 / Working with Decisions",364
562,"301. for that decision in that destination. For more information, see “Validate a Published Decision” on page 303. Test a Decision Create and Run a New Test Testing a decision is optional, but doing so is a best practice. Testing enables you to discover any problems before the decision is published and incorporated into a production system. IMPORTANT If you are testing a decision that uses functions that are defined in a custom context file, verify that the context file is specified in the Custom context field on the Properties before running the test. If you are testing a decision that uses treatment groups and both the decision and the treatment group are checked out, the test uses the checked-out version of the treatment group. If the treatment group is not checked out, the test uses the activated version of the treatment group. If the decision uses a rule set that uses a lookup table and all three objects (the decision, the treatment group, and the lookup table) are checked out, the test uses the checked-out versions of both the rule set and the lookup table. If the rule set or lookup table are not checked out, the test uses the activated version of the lookup table. 1On the Scoring tab, click the Tests tab. 2Click New Test . The New Test window appears. 3Enter a name for the test if you do not want to use the default name. The name cannot contain forward slashes (/) or curly braces ({}). 4(Optional) Enter a description for the test. Descriptions are limited to 1000 characters. 5(Optional) Click for the Location field, and select the folder where you want to save the test definition and results. TIP Selecting a location is optional, but it is highly recommended. Storing test definitions and test results in a folder simplifies the tasks of setting permissions and transferring the test files. 6Click for the Input table field, select the input table for the test, and click OK. 7Verify or change the variable mappings. To run a full test, map all of the input variables to columns in the input table that you selected for the test. To run a partial test, you can map only the input variables that are needed for the test.Testing Decisions 285",455
563,"302. SAS Intelligent Decisioning automatically maps the input variables in the decision to columns in the input table when the names and data types of the variables match those of the table columns. If any input variables are not mapped to input columns or to static values, the application displays a warning message. At run time, SAS Intelligent Decisioning assigns missing values to input variables that are not mapped. You can change the automatic variable mappings in the Variable Mappings window. To change variable mappings: aClick Variables . The Variable Mappings window appears. bFor each input variable, select the table column to which the variable should be mapped. If the input table contains more than 25 columns, click More columns to display additional column names. Alternatively, for Decimal, Integer, and Character variables, you can select Use value for the table column, and specify a literal value in the Value column. When you are entering literal values, remember these rules: nDo not enclose character strings in quotation marks. nTo specify a missing value for character variables, select Use value and leave the Value column empty. When SAS Intelligent Decisioning generates code, it generates an empty string ('' ). For numeric values, enter a period (.). Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published. cClick OK to close the Variable Mappings window. 8(Optional) Click Advanced to display the advanced options. 9(Optional) Click and select the library where you want to write the output of the test. 10(Optional) Enter a name for the test results output table if you do not want to use the default name. The default name is test-name_object-name_timestamp_output . 11(Optional) Select the version of the decision that you want to test. 12(Optional) Select the variable that you want to serve as an input debug variable. You can specify an input-only variable or an input-output variable. The decision writes the name and value of this variable to the log for each input record that is processed. It writes the value just before the logic of the decision is executed for the input record. For more information, see “Debugging Decision Tests” on page 287.286 Chapter 8 / Working with Decisions",490
564,"303. 13(Optional) Select Preserve unmapped columns in the output table if you want columns that are not mapped to an output variable to be written to the output table. 14(Optional) To generate a data grid variable of all decision variables and their values, select Record variable values by node . For more information, see “Enabling Value Tracing” on page 288. 15(Optional) Select Keep filtered records in output table to include records in the test output that would normally be excluded by any of the filtering rule sets in the decision. When you select this option, SAS Intelligent Decisioning creates a new column in the output table named _filter_. If the value in this column is 0, then the record does not match any of the conditions in any filtering rule set, and the record is filtered out of the output when the decision is run in a production environment. If the value in this column is 1, then the record matches at least one filtering condition, and the record is included in the output. Note: This option is ignored if the decision does not contain a filtering rule set. 16Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 306. 17Click in the Results column to view the results of the test. 18In the test results window, click Test Results in the navigation panel to display the URIs and other information for the test. Click Output , Code , or Log to display the output data set, the code that was generated by SAS Intelligent Decisioning , or the SAS log that was generated when the code was run. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Log page, you can click to download the log file. Debugging Decision Tests When you create a test, you can specify a variable to use as a debugging variable in the Input debug variable field.",493
565,"304. output variable. The decision writes the name and value of this variable to the log for each input record that is processed. It writes the value just before the logic of the decision is executed for the input record. For more information, see Step 12 of “Create and Run a New Test” on page 285. When you specify an input debug variable, you can use the sas.decisions.messageOrder configuration option to control whether the log messages are written as they are produced or after the decision executes. For more information, see “sas.decisions.messageOrder” in SAS Intelligent Decisioning: Administrator’s Guide . When you specify an input debug variable, SAS Intelligent Decisioning automatically sets the maximum number of threads that can be allocated for the test to 1. Setting the thread count to 1 ensures that the variable's values are written to the log in the correct order and are not affected by different threads completing at different times. To capture variable values for input-only or temporary variables after the decision logic has executed for a specific record, you can specify that the variable is an output variable, and then re-run the test. Before publishing the decision to a production environment, return the input and output settings for the variable to their previous settings. For more information, see “Input Variables, Output Variables, and Temporary Variables” on page 224 and “Edit Variable Properties” on page 229. TIP To capture intermediate variable values that occur during the execution of the decision, you can use DS2 code files that include PUT statements for the variable. For more information, see Chapter 6, “Using Custom Code Files,” on page 151. Enabling Value Tracing When you test a decision, you can select the Record variable values by node check box to trace how variable values change for each node in the decision flow. When you select this option, SAS Intelligent Decisioning creates an output data grid variable named nodeTraceDataGrid. This data grid contains a row for each rule set, model, nested decision, and code file node in the decision. It contains one column for every variable in the decision. Condition nodes, branch nodes, and record contact nodes are not included. The first column in nodeTraceDataGrid contains the node name, and the remaining columns contain the values of the input and output variables, including temporary variables.",473
566,"305. ""metadata"": [   {""Node Name"": ""string""},   {""additionalDiscount"": ""double""},   {""age"": ""double""},   {""cost"": ""double""},   {""currentPhone"": ""double""},   {""score"": ""double""},   {""treatmentName"": ""double""},   {""ServicePlans_out"": ""string""},   {""newScore"": ""double""},   {""probability"": ""double""},   {""scoreProbDataGrid"": ""string""}  ] }, {  ""data"": [   [""Code_1"", null, 42, 699.99, null, 1, null, null, 1.1, 0.625547, null],   [""Code_2"", null, 42, 699.99, null, 1, null, null, 1.1, 0.625547, null],   [""Code_3"", null, 42, 699.99, null, 1, null, null, 1.1, 0.625547,    ""{\""Data Grid\"":[{\""metadata\"":[{\""score\"":\""double\""},    {\""probability\"":\""double\""}]},{\""data\"":[[1.23,4.56]]}]}""],   [""Rule_set_1"", 99.99, 42, 699.99, null, 1.25, null, null, 1.1, 0.625547,   ""{\""Data Grid\"":[{\""metadata\"":[{\""score\"":\""double\""},    {\""probability\"":\""double\""}]},{\""data\"":[[1.23,4.56]]}]}""],   [""Combined_Treatments"", 99.99, 42, 699.99, null, 1.25, null, null, 1.1, 0.625547,   ""{\""Data Grid\"":[{\""metadata\"":[{\""score\"":\""double\""},    {\""probability\"":\""double\""}]},{\""data\"":[[1.23,4.56]]}]}""]  ] }]} Note: Value tracing increases the amount of code that is generated for a decision and the time required to execute the decision. The magnitude of the increases depend on the number of variables and complexity of the decision.",467
567,"306. test uses the checked-out versions of both the rule set and the lookup table. If the rule set or lookup table are not checked out, the test uses the activated version of the lookup table. 1On the Scoring tab, click the Scenarios tab. 2Click New Test . The New Scenario Test window appears. 3Enter a name for the test if you do not want to use the default name. The name cannot contain forward slashes (/) or curly braces ({}). 4(Optional) Click for the Test definition location field, and select the folder where you want to save the test definition. TIP Selecting a test definition location is optional, but it is highly recommended. Storing test definitions in a folder simplifies the tasks of setting permissions and transferring the test files. 5Click for the Output table location field, and select the folder where you want to save the test results. 6(Optional) Select Enable variable change path logging to record variable value information and variable mapping information for each node in the decision. The application writes this information to the CAS log. Selecting this option enables you to generate a change path report in Step 16. For more information, see “Using Variable Change Path Logging” on page 294. Note: If the decision is complicated or uses very large data grid variables, the change path file might be very large, and you might encounter memory issues. Do not select both the Enable variable change path logging option and the Enable variable assignment logging option for the same test. TIP If you do not see the Enable variable change path logging check box, drag the horizontal divider down. 7(Optional) Select Enable variable assignment logging to include information in the log about how a variable’s value changes as the decision executes. The application writes a log entry each time a variable is assigned a value. Selecting this option enables you to generate a variable assignment report in Step 17. For more information, see “Using Variable Assignment Logging” on page 296. Note: If the decision is complicated or uses very large data grid variables, the change path file might be very large, and you might encounter memory issues. Do not select both the Enable variable change path logging option and the Enable variable assignment logging option for the same test. 8(Optional) Select the version of the decision that you want to test. 9(Optional) Enter a description for the test.",488
568,"307. 10Enter the values that you want to use for each input variable. You do not have to enter values for every input variable. At run time, SAS Intelligent Decisioning uses missing values to input variables for which you do not specify a value. Note: Values longer than 32767 characters for character variables that are either input-only or input-output will be truncated. You cannot enter input values for variables of type binary or of type varying-length binary. To enter values for the columns in a data grid variable: aClick in the Value field, and then click . The Edit Data Grid window appears. bClick to add the row, and then enter the values for each column. Repeat this step for each row of values that you want to add to the data grid. TIP By default, data grid column names appear across the top of the data grid view, and row numbers appear down the left side. You can click to change the view of the data grid so that row numbers appear across the top and data grid column names appear down the left side. cClick OK to save the data grid values and close the Edit Data Grid window. 11(Optional) For each output variable, select the Include check box and enter the expected output value. The Include check box controls whether a variable’s expected value is used to determine the status of a scenario test. If you select Include for a variable and the test does not return the expected value, the test status is set to Completed with warnings ( ). If you do not select the check box, the application ignores the expected value of that variable when it determines the status of the test. To enter expected values for the columns in a data grid variable, click in the Expected Output field, and follow the instructions in Step 10 . Note: A scenario test cannot verify issues with trailing spaces. For example, it cannot distinguish between a string that contains a single space ' ' and a string that contains three spaces ' ' . 12Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 306. 13Click in the Results column to view the results of the test. 14On the Test Results page, click Test Results in the navigation panel to display the URIs and other information for the test.",494
569,"308. the right panel. Click or to to display list the errors or warnings. In the diagram, a red X identifies a decision node that produced an error and a yellow triangle identifies a node that produced a warning. Click View log next to an error or warning in the list to jump to the line that generated that error on the Log subtab. On the Output page, click Show All to display the expected and actual values of all output variables. Click Show Differences to display only the variables whose expected values do not match the actual values that were returned by the test. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Output page, click Export to export the output table as a comma-separated values (CSV) file. On the Log page, click to download the log file. 15Click Close to close test results and return to the Scoring tab. 16(Optional) Generate a variable change path report. Select the scenario test, click , and select Generate path report . SAS Intelligent Decisioning generates the report, adds it as a comment attachment to the scoring test, and opens the Comments property panel. Click on the report file name to open the report. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Note: If the decision is complicated or uses very large data grid variables, the report file might be very large, and you might encounter memory issues. 17(Optional) Generate a variable assignment report. Select the scenario test, click , and select Generate assignment report . SAS Intelligent Decisioning generates the report, adds it as a comment attachment to the scoring test, and opens the Comments property panel. Click on the report file name to open the report. The result depends on which browser you are using and the browser’s default download actions.",483
570,"309. Import Scenario Test Definitions You can import scenario test values from a comma-delimited (CSV) file. Each line in the CSV file is imported as one scenario test. In the CSV file, add a column of values for each variable. In the header row, enter the names of the input variables and of the output variables with _expected appended to the name. For example, suppose your scenario test has the input variables policyholder , cscore , and claims , and it has the output variables eligible and policies . An import file for this test might appear in a spreadsheet application as shown in the following figure. The policies output variable in this example is a data grid variable. To enter values for data grid variables, use the JSON string format described in “Introduction to Data Grids” in SAS Intelligent Decisioning: Using Data Grids . The format for date and datetime variables depends on your locale. Use the same format that is created by the date and datetime pickers when you click or to enter initial values for custom variables on the Variables tab. To import scenario test definitions: 1On the Scoring tab, click the Scenarios subtab, and then click Import Scenarios . The Import Scenarios window appears. 2In the Import from field, click and select the CSV file that contains the scenario test values. Note: The import file is limited to 10 MB. 3Select or enter the encoding of the CSV file. 4Enter a prefix for the scenario test definitions. SAS Intelligent Decisioning appends a number to this prefix for each test definition. The prefix can include double-byte characters and special characters, including single quotation marks. 5(Optional) Click for the Folder location field, and select the folder where you want to save the test definitions. 6Click for the Output table location field, and select the folder where you want to save the test results. 7(Optional) Select Enable variable change path logging to enable variable change path logging for the imported tests. For more information, see “Using Variable Change Path Logging” on page 294. 8Select Enable variable assignment logging to enable variable assignment logging for the imported tests. For more information, see “Using Variable Assignment Logging” on page 296.Testing Decisions 293",457
571,"31. 4(Optional) Select the Output check box if you want the value of the variable to be written to the output table that is generated when the rule set is run. Note: If the rule set will be included in and run as part of a decision, it is recommended that you do not select the Output check box for global variables in the rule set. Instead, select the Output check box for the decision variable of the same name after you add the rule set to the decision. For more information, see “Using Global Variables” on page 141. TIP In the Global Variables category view, the Value column displays the value of the latest version of the variable. The Activated Value column displays the value of the currently active version. A check mark in the Deleted column indicates that the variable has been deleted from the list of global variables. Create a Custom Variable Dynamically To create a variable in a rule set, you can enter the new variable name in any condition variable field and in the variable field of assignment statements. By default, SAS Intelligent Decisioning creates a variable of type Decimal. To create a variable of a different type, enter the variable name, a space, and then the data type. If you enter the name in a condition variable field, SAS Intelligent Decisioning creates the variable as an input-output variable. If you enter the name in an assignment statement, SAS Intelligent Decisioning creates the variable as an output variable. For example, you can create an input-output variable of type Character that is named address by entering it in the condition variable field: You can create an output-only variable of type Boolean named approve by entering it in an assignment statement, followed by a space and the data type: Create Custom Variables on the Variables Tab Note: For information about data grid variables, see “Defining Data Grid Variables” in SAS Intelligent Decisioning: Using Data Grids . To create custom variables on the Variables tab: 1Click the Rule Set Variables subtab.20Chapter 2 / Working with Rule Sets",409
572,"310. 9Click Import . Compare Different Scenarios You can display the scenario definitions or results of two or more tests side-by-side. On the Scenarios tab, select two or more tests, click , and select one of the following options: Compare ð Definitions displays the input values and the expected output values that you entered for both tests. To edit the input values for a scenario test definition, click next to the test name under Input Table . To edit the expected output values for a test, click next to the test name under Output Table . Compare ð Results displays the input values and the actual output values that were generated by the test. To display both the expected values and the actual values in the output table, select Display expected values . For each variable for which you selected Include in Step 11 on page 291, the application highlights the variable if the actual and expected values do not match. Click Export to export the results comparison as a comma-separated values (CSV) file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Using Variable Change Path Logging When you run a scenario test for a decision, you can select Enable variable change path logging to write information about node variables to a log as each node in the decision runs. Each log entry records value and mapping information for the node’s variables. After the scenario test has run, select the Generate path report menu option to generate a report from the log entries. SAS Intelligent Decisioning creates the report in a text file and adds this text file to the scenario test as a comment with an attachment. For all node types except branch nodes, the report records the initial value, the final value, and the mapping for each of the node’s variables. The information for each node, except branches, is enclosed in lines that begin with IN and OUT. For example, if the scenario test executes the treatment group named credit_card_offers followed by the rule set named calc_num_offers, the trace file contains the following lines:IN: decision - credit_card_offers IN: treatment group - card_offers  ...<<node variable values>>...",471
573,"311. ...<<decision variable values>>...OUT: decision - credit_card_offers Between the IN and OUT lines for each node, the report records the initial value, final value, and mapping for each of the node’s variables. For example, if a node has an input-only variable named RATE, an output-only variable named NUM_OFFERS, and an input-output variable named ACCTSCORE, the report might contain the following lines:*Setting inOut Variable - ACCTSCORE ( mapped to ACCTSCORE ) *ValueReceived: 0.698 *ValueReturned: 0.796*Setting input Variable - RATE ( mapped to RETURN )  *ValueReceived: 15.4*Setting output Variable - num_offers ( mapped to num_offers ) *ValueReceived: . *ValueReturned: 2 Note: A period (.) indicates a missing value. Boolean values are recorded as 0 (false) and 1 (true). Between the last node of the decision and the END node, the report contains the same information for each decision variable. These lines include the name of the decision. For example: *Setting credit_card_offers output Variable - zero_offers ( mapped to zero_offers ) *ValueReceived: . *ValueReturned: 0 For branches, the report records the branch condition and the path that the test takes out of the branch. For example, suppose the decision has a range branch that has different paths for the CLAGE variable. If the test follows the path for the range of values 101–300, the trace file contains the following line:IN: branch - Range(CLAGE) 101 - 300==>GEN==> In this case, the branch label is the default value 101 - 300 . If you customize the branch label, then 101 - 300==>GEN==> is replaced with the custom label. If the decision has a Yes/No branch with the condition zero_offers=True , and the test follows the No path, the trace file contains the following line:IN: branch - zero_offers=True onFalse If the Score rows in this data grid option is selected in the Input Variables property panel for a node, the IN line for that node lists the data grid that is being scored.",457
574,"312. TIP If the log files that are generated by either the Enable variable change path logging option or the Enable variable assignment logging option are very large, you might need to increase the JVM heap size for the Subject Contact and Files services. Because of the storage required by these options, do not select both of these options in the same test. For more information, see “Subject Contact Service Properties” in SAS Intelligent Decisioning: Administrator’s Guide . Instructions for enabling change path logging and for generating the report are in Step 6 and Step 16 of “Create and Run a Scenario Test” on page 289. Using Variable Assignment Logging When you run a scenario test for a decision, you can select Enable variable assignment logging to record how variable values change as a decision runs. This option adds the following statement to the generated code:DS2_OPTIONS TRACEVARIABLES; Note: To enable this option, your administrator must define the App.TableServices.DS2.Runtime.TraceVariables logger, and set other configuration options. If you select this option and configure the logger, SAS Intelligent Decisioning writes a log entry each time a variable is assigned a value. Each log entry includes the following information: nthe line number in the generated code where the value is assigned nthe type of code block in which the value was assigned (package or thread ) nthe name of the code block that assigned the value nthe line number in the individual code block nthe variable name and its assigned value Note: Log messages are limited to 32000 bytes, including the log message header. In locales that use multi-byte character sets, log entries might be truncated to 8000 characters. For example, if the decision includes a rule set named rs_hmeq_loan that sets the value of a variable named risky , the trace file might contain the following lines:Line 1053 (package ""56b88b7c_60c8_4c30_c8ec_82ea1b788180_rs_hmeq_loan"" line 102):  ""risky""=0Line 1058 (package ""56b88b7c_60c8_4c30_c8ec_82ea1b788180_rs_hmeq_loan"" line 107):  ""risky""=1 These entries indicate that on line 1053 of the generated code, the variable risky is set to 0.",489
575,"313. Note: A period (.) indicates a missing value. Boolean values are recorded as 0 (false) and 1 (true). For data grid variables, SAS Intelligent Decisioning creates a log entry for any assignment that changes the value of the variable and that is performed by using data grid functions or methods. For example, if the generated code uses the SAS Micro Analytic Service setValue method to set the value of a cell in a data grid named zero_offers_out_grid, the log might include the following entry:Line 556 (package ""71a328a8_7336_4c26_70c7_b5901f39d692_credit_card_offers_zero_offers""  line 44):Cell for column index 1 added for DataGrid ""zero_offers_out_grid""  with value 8d9bee3d-45f0-4249-b4d7-9aa92b865a92 SAS Intelligent Decisioning does not write log entries for direct assignments from one data grid variable to another such as gridVar1 = gridVar2 . If the data grid variable is an output variable, the log contains the entire value of the variable that is written to the output table. The log entry includes both the column metadata and the values for each column. For example, if the decision includes a treatment group named tg_hmeq, the decision creates an output data grid variable for the treatment group named tg_hmeq_out.",300
576,"314. TIP If the log files that are generated by either the Enable variable change path logging option or the Enable variable assignment logging option are very large, you might need to increase the JVM heap size for the Subject Contact and Files services. Because of the storage required by these options, do not select both of these options in the same test. For more information, see “Subject Contact Service Properties” in SAS Intelligent Decisioning: Administrator’s Guide . Instructions for enabling variable assignment logging are in Step 7 of “Create and Run a Scenario Test” on page 289. For more information about data grid variables, see SAS Intelligent Decisioning: Using Data Grids . For more information data grid packages and methods, see the following resources: n“DS2 Datagrid Package Methods, Operators, and Statements” in SAS DS2 Language Reference n“Using the Datagrid Package” in SAS DS2 Programmer’s Guide Run a Rule-Fired Analysis If a rule’s conditions evaluate to true, then the rule is said to have fired. Rule-fired data includes summary information about how many times each rule fired and detailed information for each time that a rule evaluates to true. See “How Rules Are Evaluated and When Rule-Fired Records Are Generated” on page 32 for more information. Note: Rule-fired data is recorded only for rule sets, including rule sets in nested decisions and filtering rule sets that are included directly in a decision. Rule-fired data is not recorded for other objects, including filtering rule sets that are used as eligibility rule sets in treatments. For filtering rule sets that are included directly in a decision, rule-fired data is recorded for an input record if the rule set does not filter out the record. When the rule set filters out an input record, rule-fired data is not recorded for that input record. For rule sets that iterate over a data grid (in other words, the rule sets score the rows in the data grid), the rule-fired data indicates that the rules in the rule set fire once for the entire data grid instead of firing once for each row in the data grid. Rule fired data is recorded for nested decisions only if the sas.decisions.includeRuleFiredInformationForSubdecisions configuration option is turned on.If the sas.decisions.nodetraces.includeRuleFiredPathTrackInfoInVariableAssignmentLogging configuration option is turned off, you cannot run rule-fired analyses for scenario tests.",486
577,"315. TIP This rule-fired analysis uses the data that is in the ruleFiredFlags column in the test results output table. To analyze rule-fired data that is in the subject contact history, use the %DCM_GET_SUBJECTCONTACT_HISTORY and %DCM_RULEFIRE_DETAIL macros. For more information, see SAS Intelligent Decisioning: Macro Guide . To run a rule-fired analysis: 1In the test results window, click Rule-Fired Analysis in the navigation panel. 2Click Run Rule-Fired Analysis . SAS Intelligent Decisioning analyzes the test results to determine which rules fired for each row in the input table, and displays the Analysis page. The Analysis page displays the number of rules that fired for each output record that was generated by the decision. The number in the Rules Fired Count column is a link to more information. You can click on this link to display the rules that fired for that output row. For example, in the following display there is one output record for which two rules fired. 3Click on a number in the Rule Fired Count column. SAS Intelligent Decisioning displays the Rule Fired Count window. This window shows which rules produced the selected output record.Testing Decisions 299",244
578,"316. Note: The value in the Rule Order column is the ordinal number of the rule as it occurs in the decision diagram. The values in this column do not indicate the order in which the rules in the decision fired. For decisions that use cross-branch links, click to switch the diagram between two different views of cross-branch links. It might be easier to correlate the rule order numbers with their location in the diagram by displaying the cross-branch links as nodes. 4Click Close to close the Rule Fired Count window. 5Click Plot in the navigation panel. SAS Intelligent Decisioning displays a bar chart that shows how many times each rule fired. Position your cursor over a bar to display the name of the rule and the number of times that the rule fired.300 Chapter 8 / Working with Decisions",165
579,"317. 6Click Rule-Fired Analysis in the navigation panel to display the URIs and other information for the rule-fired test. 7Click Close to close the decision. Run a Path Tracking Analysis Decision path tracking shows you the route that input records take through the nodes in your decision. Note: The path-tracking results do not include data for input records that are filtered out with a filtering rule set. Path-tracking analyses include information for nested decisions only if the sas.decisions.includeRuleFiredInformationForSubdecisions configuration option is turned on. If the sas.decisions.nodetraces.includeRuleFiredPathTrackInfoInVariableAssignmentLogging configuration option is turned off, you cannot run path-tracking analyses for scenario tests.Testing Decisions 301",154
580,"318. TIP This path-tracking analysis uses the data that is in the pathID column in the test results output table. To analyze path-tracking data that is in the subject contact history, use the %DCM_DECISION_PATH_FREQUENCY, %DCM_DECISION_PATH_NODES, and %DCM_DECISION_NODES_COUNTS macros. For more information, see SAS Intelligent Decisioning: Macro Guide . 1In the test results window, click Decision Path Tracking in the navigation panel. 2Click Run Path Tracking to run a decision path analysis. 3Click Analysis and Plot to display a Sankey diagram that shows the flow of the input records through the nodes in the decision. The numbers in the diagram are the number of rows in the input table that followed each path. Note: Nodes that are not executed are shown to the right of the Sankey diagram.302 Chapter 8 / Working with Decisions",183
581,"319. 4Click Node Count in the navigation panel to display a table showing the number of input records evaluated at each rule set, code file, and model node in the decision. 5Click Close to close the Test Results window. Content That Is Used by Tests and Scenarios for Decisions For each object in a decision, the content that is used when the decision is tested depends on the object type.Object TypeObject Content that Is UsedNested decisionThe version that you select when you add the nested decision to the decisionRule setThe version that you select when you add the rule set to the decisionModelThe latest versionTreatment groupThe active versionLookup tableThe active versionGlobal variableThe active versionCustom code fileThe version that you select when you add the code file to the decision Validate a Published Decision You can test the published decision in the publishing destination. When you publish the decision to any destination type except Git, a validation test is automatically defined for that decision in that destination. Note: When both the SAS Intelligent Decisioning sas.decisions.masnode.removeTrailingUnderscoresFromInput property and the SAS Micro Analytic Service service.removetrailingunderscoresfrominputs property are set to On, publishing validation tests will fail for content that has been published to a SAS Micro Analytic Service destination. To run the publishing validation test:Testing Decisions 303",275
582,"32. 2Click Add variable and select Custom variable . The Add Variables window appears. 3Complete these steps for each variable that you want to add: aEnter the name of the new variable, and select the data type of the variable. See “The Properties of a Variable” on page 16 for additional information. TIP To re-add a variable that was used in a locked version, you must specify the same data type that was used in the previous version. b(Optional) Click Optional to display the Description , Initial value , and Length fields. c(Optional) Enter a length, initial value, and description for the new variable. Whether you can specify an intial value or length for the variable depends on the variable's data type. See “The Properties of a Variable” on page 16 for additional information. dClick Add. SAS Intelligent Decisioning adds the new variable to the table of variables at the bottom of the window. By default, variables are added to the table as both input and output variables. eVerify that the Input and Output check boxes are selected correctly for each variable. nClear the Input check box for any variable that you do not want to be mapped to a column in an input table or for which you do not want to specify a value. nClear the Output check box for any variable that you want to exclude from the output data. nClear both the Input and Output check boxes to create a temporary variable. 4(Optional) Modify the variable properties in the table of variables. 5Click OK to add the variables and close the Add Variables window. Duplicate a Variable 1On the Variables tab, click the Rule Set Variables subtab. 2Select the variable that you want to duplicate, click , and select Duplicate . The Duplicate Variable window appears. 3Enter a new name for the duplicate variable. 4(Optional) Enter a description for the variable. 5Click Duplicate .Managing the Variables in a Rule Set 21",399
583,"320. 1On the Scoring tab, click the Publishing Validation tab. The icon in the Status column indicates that the test is not ready to run. The icon indicates that the test is ready to run. 2Click on the test name. The Edit Publishing Validation Test window appears. Note: To generate the name of the publishing validation test, SAS Intelligent Decisioning appends a timestamp to the decision name. The timestamp indicates when the decision was published. 3(Optional) Click in the Location field, and select the folder where you want to save the test definition and results. TIP Selecting a location is optional, but it is highly recommended. Storing test definitions and test results in a folder simplifies the tasks of setting permissions and transferring the test files. 4Click in the Input table field, and select the input table for the test. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published. Note: If the input table contains a character column, and that column contains control characters in any row, do not use the table as input for publishing validation tests. If you are validating content that was published to SAS Micro Analytic Service, the time required to run the test depends on the number of worker threads on your system, the number of threads in the middle tier, and the network latency between CAS and the middle tier server. It is recommended that you select an input table with as few input records as needed to accurately test the published content. See SAS Micro Analytic Service: Programming and Administration Guide for more information. 5(Optional) Expand the Advanced section, click in the Output data library field, and select a library to store the validation test output data. 6Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 306. 7Click in the Results column to view the test results. 8In the test results window, click Test Results in the navigation panel to display the URIs and other information for the test.",481
584,"321. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Log page, you can click to download the log file. 9Click Close to close the decision. Working with Test and Validation Test Output Data After you run a test or a publishing validation test, you can work with the output table in other SAS applications to analyze the data, create and compare models, discover relationships hidden in the data, and generate reports based on the data. Note: The actions available to you depend on the applications that are available at your site. On the Test Results page, select the Output table in the navigation pane, click Actions , and select one of the following options: Explore Lineage opens SAS Lineage Viewer. SAS Lineage Viewer enables you to better understand the relationships between objects in your SAS Viya applications. These objects include data, transformation processes, reports, and visualizations. For more information, see SAS Lineage: User’s Guide . Explore and Visualize Data opens the output table in SAS Visual Analytics. SAS Visual Analytics enables you to create, test, and compare models based on the patterns discovered during exploration of the data. You can export the model before or after performing model comparison for use with other SAS products or to put the model into production. SAS Visual Analytics supports a range of visualization, discovery, and reporting features. For more information, see Welcome to SAS Visual Analytics . Prepare Data opens the output table in SAS Data Studio. SAS Data Studio enables you to perform data transforms such as joining tables, appending data to a table, transposing columns, creating calculated columns, and so on. For more information, see SAS Data Studio: User’s Guide .Testing Decisions 305",422
585,"322. Status Icons for TestsIconStatusThe test is not ready to run. The test definition is not complete, or it might contain errors.The test has been defined and can be run. Some input variables have not been mapped or have not been assigned a value, so the test might execute only a single path through the decision flow.The test is defined correctly and is ready to run.The test is running.The test completed successfully.The test completed, but warnings were issued in the SAS log. The URI to the log file is shown on the Test Results page. On the Test Results page, click Test Results in the navigation panel to display the URI.The test did not run successfully. Check the SAS log for information. The URI to the log file is shown on the Test Results page. On the Test Results page, click Test Results in the navigation panel to display the URI. Manage Comments for Decision Nodes and Tests You can associate comments and attachments with the Start and End nodes in a decision and with decision tests. To open the Comments properties pane, open the decision, select the Start node, End node, or decision test, and click in the property pane. To add a new comment, enter the comment in the text box and click Post . To add an attachment to a comment, click , select the file that you want to attach, and click Post . (The attachment icon appears after you enter text in text box.) You cannot attach executable files such as BAT and EXE files. To reply to a comment, click Reply , enter your reply in the text box, and click Post . To delete a comment, click for that comment.306 Chapter 8 / Working with Decisions",337
586,"323. Executing Published Content How you execute published content depends on the destination to which the content is published. Executing Content Published to SAS Micro Analytic Service Destinations The user who is executing the published content must be authenticated. In SAS Viya, authentication options vary, based on which interface and operating system are used in your environment. External mechanisms include direct LDAP authentication, host authentication, Kerberos, Security Assertion Markup Language (SAML), and OAuth 2.0 with OpenID Connect. For additional information, see SAS Viya Platform: Authentication When a decision is published from SAS Intelligent Decisioning to a SAS Micro Analytic Service destination, an EXECUTE step is created in the published module. For information about the request and response data formats used in this step, see Execute a step in the REST API documentation for the Micro Analytic Score API. For an example that uses Python to execute a published decision in the maslocal destination, see “Execute a Published Decision” in SAS Intelligent Decisioning: Decision Management REST API Examples . IMPORTANT If the SAS Micro Analytic Service configuration property service.removetrailingunderscoresfrominputs and the SAS Intelligent Decisioning property sas.decisions.masnode.removeTrailingUnderscoresFromInput are not defined or are set to False , add an underscore to the name of each input variable. If these options are set to True , do not add underscores. Your administrator can add the SAS Micro Analytic Service property to the supplementalProperties section in the sas.microanalyticservice.system configuration definition in SAS Environment Manager. The default value for these options is False .For additional information, see “sas.microanalyticservice.system: supplementalProperties” in SAS Micro Analytic Service: Programming and Administration Guide and “sas.decisions.masnode.removeTrailingUnderscoresFromInput” in SAS Intelligent Decisioning: Administrator’s Guide .Executing Published Content 307",380
587,"324. Executing Content That Has Been Published to SAS Cloud Analytic Services Destinations To execute content that has been published to SAS Cloud Analytic Services (CAS), use the CAS Model Publishing and Scoring action set. For example, the following code runs a model named Evaluate_Loans on the local CAS server./* Start a CAS session named _mmcas_. */cas _mmcas_;/* Create librefs for all existing caslibs so that they *//* are visible in the SAS Studio Libraries tree.   */caslib _all_ assign;proc cas; /* Specify the session to use for the runModelLocal action. */ session _mmcas_;  /* Define the parameter list for the runModelLocal action. */ /* Reload the destination model table (""targetCode"")  */ /* before you execute the decision.      */  destination_model_table = ""targetCode""; destination_model_lib = ""public"";  destination_model = ""Evaluate_Loans"";  dp_inputTable=""hmeq_test""; dp_inputCASLib=""public"";  dp_outputTable=""hmeq_test_dm""; dp_outputCASLib=""public"";  parmlist = {  modelTable={   name=destination_model_table,   caslib=destination_model_lib   },  modelName=destination_model,  inTable={   name=dp_inputTable,   caslib=dp_inputCASLib  },  outTable={   name=dp_outputTable,   caslib=dp_outputCASLib  } }; /* Load the modelPublishing action set. */ loadactionset ""modelPublishing""; /* Run the model locally on the CAS server. */ 308 Chapter 8 / Working with Decisions",344
588,"325. action runModelLocal submit result=r status=rc / parmlist;run;quit; If SAS Data Studio is licensed at your site, you can submit this code in SAS Data Studio. To open SAS Data Studio, click and select Prepare Data . For more information, see SAS Data Studio: User’s Guide . You can view additional examples of using this CAS action set to execute published content by viewing the test results that are generated by publishing validation tests. On the Test Results page for a decision, click Code to display the code that was generated by SAS Intelligent Decisioning . For information about running publishing validation tests and viewing the results, see “Validate a Published Decision” on page 303. For more information about CAS and the Model Publishing and Scoring action set, see the following documentation: nGetting Started with CASL Programming nSAS Cloud Analytic Services: CASL Reference n“Model Publishing and Scoring Action Set” in SAS Visual Analytics: Programming Guide nSAS Cloud Analytic Services: User’s Guide Content Executed by Published Decisions When you execute a published decision, the version of the content that is executed depends on the publishing destination.Destination TypeContent That Is Executed by Published DecisionsSAS Micro Analytic ServiceMost of the published decision’s content (the SAS Micro Analytic Service module) is locked. Updates to rule sets, models, custom functions, or custom code files that are used in the decision do not affect the published module. Treatment groups are embedded in decisions if the masInlineTreatmentGroup configuration option is turned on. If this option is off, treatment groups are not embedded, and published modules use newly activated versions of treatment groups. For more information, see “sas.decisions.masInlineTreatmentGroup” in SAS Intelligent Decisioning: Administrator’s Guide . Global variables are not locked. If a new version of a global variable is activated, the newly activated version is used by the published module. Lookup tables are embedded in decisions if the lookupStaticBinding configuration option is turned on. If this option is off, lookup tables are not embedded, and published modules use newly activated versions of lookup tables. For more information, see “sas.businessrules.lookupStaticBinding” in SAS Intelligent Decisioning: Administrator’s Guide .Executing Published Content 309",462
589,"326. Destination TypeContent That Is Executed by Published DecisionsFor Micro Analytic Module nodes, the decision always uses the most recently published version of the specified module.SAS Cloud Analytic ServicesMost of the published decision’s content is locked. Updates to rule sets, models, treatment groups, custom functions, or custom code files that are used in the decision do not affect the published decision. The current values of global variables are included in generated code if the inlineGlobalVariableValues configuration option is turned on, and published modules do not use newly activated versions of global variables. If this option is turned off, the generated code uses a SAS format to retrieve the current value of the global variable when the published module is run. For more information, see “sas.decisions.inlineGlobalVariableValues” in SAS Intelligent Decisioning: Administrator’s Guide . Lookup tables are locked if the lookupStaticBinding configuration option is turned on. If this option is off, lookup tables are not locked, and published modules use newly activated versions of lookup tables. For more information, see “sas.businessrules.lookupStaticBinding” in SAS Intelligent Decisioning: Administrator’s Guide .Teradata, Hadoop, and Container DestinationsAll of the published decision’s content, including treatment groups, custom functions, lookup tables, and global variables is included inline in the published module. Updates to the objects used in the decision are not used by the published module. View All Published Decisions The Deployments category view is a dashboard that provides a centralized view of information about all the decisions that are being used in your environment. Click to navigate to the Deployments category view. The tiles at the top of this view visually display key metrics about the total number of decisions in your environment. For example, the tiles display information such as destination types, deployments to single destinations or to multiple destinations, and deployments with and without models. TIP You can click to hide the tiles. The tabular view below the tiles displays details about each published decision in your environment. For example, details include information such as the decision name, the published destination, the published date, the number of nodes, and 310 Chapter 8 / Working with Decisions",442
590,"327. associated tags. By default, the decisions that were published within the last 6 months are included. The table also includes the current version for each decision. You can click a decision version in the Decision (Version) column to see the details for that version. The decision version opens on the Decision Flow tab. For more information about viewing and editing decisions, see “About Decisions” on page 215 . You can search for a decision by name by typing in the search field. Click Advanced search to search for deployed decisions that were published on a specific date or within a range of dates.View All Published Decisions 311",127
591,328. 312 Chapter 8 / Working with Decisions,12
592,329. Appendix 1 Querying the Subject Contact Database About the Subject Contact Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313 How to Query the Subject Contacts Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314 Using Views Defined by SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . . . . . 315 Columns in the dcm_trt_fixed_attr_vw and dcm_trt_dynamic_attr_vw Views . . 316 Columns in the dcm_treatments_contacts_vw View . . . . . . . . . . . . . . . . . . . . . . . . . . . 318 Examples: . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 321 Determine Whether Any Treatments Were Sent to a Subject . . . . . . .,294
593,. . . . . . . . . . . . 321 Determine Whether a Treatment was Sent to a Subject within a Specific Time Frame . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322 Determine Whether a Treatment with a Specific Attribute Value Was Sent to a Subject . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322 Determine Whether a Treatment Was Presented to a Subject within a Specified Time Frame . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322 Determine Whether a Subject Responded to a Treatment within a Specified Time Frame . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,283
594,"33. Importing and Exporting Variables Import Variables You can import variables from either comma-delimited (CSV) files or from JavaScript Object Notation (JSON) files. These files must conform to formats described in Appendix 2, “Import File Formats,” on page 325. These formats are the same formats that are created when you export variables. 1Open the rule set into which you want to import variables. 2On the Variables tab, click Import , and select either Comma-delimited (*.csv) or JSON (*.json) . The Import File window appears. 3Click Browse and select the file from which you want to import variables. 4Specify the encoding of the CSV file. 5Select Add variables to append the variables to the current list of variables, or select Replace variables to replace the current list of variables with the imported variables. TIP To add new columns to an existing data grid variable, select Replace variables . Note: If you replace the list of variables in a rule set and a variable that is used in a locked version of the rule set is not included in the import file, you cannot save the rule set. 6Click Import , and then click to import the variables and save the rule set. Export Variables 1Open the rule set from which you want to export variables. 2On the Rule Set Variables tab, select the variables that you want to export. 3Click Export , and select the file type to which you want to export the variables. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application.22Chapter 2 / Working with Rule Sets",371
595,"330. information in JSON syntax. You can use these variables and the SAS Decision Management REST API to update the subject contact database. For example, your enterprise might have a batch job that runs at specific times and updates the subject contact database. When you add a record contacts node to a decision, you specify the data grid variable and the decision variables that you want to track in the subject contacts record. When the decision contains a treatment, you usually specify the output data grid that is produced by the treatment as the data grid to track. This data grid contains information about the treatments for which the subject qualifies. You usually also track the decision variables that are mapped to dynamic attributes. The record contacts node also generates a response tracking code that you can use in a REST API request to update the subject contact database with information about the subject’s response to the treatments. For more information about treatments, attributes, and record contacts nodes, see Chapter 3, “Working with Treatments and Treatment Groups,” on page 83 and “Adding Record Contacts Nodes” on page 233. Information about the Subject Contacts REST API is available at https://developer.sas.com . You can query the subject contact records and treatment definitions to determine which treatments a subject qualifies for, whether a treatment has been presented to a subject, which treatments a subject has responded to, and so on. SAS Intelligent Decisioning provides database views that you can use to query the database. How to Query the Subject Contacts Database If you are using the PostgreSQL instance that was installed with SAS Viya for your database, the recommended way to query the database is to use the SAS Decision Management REST API. Complete reference information for the Decision Management API is available at http://developer.sas.com . For examples of using the Subject Contacts API, see the examples on GitHub . For additional information and examples, see SAS Intelligent Decisioning: Decision Management REST API Examples . If you are using a third-party database, you can use the database views that are provided by SAS Intelligent Decisioning . You can create a data query file in the SQL editor that uses these views and include the data query file in a decision. For more information, see “Using Views Defined by SAS Intelligent Decisioning” on page 315 and “Data Query Files” on page 159.314 Appendix 1 / Querying the Subject Contact Database",471
596,"331. Using Views Defined by SAS Intelligent Decisioning SAS Intelligent Decisioning defines views that you can use to query the subject contacts records and treatment definitions. These views are created automatically when the subject contacts service and the decision-treatment service are started. SAS Intelligent Decisioning defines the following three views: dcm_trt_fixed_attr_vw contains fixed treatment attributes for treatments that are members of a treatment definition group. This view enables you to retrieve the list of fixed attributes for a specific version of a treatment group. Treatments can be used in multiple treatment groups, so the table might contain multiple records for the same attribute. This view includes the values that were assigned to the attributes. The attribute values for the same treatment version are the same, but the attribute values might differ between treatment versions. dcm_trt_dynamic_attr_vw contains dynamic treatment attributes for treatments that are members of a treatment definition group. This view enables you to retrieve the list of dynamic attributes for a specific version of a treatment group. Treatments can be used in multiple treatment groups, so the table might contain multiple records for the same attribute. These attributes can be assigned either a static value in the treatment group, or they can be mapped to a decision variable and receive their value from the variable when the decision executes. For attributes that are assigned a static value in a group, this view includes the values that were assigned to them. The values of these attributes might be different for each treatment group in which the treatment that defines the attribute appears. For dynamic attributes that are mapped to a decision variable, the attribute values are not present in this view. To trace the values of these attributes, the decision variables must be tracked by the record contacts node. For more information, see “Adding Record Contacts Nodes” on page 233. dcm_treatment_contacts_vw contains detailed contact information for each treatment that was sent to a subject. This table enables you to determine which treatments were offered to a subject either for a specific response (identified by the response tracking code) or for the entire set of history records that are retained in the database. The number of treatments associated with a specific response tracking code or subject ID depends on how many treatments were returned by the decisions that created the contact records. Note: To query both treatment definitions and subject contact records, you must join an attribute view with a treatment view.",475
597,"332. These views assume that the input and output values of the treatment groups are not modified before they are recorded by a record contacts node. Columns in the dcm_trt_fixed_attr_vw and dcm_trt_dynamic_attr_vw Views Both attribute tables contain the same columns. The dcm_trt_fixed_attr_vw view contains information about fixed attributes, and the dcm_trt_dynamic_attr_vw view contains information about dynamic attributes. For information about treatment attributes, see “Attributes and Attribute Aliases” on page 88. The following table describes each column in these views and lists the associated schema property in the Decision Management REST API.ColumnDescriptionSchema Propertyattribute_nmName of the attribute.name in the Treatment Definition Attribute object in the Treatment Definition Collectionattribute_val_fixed_flgA flag that indicates whether the attribute is fixed or dynamic. For dynamic attributes, this column is set to false . For fixed attributes, this column is set to true .readOnly in the Treatment Definition Attribute object in the Treatment Definition Collectionmapping_type_cdA code that indicates whether dynamic attributes get their value from the decision flow or are set to a static value. For dynamic attributes, this column is set to constant if the attribute is assigned a static value in the treatment group. This column is set to variable if the attribute gets its value from the decision flow. For fixed attributes, this column is set to null .mappingType in the Treatment Definition Group Attribute Value Mapping object in the Treatment Definition Collectionattribute_default_valThe default value that was set for the attribute when the attribute was defined in the treatment. For dynamic variables, this value might be overridden if the attribute is assigned a static value in the treatment group or if the attribute gets its value from the decision flow. For fixed attributes, this value is the value that is used in the decision flow.defaultValue in the Treatment Definition Attribute object in the Treatment Definition Collection316 Appendix 1 / Querying the Subject Contact Database",387
598,"333. ColumnDescriptionSchema Propertyattribute_valThe actual value or the variable mapping for dynamic attributes. For dynamic attributes that get their value from the decision flow, this column is set to the name of the variable to which the attribute is mapped in the decision flow. For dynamic attributes that are assigned a static value in the treatment group, this column is set to the static value. For fixed attributes, this column is set to the name of the variable to which the attribute is mapped in the decision flow.value in the Treatment Definition Group Attribute Value Mapping object in the Treatment Definition Collectiontreatment_nmName of the treatment definition that contains the attribute.name in the Treatment Definition object in the Treatment Definition Collectiontreatment_idID of the treatment definition.id in the Treatment Definition object in the Treatment Definition Collectiontreatment_revision_idID of the treatment definition version.definitionRevisionId in the Treatment Definition Group Member object in the Treatment Definition Group Collectiontreatment_version_noVersion number of the treatment definition.definitionRevisionName in the Treatment Definition Group Member object in the Treatment Definition Group Collection . For example, treatment_version_no could be 2.14 , where 2 is the treatment definition major revision number and 14 is the treatment defintion minor version number.treatment_grp_nmName of the treatment definition group that contains the treatment.name in the Treatment Definition Group object in the Treatment Definition Group Collectiontreatment_grp_idID of the treatment definition group.id in the Treatment Definition Group object in the Treatment Definition Group CollectionColumns in the dcm_trt_fixed_attr_vw and dcm_trt_dynamic_attr_vw Views 317",317
599,"334. ColumnDescriptionSchema Propertytreatment_grp_revisio n_idVersion ID of the treatment definition group.definitionRevisionId in the Treatment Definition Group Member object in the Treatment Definition Group Collectiontreatment_grp_version _major_noMajor version number of the treatment definition group. If the treatment definition group is 2.5, then this column is set to 2 .majorRevision in the Treatment Definition Group object in the Treatment Definition Group Collectiontreatment_grp_version _minor_noMinor version number of the treatment definition group. If the treatment definition group is 2.5, then this column is set to 5 .minorRevision in the Treatment Definition Group object in the Treatment Definition Group Collection Columns in the dcm_treatments_contacts_vw View The dcm_treatments_contacts_vw view contains detailed information about subject contact records. The following table describes each column in the view and lists the associated schema property in the Decision Management REST API.ColumnDescriptionSchema Propertycontact_idA unique identifier for the contact record. A contact record with a new contact_id is created when a decision determines that a subject is eligible for a specific treatment and writes the contact record to the database.id in the contact record subject_idThe ID of the subject if a subject ID variable is defined in the properties for the decision flow.subjectId in the contact recordsubject_levelThe subject level if a subject level variable is defined in the decision flow. For more information, see “Predefined Lookup Tables” on page 116.subjectLevel in the contact recordcreated_by_nmThe ID of the user who ran the decision that created contact record.createdBy in the contact record318 Appendix 1 / Querying the Subject Contact Database",336
600,"335. ColumnDescriptionSchema Propertymodified_by_nmThe ID of the user who last modified the contact record. For example, subject contact records can be modified to include a recording of the treatment presentation or to include information about the subject’s response to the treatment.modifiedBy in the contact recordcreation_dttmA timestamp that indicates when the contact record was created.creationTimeStamp in the contact recordmodified_dttmA timestamp that indicates when the contact record was last modified.modifiedTimeStamp in the contact recordcontact_channel_txtThe channel through which the contact occurred. For more information, see “About Channels” on page 90.channel in the contact recordresponse_tracking_cdThe response tracking code that was generated by the record contacts node.responseTrackingCode in the contact recordconclusion_response_ txtThe subject’s response to the results of the decision. When the decision includes treatments, this value might represent an overall response to all of the treatments in the subject contact record.conclusionResponseValue in the contact recordconclusion_response_ type_txtA summary value, category name, or other description for the response that is specified in the conclusion_response_txt column. For example, this value might be Evaluating , No response , or Closed-Lost .conclusionResponseType in the contact recordobject_type_cdA string that identifies the type of resource that created the contact record. Currently, the only value in this column is decision .objectType in the contact recordobject_revision_idThe ID for the version of the object that created the contact record.objectRevisionId in the contact recordobject_url_txtThe URI for the decision that created the contact record (for example, /decisions/flows/545783f1-4fb3-45aa-be7d-d9e5a13ed943 ).objectUri in the contact recordexclude_from_contact _rule_txtSpecifies whether the contact record is included in aggregate reports for the channel. Column values are true or false .excludeFromContactRule in the contact recordrule_fired_txtRule-fired information for the decision if that information was recorded by the record contacts node.ruleFired in the contact recordColumns in the dcm_treatments_contacts_vw View 319",432
601,"336. ColumnDescriptionSchema Propertytraversed_rule_path_li st_txtPath-tracking information for the decision if that information was recorded by the record contacts node.pathTraversed in the contact recordtreatment_receiver_idA string that identifies the entity that received the treatment. If this entity is the subject, then the treatment_receiver_id column contains the same value as the subject_id column. Note: This column is present in the table, but it is not currently used.receiverId in the contact recordtreatment_receiver_rol e_txtA string that identifies the role of the entity that received the treatment. For example, the receiver might be the subject or an agent. Note: This column is present in the table, but it is not currently used.receiverRole in the contact recordtreatment_revision_idThe ID of the treatment definition version.treatmentRevisionId in the treatmentForConsideration tabletreatment_idThe ID of the treatment definition.treatmentId in thetreatmentForConsidera tion tablepresented_txtSpecifies whether the treatment was presented to the subject. The values in this column are a character string representation of a Boolean value: true or false .presented in the treatmentForConsideration tablepresentation_dttmA timestamp that indicates when the treatment was presented to the subject. The timestamp format is Coordinated Universal Time (UTC):yyyy-mm-ddThh:mm:ss.sssZ presentedTimeStamp in the treatmentForConsideration tableresponse_dttmA UTC timestamp that indicates when the subject responded to the treatment.respondedTimeStamp in the treatmentForConsideration tableresponse_txtThe subject’s response to the treatment. For example, this value might be a value or code such as Purchased , Rejected , Requested quote , Email opened , or rt1 .responseValue in the treatmentForConsideration tableresponse_type_txtA summary value, category name, or other description for the response that is specified by the value of the response_txt column. For example, this value might be Positive , Negative , or Neutral .responseType in the treatmentForConsideration table320 Appendix 1 / Querying the Subject Contact Database",425
602,"337. ColumnDescriptionSchema Propertyresponse_channel_txtThe channel through which the user responded to the treatment. The response channel might be different from the contact channel. For more information, see “About Channels” on page 90.responseChannel in the treatmentForConsideration tabletreatment_group_idThe ID of the treatment group that contains the treatment.treatmentGroupId in the treatmentForConsideration tableconsider_idThe primary key of the dcm_treatment_consideration table.An internal ID for each treatment that was sent to a subject. This ID is unique within the view. This column is in not in the schema.treatment_group_revis ion_idThe ID of the treatment definition group version.treatmentGroupRevisionId in the treatmentForConsideration tableobject_node_idThe ID of the node in the decision whose URL is specified in the object_url_txt column. For example, if the same treatment group is included in a decision multiple times, this ID enables you to determine which node generated an offer.objectNodeId in the treatmentForConsideration table Examples Example 1: Determine Whether Any Treatments Were Sent to a Subject The following query determines whether any treatments were sent to the subject with the ID 98.select count(distinct contact_id)from subjectcontacts.dcm_treatment_contacts_vwwhere subject_id='98'; Example 1: Determine Whether Any Treatments Were Sent to a Subject 321",276
603,"338. Example 2: Determine Whether a Treatment was Sent to a Subject within a Specific Time Frame The following query determines whether the specified treatment (the treatment with the ID fcdfabaf-9932-430e-8cf3-149b212881d7) was sent to the subject with the ID 98 between March 1, 2022 and March 31, 2022.select count(distinct contact_id)from subjectcontacts.dcm_treatment_contacts_vwwhere creation_dttm >='2022-03-01 00:00:00.000' and creation_dttm <= '2022-03-31 23:59:59.999'and subject_id='98' and treatment_ID = 'fcdfabaf-9932-430e-8cf3-149b212881d7'; Example 3: Determine Whether a Treatment with a Specific Attribute Value Was Sent to a Subject The following query determines whether the specified treatment was sent to subject 98 at a price of 50.00 euros between January 1, 2022 and March 31, 2022. The price is a dynamic attribute that has been assigned a static value in the treatment group, so the query joins the dcm_treatment_contacts_vs view and the dcm_trt_dynamic_attr_vw view.select count(distinct contact_id)from subjectcontacts.dcm_treatment_contacts_vw as sub,treatmentdefinitions.dcm_trt_dynamic_attr_vw as treatwhere sub.treatment_id = treat.treatment_idand sub.subject_id='98' and sub.creation_dttm >='2022-01-01 00:00:00.000'and sub.creation_dttm <= '2022-03-31 23:59:59.999'and treat.treatment_ID = 'fcdfabaf-9932-430e-8cf3-149b212881d7'and treat.attribute_nm='price' and treat.attribute_val='50.00'; Example 4: Determine Whether a Treatment Was Presented to a Subject within a Specified Time Frame The presence of a timestamp in the presentation_dttm column indicates that the treatment was presented to the subject. The following query determines whether the 322 Appendix 1 / Querying the Subject Contact Database",474
604,"339. specified treatment was presented to subject 98 between May 15, 2022 and June 30, 2022.select count(distinct contact_id)from subjectcontacts.dcm_treatment_contacts_vwwhere creation_dttm >='2022-05-15 00:00:00.000' and creation_dttm <= '2022-06-30 23:59:59.999'and subject_id='98' and treatment_ID = 'fcdfabaf-9932-430e-8cf3-149b212881d7'and presentation_dttm is not null; Example 5: Determine Whether a Subject Responded to a Treatment within a Specified Time Frame The presence of a timestamp in the response_dttm column indicates that the subject responded to the treatment. The following query determines whether subject 98 responded to the specified treatment between May 15, 2022 and June 30, 2022.select count(distinct contact_id)from subjectcontacts.dcm_treatment_contacts_vwwhere creation_dttm >='2022-05-15 00:00:00.000' and creation_dttm <= '2022-06-30 23:59:59.999'and subject_id='98' and treatment_ID = 'fcdfabaf-9932-430e-8cf3-149b212881d7'and response_dttm is not null; Example 6: Determine Whether a Subject Responded to a Treatment with a Specific Attribute Value within a Specified Time Frame The following query determines whether subject 98 responded to the specified treatment at a price of 100.00 euros between January 1, 2022 and March 15, 2022.",364
605,"34. Delete Variables Note: You cannot delete a variable if it is used in the current version of an object. You can delete variables from the current version if they are used only in locked versions, but those variables are still included in the locked versions. 1On the Variables tab, click the Rule Set Variables subtab. 2Select the check box for the variables that you want to delete, click , and select Delete . Edit Variable Properties On the Variables tab, click the Rule Set Variables subtab, and click on the name of the variable that you want to edit. The Edit Variable window appears. Edit the properties as needed, and then click OK. Note: When you rename a variable, references to that variable within the same object change to use the new name. You cannot change the name or data type of a variable that is used in locked versions. See “The Properties of a Variable” on page 16 for additional information. Edit Metadata for Data Grid Variables For information, see “Editing Data Grid Variable Metadata” in SAS Intelligent Decisioning: Using Data Grids . Determine Which Objects Use a Particular Variable On either the Rule Set Variables subtab or the Global Variables subtab, select the check box for the variable, click , and select View used by report . In the report, you can use the Filter field to filter the list of objects based on the object names. If the variable that was selected in Step 1 above is a data grid variable, and if you are interested only in a specific column within the data grid, you can select the column in the Column name field, and then click Apply . SAS Intelligent Decisioning narrows the search results to only the objects that use the data grid with the selected column.Managing the Variables in a Rule Set 23",361
606,340. and response_dttm is not null; Example 7: Determine Whether a Subject Responded to Any Treatment within a Specified Time Frame The following query determines whether subject 98 responded to any treatment in the first six months of 2022.select count(distinct contact_id)from subjectcontacts.dcm_treatment_contacts_vwwhere creation_dttm >='2022-01-01 00:00:00.000' and creation_dttm <= '2022-06-30 23:59:59.999'and subject_id='98' and response_dttm is not null; 324 Appendix 1 / Querying the Subject Contact Database,139
607,"341. Appendix 2 Import File Formats Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 CSV Format of the Variable Import File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 JSON Format of the Variable Import File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327 Introduction You can import rule set and decision variables from either comma-delimited (CSV) files or JavaScript Object Notation (JSON) files. These files must conform to formats described in “CSV Format of the Variable Import File” on page 325 and “JSON Format of the Variable Import File” on page 327. For more information, see “Importing and Exporting Variables” on page 227. CSV Format of the Variable Import File Each row of the CSV input file contains the name of either a decision or rule set variable or of a data grid column if one of the decision or rule set variables is a data grid. The first line of the input file must be a header row. The CSV file must contain all of the columns listed in the following table, in the order listed. The value for some columns can be blank, as noted in the table. To create a blank column in the CSV file, specify two comma separators without any content between them.325",371
608,"342. Table A3.1 CSV Format of the Variable Import File ColumnDescriptionnameThe name of a rule set variable, a decision variable, or a data grid column. If one of the rule set or decision variables is a data grid variable, then specify the name of a column within the data grid.dataGridNameIf the name column contains the name of a data grid column, then the dataGridName column contains the name of the rule set or decision variable that contains the data grid.dataTypeThe data type of the variable. You can specify decimal , integer , date , datetime , boolean , or datagrid . For character variables, specify string .directionWhether the rule set or decision variable is an input-only variable (input ), an output-only variable (output ), both (inOut ). Do not specify a direction for data grid columns. If you do not specify a direction for a rule set or decision variable, the direction is imported as inOut . To designate a variable as a temporary variable, edit the variable properties on the Variables tab.lengthThe length of the variable. Specify lengths for character variables only (strings or data grids).descriptionA description of the variable. Descriptions are limited to 256 characters.defaultValueAn initial (default) value for the variable. The following example specifies nine variables. The variable card_offers_out is a data grid. The variables annual_fee, APR, and card_type are columns in the data grid. The variable i is a temporary variable that has an initial value of zero.name,dataGridName,dataType,direction,length,description,defaultValueACCOUNT,,string,inOut,13,,ACCTSCORE,,decimal,inOut,,,card_offers_out,,dataGrid,output,,,annual_fee,card_offers_out,decimal,,,,APR,card_offers_out,decimal,,,,card_type,card_offers_out,string,,32767,,DEBTINC,,decimal,input,,,i,,decimal,inOut,,temporary,0zero_offers,,boolean,output,,, In a spreadsheet application, this CSV file appears as shown in the following figure.326 Appendix 2 / Import File Formats",420
609,"343. Note: Set the encoding value of the spreadsheet to the same value as the CSV file. JSON Format of the Variable Import File The JSON file contains a set of name-value pairs for each variable. The following table lists the fields that can be included for each variable.Table A3.2 Fields in the JSON Variable Input File FieldDescriptionnameThe name of a rule set variable or a decision variable.dataTypeThe data type of the variable. You can specify decimal , integer , date , datetime , or datagrid . For Boolean variables, specify integer . For character variables, specify string .directionWhether the rule set or decision variable is an input-only variable (input ), an output-only variable (output ), both (inOut ). Do not specify a direction for data grid columns. If you do not specify a direction for a rule set or decision variable, the direction is imported as inOut . To designate a variable as a temporary variable, edit the variable properties on the Variables tab.descriptionA description of the variable. Descriptions are limited to 256 characters.lengthThe length of the variable. Specify lengths for character variables only (strings or data grids).dataGridExt ensionThe columns in the data grid, if the variable specified in the name field is a data grid. Specify the name and data type for each column in the data grid. If the column is a character column, also specify the length.defaultValueAn initial (default) value for the variable. JSON Format of the Variable Import File 327",301
610,"344. The following example specifies nine variables. The variable card_offers_out is a data grid. The variables annual_fee, APR, and card_type are columns in the data grid. The variable i is a temporary variable that has an initial value of zero.[ {  ""direction"": ""inOut"",  ""name"": ""ACCOUNT"",  ""dataType"": ""string"",  ""length"": 13 }, {  ""direction"": ""inOut"",  ""name"": ""ACCTSCORE"",  ""dataType"": ""decimal"" }, {  ""direction"": ""output"",  ""name"": ""card_offers_out"",  ""dataType"": ""dataGrid"",  ""dataGridExtension"": [   {    ""name"": ""annual_fee"",    ""dataType"": ""decimal""   },   {    ""name"": ""APR"",    ""dataType"": ""decimal""   },   {    ""name"": ""card_type"",    ""dataType"": ""string"",    ""length"": 32767   }  ] }, {  ""direction"": ""inOut"",  ""name"": ""DEBTINC"",  ""dataType"": ""decimal"" }, {  ""direction"": ""inOut"",  ""name"": ""i"",  ""dataType"": ""decimal"",  ""description"": ""temporary"",  ""defaultValue"": 0 }, {  ""direction"": ""output"",  ""name"": ""zero_offers"",  ""dataType"": ""boolean"" }] 328 Appendix 2 / Import File Formats",305
611,"35. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click next to nested decision names to display the list of objects within the nested decision that use the selected variable. Click and to open and close the list objects within the nested decision. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Defining New Rules in a Rule Set Add a Stand-Alone Assignment Statement Stand-alone assignment statements always execute unless a RETURN action stops the execution of the rule set before execution reaches the assignment statement. Rule-fired data is not generated for standalone assignment statements. 1On the Rule Set tab, click Add Assignment if the rule set is empty or, if the rule set contains at least one statement, select Add ð Add assignment . The application adds an assignment statement to the top of the rule set, below any existing assignment statements. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Import or create any variables that are required for the assignment statement that have not already been added to the rule set. You can add or create the variables on the Variables tab, or you can define variables dynamically as you author the statement. See “Managing the Variables in a Rule Set” on page 16 for more information. 3Select the variable to which you want to assign a value. 4Enter the expression for the variable in the expression field. See “About Defining Expressions” on page 33 for additional information. 5(Optional) Move the assignment statement to a different position in the rule set. To move the statement, click or . 6Click to save the rule set. SAS Intelligent Decisioning validates the syntax of the expressions. If it does not detect any problems, it saves the rule set. 24Chapter 2 / Working with Rule Sets",484
612,"36. Add an IF-THEN or IF-THEN-ELSE Rule to an Assignment or Common Rule Set 1Create or open the rule set. If no variables are defined in the rule set, SAS Intelligent Decisioning displays the Variables tab. Otherwise, it displays the Rule Set tab. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Import or create any variables that are required for the new rule that have not already been added to the rule set. You can add or create the variables on the Variables tab, or you can define variables dynamically as you author the rule. See “Managing the Variables in a Rule Set” on page 16 for more information. 3Click the Rule Set tab. 4Click Add Rule if the rule set is empty. If the rule set contains at least one statement, click Add Rule or select Add ð Add rule . SAS Intelligent Decisioning adds a new IF-THEN rule to the rule set. 5(Optional) Define the condition expression for the rule. See “About Defining Expressions” on page 33 for additional information. To add additional condition expressions to the selected rule, select Add ð Condition . 6Define the action expressions for the rule. See “About Defining Expressions” on page 33 for additional information. To add additional action expressions to the selected rule, select Add ð Action . TIP To move condition or action expressions up or down within an IF, THEN, or ELSE clause, select the expression and click or . 7(Optional) Change the rule operator to ELSE or OR. If the rule is the first rule in a rule set, the rule operator must be IF. When you change the operator on a rule from IF to ELSE, the condition expression is preserved, and the rule becomes an ELSE clause with a condition. If you change IF or ELSE to OR, the condition expression is preserved, but the action expression is deleted. For more information, see “Controlling Which Conditions Are Evaluated” on page 31. 8(Optional) Change the operator on the THEN clause from ASSIGN to RETURN . The RETURN action stops the execution of any additional statements in the rule set.",475
613,"37. 9(Optional) Select Add ð ELSE rule to add an ELSE clause to the currently selected rule. The ELSE clause does not have a condition, but you can add one by selecting Add ð Condition . 10(Optional) Define the condition and action expressions for the ELSE clause. 11(Optional) Change the order of the rules. Rules are evaluated sequentially. To move a rule up or down within a rule set, select the rule and click or . 12(Optional) Change the name of the rule. Rule names are limited to 100 characters and must be unique within a rule set. For instructions, see “Rename a Rule” on page 42. TIP Assigning logical names to the rules makes it easier to determine which rules fired when you review rule-fired data. 13(Optional) Clear the Record rule-fired data check box if you do not want a rule- fired record to be written each time this rule fires. See “How Rules Are Evaluated and When Rule-Fired Records Are Generated” on page 32 for more information. 14Click to save the rule set. SAS Intelligent Decisioning validates the syntax of the expressions. If it does not detect any problems, it saves the rule set. Adding a Common Rule Set Reference to an Assignment Rule Set About Rule Set Variables and Mapping Common rule sets and assignment rule sets each define their own variables. When you add a common rule set to an assignment rule set, you must map the variables that are defined in the common rule set to variables that are used in the assignment rule set. By default, if the assignment rule set defines variables of the same name and data type as the variables in the common rule set, then SAS Intelligent Decisioning automatically maps the common rule set variables to the assignment rule set variables. If variables of the same name and data type do not exist in the assignment rule set, you must do one of the following: ncreate variables in the assignment rule set that have the same name and data type as the variables in the common rule set. You can use the Add missing variables option to create these assignment rule set variables and automatically map the variables. This option is available in both the Add Common Rule Set References wizard and in the Edit Common Rule Set Reference window . nmanually map the common rule set variables to assignment rule set variables that have different names.",475
614,"38. Add a Common Rule Set Reference to an Assignment Rule Set 1Open the assignment rule set. If no variables are defined in the rule set, SAS Intelligent Decisioning displays the Variables tab. Otherwise, it displays the Rule Set tab. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Click the Rule Set tab. 3Do one of the following: nIf the rule set contains at least one rule, click Add Rule and select Add reference . nIf the rule set is empty, click Add Rule . In the Create New Rule window, select Common rule set reference , and click OK. SAS Intelligent Decisioning opens the Add Common Rule Set References wizard. 4On the Select Common Rule Sets page, select the check boxes for each common rule set that you want to add to the assignment rule set, and click Next . 5On the Select Common Rule Set Versions page, select the version of each of the common rule sets that you want to use in the assignment rule set, then click Next . TIP To specify the latest version of the common rule set, you can select the version number of the latest version, or you can select Use latest . If you select Use latest , SAS Intelligent Decisioning always uses the most recently created version regardless of the version number. 6(Optional) Add any global variables that are used by the common rule set to the assignment rule set. For instructions, see “Add Global Variables to a Rule Set” on page 19. 7(Optional) On the Map Inputs page, for each common rule set variable in the Input Variable column, select the assignment rule set variable that you want to map it to in the Maps To column. If the assignment rule set contains variables with the same name and data type as the variables in the common rule set, SAS Intelligent Decisioning automatically maps the common rule set variables to the assignment rule set variables.Defining New Rules in a Rule Set 27",426
615,"39. TIP To create assignment rule set variables that have the same name and data type as the variables in the common rule set, click Add Missing Variables . If you want to create new variables with different names in the assignment rule set, you can ignore the error markers, and continue with the next step. After you click Finish in Step 12 , you can create new variables in the assignment rule set, then edit the properties of the common rule set reference to change the variable mappings. For more information, see “Edit the Properties of a Common Rule Set Reference” on page 29. For additional information, see “About Rule Set Variables and Mapping” on page 26. 8Click Next . 9(Optional) On the Map Outputs page, for each common rule set variable in the Output Variable column, select the assignment rule set variable that you want to map it to in the Maps To column. If the assignment rule set contains variables with the same name and data type as the variables in the common rule set, then SAS Intelligent Decisioning automatically maps the common rule set variables to the assignment rule set variables. TIP To create assignment rule set variables that have the same name and data type as the variables in the common rule set, click Add Missing Variables . If you want to create new variables with different names in the assignment rule set, you can ignore the error markers, and continue with the next step. After you click Finish in Step 12 , you can create new variables in the assignment rule set, then edit the properties of the common rule set reference to change the variable mappings. For more information, see “Edit the Properties of a Common Rule Set Reference” on page 29. For more information, see “About Rule Set Variables and Mapping” on page 26. 10Click Next . 11(Optional) On the Order Rules , page, change the order in which the common rule sets are included in the assignment rule set. To move a common rule set up or down within the assignment rule set, select the common rule set and click or . 12Click Finish . SAS Intelligent Decisioning adds the common rule set reference to your assignment rule set. You can click to display the content of the common rule set inline in the assignment rule set, but the content is read-only. You can use the rule-specific actions menu to edit the reference or to open the common rule set.28Chapter 2 / Working with Rule Sets",493
616,4. Manage Comments for a Rule Set Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 Executing Published Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 Importing and Exporting Rule Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 Chapter 3 /Working with Treatments and Treatment Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 About Treatments and Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 Example: A Decision That Includes a Treatment Group . . . . . . . . . . . . . . . . . . . . . . .,277
617,"85 About Attributes, Eligibility Rules, and Effective Dates . . . . . . . . . . . . . . . . . . . . . . . . 88 Arbitrating Treatments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 About Channels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 Define a Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 Define a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",266
618,"40. Edit the Properties of a Common Rule Set Reference 1Open the assignment rule set, click for the reference that you want to edit, and select Edit reference . The Edit Common Rule Set Reference window appears. 2(Optional) On the Common rule set tab, select a different common rule set or change the version of the common rule set. 3(Optional) On the Map Inputs tab, change the variable mappings for the input variables in the common rule set. For more information, see Step 7 of “Add a Common Rule Set Reference to an Assignment Rule Set” . 4(Optional) On the Map Outputs tab, change the variable mappings for the output variables in the common rule set. For more information, see Step 9 of “Add a Common Rule Set Reference to an Assignment Rule Set” . 5Click OK to close the Edit Common Rule Set References window and return to the assignment rule set. 6Click to save your changes to the assignment rule set. Add a New Rule in a Filtering Rule Set Note: When SAS Intelligent Decisioning generates code for a filtering rule set, it joins the rules together with the OR operand. 1Create or open the filtering rule set. If no variables are defined in the rule set, SAS Intelligent Decisioning displays the Variables tab. Otherwise, it displays the Rule Set tab. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 2Import or create any variables that are required for the new rule that have not already been added to the rule set. You can add or create the variables on the Variables tab, or you can define variables dynamically as you author the rule. See “Managing the Variables in a Rule Set” on page 16 for more information. 3Click the Rule Set tab. 4Click Add Rule if the rule set is empty or, if the rule set contains at least one statement, select Add ð Add rule or Add Rule . SAS Intelligent Decisioning adds a new IF rule to the end of the rule set. Defining New Rules in a Rule Set 29",450
619,"41. 5Define the condition expression for the rule. See “About Defining Expressions” on page 33 for additional information. To add additional condition expressions to the selected rule, select Add ð Condition . TIP To move condition expressions up or down within an IF clause, select the expression and click or . 6(Optional) Change the order of the rules. Rules are evaluated sequentially. To move a rule up or down within a rule set, select the rule and click or . 7(Optional) Change the name of the rule. Rule names are limited to 100 characters and must be unique within a rule set. For instructions, see “Rename a Rule” on page 42. TIP Assigning logical names to the rules makes it easier to determine which rules fired when you review rule-fired data. 8(Optional) Clear the Record rule-fired data check box if you do not want a rule- fired record to be written each time this rule fires. See “How Rules Are Evaluated and When Rule-Fired Records Are Generated” on page 32 for more information. 9Click to save the rule set. SAS Intelligent Decisioning validates the syntax of the expressions. If it does not detect any problems, it saves the rule set. Copy Rules From Another Rule Set The menu option Copy from rule set appears in the Add menu for a rule set. The rule set must contain at least one rule in order for this menu option to appear. Adding a rule from another rule set does not replace any of the rules in the rule set that you are editing. 1Open the rule set into which you want to add the rule, and click the Rule Set tab. 2If the rule set does not already contain a rule, click Add rule . 3Select the existing rule after which you want to add IF rules or to which you want to add an ELSE rule. If you do not select a rule, then SAS Intelligent Decisioning adds copied rules to the end of the rule set. 4Click Add and select Copy from rule set . The Copy Rules window appears. This window displays the latest version of every rule in every rule set that you have permission to view. 5Select the rules that you want to copy, and click Copy . SAS Intelligent Decisioning adds the selected rules to the rule set together with any new variables that these rules need.30Chapter 2 / Working with Rule Sets",490
620,"42. Note: If the copied rule contains functions or complex expressions, the variables might not be added to the rule set. Add any variables used in the expression to the rule set, and validate the rule set. Controlling Which Conditions Are Evaluated By default, rules are assigned the IF rule operator, which means that the rule’s conditions are evaluated regardless of the results of previous rules. In assignment rule sets, you can control whether condition expressions are evaluated by using the RETURN action, the ELSE operator, or the OR operator. The RETURN action stops the execution of any remaining rules in a rule set. If you are executing a single rule set, execution ends. If you are executing a decision, control moves to the next object in the decision. For example, the rule in the following figure stops the execution of any remaining rules in the rule set if the value of the Order_Quantity variable is missing. If you set a clause’s operator to ELSE, then the clause’s conditions are evaluated only if the previous clause’s conditions evaluated to false. For example, given the rule set shown in the following figure, if Order_Quanitity is 9, the condition for the IF clause evaluates to false, and the condition for the first ELSE clause evaluates to true. Therefore, the action for first ELSE clause is executed, and the condition for the last ELSE clause is not evaluated. The value of Offer_Percent is set to 5. Use the OR operator to execute the same action expression for each of the several conditions. If you assign the OR operator to a rule, then you cannot enter an action expression for the rule. If any of the OR conditions evaluate to true, SAS Intelligent Defining New Rules in a Rule Set 31",351
621,"43. Decisioning executes the action of the last rule that was assigned the IF or ELSE operator. If several consecutive rules that are all assigned the OR operator, the action is executed as soon as a set of conditions evaluates to true. The conditions for the remaining consecutive OR rules are not evaluated. For example, given the rules in the following figure, REJECT is assigned the value of 0 (False) if any of the following conditions are true: n(VALUE >= 120000 AND CLNO < 15) n(DEROG <= 1 AND DELINQ = 0) nYOJ > 15 How Rules Are Evaluated and When Rule-Fired Records Are Generated By default, the condition expressions for all rules in a rule set are evaluated sequentially regardless of the results of previous rules. However, in assignment rule sets, you can use the ELSE operator, the OR operator, or the RETURN action to control whether condition expressions are evaluated. See “Controlling Which Conditions Are Evaluated” on page 31 for more information. If a rule’s condition expressions evaluate to true, the rule is said to have fired. In assignment rule sets, SAS Intelligent Decisioning executes the rule’s action expressions. By default, every time a rule fires, it generates a rule-fired record. You can control when rule-fired records are generated by using the Record rule-fired data check boxes. See Step 13 in “Add an IF-THEN or IF-THEN-ELSE Rule to an Assignment or Common Rule Set” on page 25. Note: Stand-alone assignment statements always execute unless a RETURN action stops the execution of the rule set before execution reaches the assignment statement. Rule-fired data is not generated for standalone assignment statements. For additional information, see “Run a Rule-Fired Analysis” on page 70.32Chapter 2 / Working with Rule Sets",374
622,"44. Defining Expressions in Rules and Assignment Statements About Defining Expressions Expressions can be up to 1024 characters long. They can contain numeric constants, character strings, variables, operators, SAS DS2 functions, data grid functions, and the SAS Intelligent Decisioning LOOKUP and LOOKUPVALUE functions. You can enter expressions directly into the expression fields, or you can use the Expression Editor to create and edit expressions. TIP Use caution when you test for equality by using scientific notation. Two numbers that appear to be the same might evaluate to different numbers because of the precision involved in scientific notation. For more information about entering expressions, see the following topics: n“Using the Expression Editor” on page 33 n“Enter LOOKUP and LOOKUPVALUE Expressions” on page 35 n“Entering Literal Data Values” on page 36 n“Operators for Use in Expressions” on page 37 n“Using the LIKE Operator” on page 38 n“Using Functions in Expressions” on page 40 n“Working with Missing Values” on page 40 n“Data Grid Functions” in SAS Intelligent Decisioning: Using Data Grids Using the Expression Editor You can use the Expression Editor to enter expressions that do not use the LOOKUP or LOOKUPVALUE functions. You must use the Expression Editor to enter expressions that use the concatenation (||) operator or the exponent operator (**). To open the Expression Editor, click for the expression that you want to edit.Defining Expressions in Rules and Assignment Statements 33",312
623,"45. You can enter expressions directly into the expression field, or you can use the lists of operators, function names, and variable names to add them to the expression. nTo add a variable, click the Variables tab, and double-click the variable name. nTo add a function call, click the Functions tab, expand the appropriate function category, select a function name, and click . The Expression Editor adds a basic syntax template for the function to the expression field. The icon beside each function name indicates the return type of the function. Functions that return character data are displayed with the icon, and functions that return numeric data are displayed with the icon. nTo invert an entire condition expression, click Invert Condition . SAS Intelligent Decisioning wraps the entire expression in parentheses and adds the keyword NOT :NOT(condition) TIP The Invert Condition button is a toggle. If the entire condition is already enclosed in NOT() , clicking this button removes the keyword NOT and the parentheses surrounding the expression. This button does not affect NOT conditions that are embedded within the expression. (This button is available only if you are editing a condition expression in a rule set. It is not available for action expressions or for variable initial values.) nClick Validate at any time to check the syntax of the expression that you are building. Note: If you invert the condition and click Validate , the validation process might return incorrect results. nTo clear the expression field, click Clear . nTo save the expression, click Save . IMPORTANT After you save a rule set expression in the Expression Editor, the expression field on the Rule Set tab becomes a read-only field. You can edit it only by launching the Expression Editor again.34Chapter 2 / Working with Rule Sets",348
624,"46. TIP By default, the autocomplete feature is turned on for SAS functions and custom functions. You can turn off this feature or change what is displayed in the autocomplete list by using the SAS Intelligent Decisioning settings. You can specify that SAS Intelligent Decisioning also displays variable names. For information, see “SAS Intelligent Decisioning Settings” on page 8. In the autocmplete list, SAS Intelligent Decisioning displays all function names and variable names that match the text that you enter. Double-click an item to add it to the code field. Single-click an item to display information about the item, such as whether it is a function or a variable. For functions, the information includes the returned data type and category. For variables, the information includes the data type and direction (input, output, or both). The autocomplete list does not include functions that are defined in a custom context file. TIP For rule set expressions, when SAS Intelligent Decisioning generates code for the rule set, it adds a semicolon (;) to the end of each line that you enter in the expression editor, except for lines that end with an opening parenthesis, a closing parenthesis, a comma (,), or a semicolon (;). Enter LOOKUP and LOOKUPVALUE Expressions Note: You can enter the LOOKUP function only in condition expressions, and you can enter the LOOKUPVALUE function only in action expressions. The LOOKUP function determines whether a lookup key exists in the lookup table, and the LOOKUPVALUE function retrieves the value associated with a key. It is best practice to use the LOOKUP function to verify that a key exists before you try to retrieve the value associated with the key. To enter a condition expression that uses the LOOKUP function, select LOOKUP as the rule operator, and select the lookup table in the expression field. To enter an action expression that uses the LOOKUPVALUE function, complete these steps: 1Select LOOKUPVALUE as the operator on the THEN clause. 2In the second field of the THEN clause, select the variable to which you want to assign the value that is retrieved from the lookup table. 3Click , and select the lookup table from which you want to retrieve the lookup value. 4In the last field, select the variable whose value matches the value of the lookup key, or select the actual value of the lookup key. To select the value of the lookup key: aSelect Select a lookup key .",496
625,"47. bSelect the record whose key you want to use in the expression, and click Save . For example, suppose you have a lookup table in which the lookup keys are ZIP codes and the lookup values are city names. You could use the following rule to test whether the lookup table contains an entry for the ZIP code, and, if the entry exists, retrieve the city name that is associated with the ZIP code. Entering Literal Data Values Depending on whether you use the Expression Editor or enter expressions directly into the expression fields, you must enter some values differently.Data TypeHow To Enter ValuesExampleCharacterEnclose character strings in quotation marks. If the character string contains embedded quotation marks, use different quotation marks for the embedded and enclosing quotation marks.'Gold Account'""d'oscail""'d""oscail' Data gridEnclose data grid JSON strings in single quotation marks. Note: The only time you might need to enter JSON strings manually is when you are using the DATAGRID_CREATE function.See SAS Intelligent Decisioning: Using Data Grids for an explanation of the JSON syntax and a description of the DATAGRID_CREATE function.DateIn the rule set editor, enter Date values by using the format DDMMMYYYY. Enclose each value in single quotation marks followed by d .'01AUG2017'd In the Expression Editor, use the DS2 function TO_DOUBLE and specify the DATE data type in order to cast the Date value so that it can be compared correctly to other variables. See SAS DS2 Programmer’s Guide for information about date, time, and timestamp values, and see SAS DS2 Language Reference for information about the TO_DOUBLE function.to_double(date '2017-11-04') 36Chapter 2 / Working with Rule Sets",352
626,"48. Data TypeHow To Enter ValuesExampleDatetimeIn the rule set editor, enter Datetime values by using the format DDMMMYYYY:HH:MM:SS. Use 24-hour clock notation. Enclose each value in single quotation marks followed by dt .'31AUG2017:15:00:00'dt In the Expression Editor, use the DS2 function TO_DOUBLE and specify the TIMESTAMP data type in order to cast the Datetime value so that it can be compared correctly to other variables. See SAS DS2 Programmer’s Guide for information about date, time, and timestamp values, and see SAS DS2 Language Reference for information about the TO_DOUBLE function.to_double(timestamp '2017-11-04 10:54:34.012') BooleanIn the rule set editor, Boolean values are not enclosed in quotation marks. Enter only the values.TrueFalse In the Expression Editor, use numeric values to indicate True or False. Specify 1 for True and 0 for False.10 Operators for Use in Expressions The following table lists the operators that you can use in an expression. Do not enter a space between the elements of the operators <=, >=, or ^=. Some mnemonic equivalents for these operators cannot be used in SAS Intelligent Decisioning expressions. See SAS DS2 Programmer’s Guide for more information about specifying operators in expressions.Table 2.1 Operators for Use in Expressions OperatorDefinitionExample*Multiply0.085 * sales /Divideamount / 5 +Addnum + 3 –Subtractsale - discount Defining Expressions in Rules and Assignment Statements 37",322
627,"49. OperatorDefinitionExample**Raises the first operand to the power of the second operandnum1**num2 =Equal totries = maxTriesAllowed ||Concatenates the first string and the second stringstring1 || string2 !=Not equal toinsufficientFunds != 1 ^= ≠ (Expression Editor interface)Not equal tobalance ^= 'low' >Greater thandaysLate > 5 >=Greater than or equal tobalance >= 1000 <=Less than or equal tobalance <= 250 <>The maximum of the left and right operandsnum1 <> num2 IN (value-list ) Equal to an item in value-listrisk in ('high','medium','low') NOT IN ( value-list ) Not equal to an item in value- listofferPercent not in (10,20,30) LIKE ' pattern ' If the variable’s value matches the expression pattern in pattern , the result is true.like 'HS%PP' expression AND expressionIf both expressions are true, the result is true.dateExpired >= '01AUG2015'd AND dateExpired <= '31AUG2015'd expression OR expression If either expression is true, the result is true.dateEnrolled >= '01JAN2015' OR member = 1 Using the LIKE Operator The LIKE operator determines whether the value of a variable matches a pattern- matching expression. An expression that uses the LIKE operator has the following syntax:38Chapter 2 / Working with Rule Sets",295
628,5. Managing Eligibility Rules for a Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Copy a Treatment or Treatment Group URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98 Compare Treatment or Treatment Group Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 Compare Treatment Group Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 Generate PDF Documentation for a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . 101 Managing Treatments and Treatment Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 Managing Versions of Treatments and Treatment Groups . . . . . . . . . . . . . . . . . . . . 104 Determine Which Objects Use a Treatment or Treatment Group . . . . . .,285
629,. . . . . . . . 106 Checking Out and Committing Treatment or Treatment Group Versions . . . . . . . . 107 Managing Version Tags for Treatment and Treatment Groups . . . . . . . . . . . . . . . . . 111 Chapter 4 /Working with Lookup Tables and Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 About Lookup Tables and Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114 About Labels for Lookup Keys and Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115 Predefined Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 Create a New Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,282
630,. . . . . . . . . . . . . . 116 Importing and Exporting Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117 Add Lookup Table Entries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 Edit Lookup Table Entries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120 Delete Lookup Table Entries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Edit Lookup Key or Value Labels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,267
631,121 Copy a Lookup Table URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Compare Lookup Table Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121 Generate PDF Documentation for a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Managing Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 Managing Versions of Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125 Determine Which Objects Use a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . .,271
632,. 128 Checking Out and Committing Lookup Table Versions . . . . . . . . . . . . . . . . . . . . . . . 128 Managing Version Tags for Lookup Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133 Activating a Lookup Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134 Dictionary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137 Chapter 5 /Managing Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141 Using Global Variables . . . . . . . . . . . . . .,271
633,"50. LIKE ' pattern-matching-expression ' If a variable’s value matches the pattern that is specified by pattern-matching- expression , the expression evaluates to true (1). Otherwise, the expression evaluates to false (0). There are three classes of pattern-matching characters.Table 2.2 Pattern-Matching Characters CharacterDescriptionunderscore (_)Matches any single characterpercent sign (%)Matches any sequence of zero or more characters Note: Be aware of the effect of trailing blanks. To match values, you might have to use the TRIM function to remove trailing blanks. any other characterMatches that character The LIKE expression is case sensitive. To search for mixed-case strings, use the UPCASE function to create an uppercase version of the variable that you want to search. You can use a temporary variable to store the results of the UPCASE function. Use the LIKE operator to search the uppercase version of the variable. For example, you can search the variable Part_Number for mixed-case strings that begin with HS and end with PP by using the two rules shown in the following figure. The following table shows examples of the matches that result if you search a variable that could have these values: Smith, Smooth, Smothers, Smart, Smuggle.Table 2.3 Examples of LIKE Expressions LIKE Expression ExampleMatching Resultslike 'Sm%'Smith, Smooth, Smothers, Smart, Smugglelike '%th'Smith, Smoothlike 'S__gg%'Smugglelike 'S_o' (no matches)like 'S_o%'Smooth, Smothers Defining Expressions in Rules and Assignment Statements 39",318
634,"51. LIKE Expression ExampleMatching Resultslike 'S%th'Smith, Smooth Using Functions in Expressions SAS Intelligent Decisioning supports the following functions in expressions: nLOOKUP and LOOKUPVALUE functions. Condition expressions can contain the LOOKUP function, and action expressions can contain the LOOKUPVALUE function. However, if the expression contains the LOOKUP or LOOKUPVALUE function, then the expression cannot contain anything else. For more information, see “Enter LOOKUP and LOOKUPVALUE Expressions” on page 35, “LOOKUP Function” on page 137, and “LOOKUPVALUE Function” on page 138. nSAS DS2 functions. For additional information about these functions and additional DS2 functions, see SAS DS2 Language Reference . nSAS Data Quality Server functions. For information about these functions, see “Functions and CALL Routines” in SAS Data Quality and SAS Data Quality Server: Language Reference . These functions appear in the expression editor only if SAS Data Quality Server is installed. Note: You cannot publish rule sets that use SAS Data Quality functions to container destinations. Also, rule sets that use these functions fail when they are run inside the database. nData grid functions. For more information about these functions, see “Data Grid Functions” in SAS Intelligent Decisioning: Using Data Grids . nCustom DS2 functions that you define in SAS Intelligent Decisioning or by using the sid-functions CLI. For more information, see Chapter 7, “Using Custom Functions,” on page 197 and “sid-functions Plug-In” in SAS Intelligent Decisioning: Command-Line Interfaces . To enter a function in an expression, use the Expression Editor. See “Using the Expression Editor” on page 33 for more information. Working with Missing Values You can use the MISSING function to check for missing numeric and character values. This function returns 0 (false) or 1 (true). Missing values have a value of false when you use them with logical operators such as AND or OR. You can use the MISSING function to eliminate errors, notes, and warnings in the SAS log that are caused by missing values. In expressions, you can use the period (.) to denote missing numeric values, and two single quotation marks with no space (the empty string '' ) to denote missing character values.40Chapter 2 / Working with Rule Sets",474
635,"52. For more information, see “How DS2 Processes Nulls and SAS Missing Values” in SAS DS2 Programmer’s Guide . TIP To specify an empty data grid that does not contain data or column metadata, use empty brackets ([]). An empty data grid is not considered missing. You cannot use the MISSING function to determine whether a data grid is missing or empty. Delete Expressions or ELSE Rules To delete a condition or action expression, click for that expression. To delete an entire ELSE rule, select the rule, right-click on the rule, and select Delete the selected object . Managing Rules Duplicate a Rule 1Click for the rule, and select Duplicate rule . The Duplicate Rule window appears. 2Enter a name for the duplicate rule if you do not want to use the default name. 3If you are duplicating a rule that contains an ELSE or OR clause, specify whether you want to duplicate only the IF clause or duplicate the entire rule, and click Duplicate . Delete a Rule 1Click for the rule, and select Delete rule . 2(Optional) If the rule contains an ELSE or OR clause, SAS Intelligent Decisioning prompts whether you want to delete only the IF clause or to delete the entire rule. Click Delete All to delete everything, or click Delete IF to delete only the IF clause. If you select Delete IF , then the ELSE or OR clause becomes an assignment statement if it does not have any condition expressions. If it has a condition expression, it becomes the new IF rule.Managing Rules 41",309
636,"53. TIP To delete only the ELSE or OR clause, click for that clause. Rename a Rule To rename the IF clause of a rule, select the existing rule name, and enter a new name. To rename the ELSE or OR clause of a rule: 1Right-click on the ELSE or OR operator and select Rename rule . 2Enter the new name and click Rename . TIP Rule names for ELSE and OR clauses do not appear in the rule set editor. Edit a Rule Description 1Click for an IF rule, or right-click an ELSE or OR rule to display the menu. 2Select Edit description from the menu. The Edit Description window appears. 3Enter the new description, and click Edit.42Chapter 2 / Working with Rule Sets",156
637,"54. Reorder Rules To move a rule up or down within an IF clause, an ELSE clause, or an OR clause select the rule, and click or . Copy a Rule Set URL To create a link for external documentation that automatically opens a rule set in SAS Intelligent Decisioning : 1Open the rule set. 2Click , and select Copy rule set URL . The Copy URL window appears, and the URL is automatically selected. 3Click Copy , and then click Close . Paste the link into your documentation. Compare Rule Set Content You can compare the contents of two different rule sets, or you can compare the contents of two different versions of the same rule set. 1Select the objects that you want to compare. nTo compare the contents of two different rule sets, select the rule sets in the category view, click , and select Compare object contents . nTo compare the contents of two versions of the same rule set, open the rule set, click on the Versions tab, and select Compare object contents . The Select Versions window appears. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Object Contents window. By default, the Rule Sets tab displays a simplified version of the rules that are different in each object. To display a simplified version of all of the rules in each object, click Show All . TIP Click beside a rule set name to display its location.Compare Rule Set Content 43",302
638,"55. 3(Optional) Click the Variables tab to display the properties of the variables in the two objects. This tab displays the name, type, initial value (if a value is defined), and length of each variable in both objects. The tab also indicates whether the variable is an input variable or an output variable. If the variable list for both objects is the same, this tab displays a message stating that the two objects are identical. If either of the objects that you are comparing contain a data grid variable, you can click beside the variable name to display the data type and length of each data grid column.44Chapter 2 / Working with Rule Sets",132
639,"56. 4(Optional) Click Export to export the results of the comparison to a PDF file. The Export Comparison Results window appears. 5(Optional) Select the information that you want to export, and click Export . To export the information on a specific tab, select the tab name. To export the data type and length of each column in data grid variables, select Data grid metadata . If you want the PDF file to display only the differences between the two objects, select Show differences . To display all of the objects’ information, select Show all . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Compare Rule Set Code You can compare the generated code of two different rule sets, or you can compare the generated code of two different versions of the same rule set. 1Select the objects that you want to compare. nTo compare the generated code of two different rule sets, select the rule sets in the category view, click , and select Compare code . nTo compare the generated code of two versions of the same rule set, open the rule set, click on the Versions tab, and select Compare code . The Select Versions window appears.Compare Rule Set Code 45",283
640,"57. 2Select the versions that you want to compare, and click Compare . SAS Intelligent Decisioning opens the two objects side-by-side in the Compare Code window and highlights the differences. 3(Optional) Click Export to export the results of the comparison to a PDF file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Generate PDF Documentation for a Rule Set You can generate detailed documentation for a rule set as a PDF document. The PDF includes the rule set properties, details about each of the rules, and a table of the variables that are used in the rule set. You can download additional documents for lookup tables that are used in the rule set. 1Open the rule set. 2Click , and select Create document . The Create Document window appears. TIP If this option is disabled, there might be unsaved changes. Click . 3(Optional) Enter a name for the document if you do not want to use the default name. 4(Optional) Select Choose additional documents to download to display a window from which you can download additional documents. You can download documents for any lookup tables that are used in the rule set. 5Click Create . SAS Intelligent Decisioning creates the PDF. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. If you download additional documents in Step 4 , the Download Additional Documents window appears. 6(Optional) Click Download for each additional document that you want to download. 7(Optional) Click Close to close the Download Additional Documents window.46Chapter 2 / Working with Rule Sets",405
641,"58. Managing Rule Sets Duplicating Rule Sets About Duplicating Rule Sets in Folders for Which the Check-Out and Commit Feature Is Enabled When you duplicate a rule set, SAS Intelligent Decisioning first creates an empty rule set, and then updates the rule set to add the individual rules. The default permissions for the Decision Repository enable users to create new objects, but the permissions do not include the ability to update the objects. In order to duplicate an object that is in the Decision Repository, you must check out the object. If your site has created additional folders for which the check-out and commit feature is enabled, and if those folders have been assigned the same permissions as those assigned to the Decision Repository, you must also check out objects in those folders before you can duplicate them. Duplicate Rule Sets Note: You cannot duplicate a rule set if it is open. To duplicate a single rule set: 1In the Rule Sets view, select the rule set that you want to duplicate. 2Click and select Duplicate . The Duplicate Rule Set window appears. 3Enter a new name for the duplicate rule set. 4(Optional) Enter a description for the rule set. 5Select the version of the rule set that you want to duplicate. 6Click and select the location where you want to save the duplicate rule set. 7Click Duplicate . To duplicate multiple rule sets: 1In the Rule Sets view, select the rule sets that you want to duplicate.Managing Rule Sets 47",302
642,"59. 2Click and select Duplicate . SAS Intelligent Decisioning duplicates the rule sets and appends _Copy to the names of the duplicate copies. If needed, a number is also appended to the names of the duplicate copies. Note: When you duplicate a rule set, SAS Intelligent Decisioning creates a relationship between the original rule set and the duplicate rule set. If either object is changed, and you later copy the contents of one object into the other, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the rule set before you paste the new content. Delete Rule Sets Note: You cannot delete a rule set if it is open. In the Rule Sets view, select the rule sets that you want to delete, click , and select Delete . SAS Intelligent Decisioning moves the rule sets to the recycle bin. For more information, see “Manage Folders and Folder Content” on page 9. Rename Rule Sets Note: You cannot rename a rule set if it is open. 1In the Rule Sets view, select the rule set that you want to rename. 2Click and select Rename . The Rename window appears. 3Enter a new name for the rule set, and click Rename . Move Rule Sets to a Different Folder 1In the Rule Sets view, select the rule sets that you want to move. 2Click and select Move . The Choose a Location window appears. 3Select the location to which you want to move the rule sets, and click OK.48Chapter 2 / Working with Rule Sets",318
643,6. Managing Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143 Managing Versions of Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 Determine Which Objects Use a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146 Managing Version Tags for Global Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146 Manage the Global Variable Recycle Bin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147 Activating a Global Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148 Chapter 6 /Using Custom Code Files .,277
644,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151 Introduction to Custom Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 DS2 Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153 Python Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157 Data Query Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,262
645,". . . . . . . . . . . . . . . . 159 Custom Context Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163 Create a New Code File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167 Managing the Variables in a DS2 or Python Code File . . . . . . . . . . . . . . . . . . . . . . . 168 Validate SQL, DS2, or Context Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175 Copy a Code File URL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .",270
646,"60. Managing Versions of Rule Sets Set the Displayed Version The displayed version is the version whose information is displayed on the other tabs, such as the Properties , Rule set , and Variables tabs. On the Versions tab, a in the Displayed Version column indicates the displayed version. To change the displayed version, click the version number for the version that you want to view. The displayed version is shown in the title bar. Create a New Version Note: For objects that are stored in locations for which the check-out and commit feature is enabled, you cannot manually create a new version. The only way to create a new version is to check out an existing version and commit a new version. For information, see “Check Out and Commit a Rule Set Version” on page 56. Note: The current version of an object is the version with the highest version number. When you create a new version, SAS Intelligent Decisioning locks the current version before it creates the new version. IMPORTANT You cannot unlock a locked version. You cannot save changes to a version that is locked. If you modify a version that is locked and click , SAS Intelligent Decisioning asks you if you want to replace the current unlocked version with your edited version. To manually create a new version: 1On the Versions tab, click the version number for the existing version that you want to use as the basis for the new version. 2Click New Version . The New Version window appears. 3Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented. If you select Minor , the number to the right of the period is incremented. 4(Optional) For each version tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag.Managing Versions of Rule Sets 49",392
647,"61. Note: A tag is limited to 100 characters. TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. 5(Optional) Enter information about the new version in the Notes field. TIP You can edit these notes at any time on the Versions tab. 6Click Save . Create a New Version Automatically When You Publish a Rule Set You can automatically create a new version of a rule set when you publish the current version by selecting Publish and Lock .For information, see “Publish Rule Sets” on page 60. Copy the Content of a Version You can copy the content of an object’s version in the category view or on the Version tab for the object. 1In the category view, complete these steps: aSelect the rule set whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. cSelect the version whose contents you want to copy. Alternatively, on the Versions tab of the rule set whose contents you want to copy: aSelect the version whose contents you want to copy. bClick , and select Copy version . The Copy Version window appears. 2Click , and select the target rule set into which you want to paste the contents of the version. You can paste version contents only into an object of the same type. If the rule set from which you are copying the version is a filtering rule set, then you must paste the contents into another filtering rule set. If it is an assignment rule set, then you must paste the version contents into another assignment rule set.50Chapter 2 / Working with Rule Sets",343
648,"62. When you paste the contents, SAS Intelligent Decisioning creates a new version of the target rule set. The target object contains only the pasted content. 3Select whether you want to create a new major or minor version. 4(Optional) Modify the notes that will be associated with new version. 5(Optional) Add tags that will be associated with the new version. Tags that are associated with a source object version are not automatically added to the new version. See “Add a Version Tag” on page 58 6Click Paste Version , and then click Yes. TIP The input and output designations for a variable on the Variables tab for the new version are removed, and the variable is treated as a temporary variable in the following situations: nThe new version of the target object does not use a variable that is used in an earlier version. nThe source and target object originally had a variable of the same name, and you deleted the variable from the source object before you copied it into the target object. Note: When you copy the contents of a source object into a target object, SAS Intelligent Decisioning creates a relationship between the two objects. If the source object is modified after you copy its contents, and you later copy the contents of the target object back into the source object, SAS Intelligent Decisioning displays a warning message. Verify that you want to replace the current contents of the source object before you paste the new content. Delete a Version IMPORTANT When you delete a specific version, that version is deleted permanently. It is not moved into the recycle bin, and it cannot be restored. Note: In order to be able to delete a specific version of an object, you must have permission to delete the object itself. Also, the configuration option sas.businessrules.deleteVersions must be turned on. On the Versions tab, select the version that you want to delete, click , and select Delete . You cannot delete the current version.Managing Versions of Rule Sets 51",400
649,"63. Upgrade Decisions to Use a New Version of a Rule Set If you create a new version of a rule set that is already used in other decisions, you can upgrade the decisions to use the new version. 1On the Versions tab for the rule set, click , and select Upgrade decisions . The Upgrade Decisions window appears. This window lists all of the decisions that include the rule set. 2In the Version to upgrade to field, select the version of the rule set to which you want to upgrade the decisions. 3Select Automatically map variables if you want SAS Intelligent Decisioning to automatically map new rule set variables in the decisions where the rule set is used. For information about how SAS Intelligent Decisioning maps variables, see “About Decision Variables and Mapping” on page 247. 4Select the check boxes for the decisions that you want to upgrade, and click Upgrade Decisions . TIP To update all of the objects that are used in a decision, see “Update Decisions to Use New Object Versions” on page 253. Determine Which Objects Use a Rule Set To list the objects that use a specific assignment or filtering rule set: 1On the Rule sets category page, select the check box for the rule set, click , and select View used by report . The All Objects that Use the Selected Item window appears. This window lists all objects that use any version of the selected rule set. Note: Common rule sets are not listed in the Used By report. 2(Optional) Select a specific version of the rule set. SAS Intelligent Decisioning narrows the list to include only the objects that use the selected version of the rule set. Note: The View used by report option is also available from within an open rule set.52Chapter 2 / Working with Rule Sets",364
650,"64. In the report, you can use the Filter field to filter the list of objects based on the object names. Click on an object name to open the object. Click next to an object name to display the date on which the object was last modified and the ID of the user who modified the object. For decisions and code files that have been checked out, SAS Intelligent Decisioning also displays the IDs of the users that have checked out the objects. For decisions, SAS Intelligent Decisioning includes the decision’s workflow status. Click Export to export the Used By report to a PDF file. In the PDF file, you can click on an object name to open the object in a new browser tab. Checking Out and Committing Rule Set Versions About Checking Out and Committing Versions Your administrator can enable the check-out and commit feature for rule sets that are in any folder by specifying the folder in the sas.businessrules.checkout.checkoutEnabledFolderPaths configuration option. Enabling this feature for a folder does not automatically modify the permissions for the folder or for the objects in it. You can still modify a rule set in the folder without checking it out, but you are expected to check out the latest version before you edit it. However, your administrator might also set permissions that require you to check out rule sets in these folders before you can edit them. For more information, see “sas.businessrules.checkout” in SAS Intelligent Decisioning: Administrator’s Guide and “Set Permissions for Check-Out Folders” in SAS Intelligent Decisioning: Administrator’s Guide . By default, SAS Intelligent Decisioning defines a folder where you can store rule sets that must be checked out before they can be edited. This folder is the Decision Repository folder, and it is the default value for the sas.businessrules.checkout.checkoutEnabledFolderPaths configuration option. The default permissions for this folder require that non-administrative users check out a version and commit their changes to the checked-out version. Users who do not have administrative permissions cannot edit the rule sets in Decision Repository without first checking them out. If a version can be or must be checked out before it is modified, the Check Out button appears at the top of the Versions tab for that object. You can check out any version of an object. You can check out only one copy of a version at a time.",473
651,"65. When you check out a version, SAS Intelligent Decisioning writes a working copy of the version into your My Folder folder and opens the working copy. SAS Intelligent Decisioning adds “(Checked Out) ” to the name that is displayed at the top of the window. While you have a version checked out, the Rule Sets category view shows two rule sets with the same name, but the folders listed in the Location column differ for each rule set. The original version is in the location specified by the sas.businessrules.checkout.checkoutEnabledFolderPaths configuration option, and the checked-out copy is in your My Folder folder. TIP If an object that you have checked out does not appear in the category view, click to refresh the category view. A Commit button appears at the top of the Versions tab for the checked-out version. When you are finished editing the checked-out version, you must commit your changes in order for other users to be able to see them. When you commit your changes, SAS Intelligent Decisioning creates a new version with your changes. If the parent object is deleted before you commit your changes, you will not be able to commit your changes. You cannot publish the checked-out version that is in My Folder . To publish a version with your changes, you must commit your changes, and publish the committed version. Checking Out a Rule Set from within a Decision See “Checking Out and Committing Objects from within A Decision” on page 274 for information. Checking Out and Committing a Common Rule Set from within an Assignment Rule Set You can check out a common rule set from within an assignment rule set if the following conditions are true: nThe assignment rule set is checked out. nThe common rule set is stored in a folder for which the check-out feature is enabled. nThe assignment rule set uses the latest version of the common rule set. ( See Add a Common Rule Set Reference to an Assignment Rule Set on page 27.) When you check out the common rule set, the assignment rule set is modified to use the checked-out copy of the common rule set. If you make changes to the common rule set and save it, you can click in the assignment rule set to display the changes in the rule set editor for the assignment rule set. When you commit the assignment rule set, all checked-out common rule sets that are used in the assignment rule set are also committed. The newly committed version of the 54Chapter 2 / Working with Rule Sets",500
652,"66. assignment rule set is modified to use the newly committed versions of the common rule sets. Any additional assignment rule sets that use the same common rule sets and that are still checked out are also modified to use the newly committed versions of the common rule sets. To check out or commit a common rule set from within a checked-out assignment rule set, click to open the context menu for the common rule set reference, and select Check out common rule set or Commit common rule set . Checking Out and Committing a Lookup Table from within a Rule Set You can check out a lookup table from within a rule set if the following conditions are true: nThe rule set is checked out. nThe lookup table is stored in a folder for which the check-out feature is enabled. nThe rule set does not have any unsaved changes. If the rule set contains any unsaved changes, the Check out lookup option is disabled. To check out or commit a lookup table from within a checked-out rule set, right-click on the LOOKUP or LOOKUPVALUE expression, and select Check out lookup or Commit lookup . SAS Intelligent Decisioning displays as asterisk in front of the name of any lookup table that is checked out. When you check out a lookup table from within a rule set, the checked-out rule set is modified to use the checked-out copy of the lookup table, and SAS Intelligent Decisioning enables the Commit lookup option in the menu. When you commit the rule set, all of the checked-out lookup tables that are used in the rule set are also committed. The newly committed versions of the lookup tables are not automatically activated when they are committed. You must activate the newly committed versions of the lookup tables. For more instructions, see “Activate a Lookup Table” on page 137. Rule sets that are not checked out always use the activated versions of lookup tables. If you do not activate the newly committed versions of the lookup tables, all rule sets that use the lookup tables will continue to use the previously activated versions of each table. To cancel the check out of a lookup table, right-click on the LOOKUP or LOOKUPVALUE expression, and select Cancel check out . Committing a Lookup Table Together with a Rule Set If you check out a lookup table from within a rule set and then commit the rule set, the lookup table is also committed.",472
653,"67. Alternatively, you can check out a rule set that uses a lookup table, open the lookup table in the Lookup tables category view and check it out, then change the reference in the rule set to use the checked-out version of the lookup table. The lookup table is committed when you commit the rule set. The newly committed version of the lookup table is not automatically activated when they are committed. You must activate the newly committed version of the lookup table. For more instructions, see “Activate a Lookup Table” on page 137. Concurrently Checking Out and Committing Rule Set Versions The ability for multiple users to check out the same rule set at the same time is controlled by the sas.businessrules.checkout.allowConcurrentCheckout configuration option. This option is turned on by default. When this option is turned on, different users can check out the same version of the same object at the same time. Because the objects that are checked out are saved in each user’s My Folder location, the default permissions allow individual users to see only the copies that they have checked out. When this option is turned off and a user has checked out an object, the Check Out button for that object is disabled for all other users. If multiple users check out the same version of the same object at the same time, each user’s changes are preserved in a new version when they commit their changes. One user’s changes do not overwrite another user’s changes. IMPORTANT If two users attempt to commit changes to the same object simultaneously, the first user's attempt will succeed but the second user might see an error message that the commit has failed. If the second user subsequently commits their changes, the Modified By column on the Versions tab for both the version committed by the first user and the version committed by the second user displays the user ID of the second user. Check Out and Commit a Rule Set Version 1On the Versions tab, click Check Out . SAS Intelligent Decisioning updates the Properties tab to indicate that the version is checked out. 2Modify the checked-out version as needed, and save it.56Chapter 2 / Working with Rule Sets",429
654,"68. TIP To discard the changes and delete the checked-out version from My Folder , you can commit the object without saving it first. However, committing the object without saving creates a new version of the object whose contents match the contents of the previous version. For information on undoing a check out, see “Undoing a Check Out” on page 57. 3On the Versions tab, click Commit . The Commit Rule Set Version window appears. 4Select the version type: Minor or Major . Version numbers follow the format major .minor . If you select Major , the number to the left of the period is incremented, and the minor number is reset to zero. If you select Minor , the number to the right of the period is incremented. 5(Optional) In the Version tags field, enter any version tags that you want to associate with the new version. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / 6(Optional) Enter information about the new version in the Notes field. 7Click Commit . SAS Intelligent Decisioning creates a new version with your changes, and deletes the working copy from your My Folder folder. Determine Who Has a Version Checked Out If the current version of an object is checked out, the IDs of the users that checked it out and the timestamps when each user checked it out appear in the Checked out by field on the Properties tab for the original object. You can also display this information by clicking beside the version number on the Versions tab. Opening the Original Object When you check out an object, SAS Intelligent Decisioning adds the field Original object link to the Properties tab for the checked-out object. This field contains a link to the original object that was checked out. You can use this link to verify that you have checked out the correct version and to compare the original content with the modified content in the checked-out version. Undoing a Check Out How you undo the checkout of an object depends on how the object was checked out.Checking Out and Committing Rule Set Versions 57",428
655,"69. If both an object and a decision that uses the object are checked out at the same time, or if you checked out the object from within the decision , click on the object's node in the decision diagram, and select Cancel checkout . If you check out a common rule set from within an assignment rule set , click in the assignment rule set editor to open the context menu for the common rule set, and select Cancel check-out . You can discard a checked-out version and any changes that you made by deleting the working copy of the version from your My Folder folder if the following conditions are true: nYou have not checked out a decision that uses the object. nThe object was not checked out at the same time as a decision that uses the object, or the object was not checked out from within the decision after the decision was checked out. The deleted version is moved to the recycle bin. See “Delete Rule Sets” on page 48. Managing Version Tags for Rule Sets Add a Version Tag Version tags enable you to better organize and group your content. Version tags are associated with specific versions of an object and not with the entire object. You can add the same tag to any version of any object. To add a tag to a rule set version: 1On the Versions tab, position your cursor in the Version Tags column for the version that you want to tag. If the version is not tagged, appears. If the version has at least one tag, appears. 2Click to open the New Version Tags window, or click to open the Edit Version Tags window. 3For each tag that you want to add, either enter a custom tag or begin typing and select a tag from the list of previously entered tags. Press Enter after each tag. Tags are limited to 100 characters each and cannot contain the following characters: $ ' "" # & ? ( ) \ / TIP All tags that have been previously entered for any object are saved in the list that is displayed when you start typing. You cannot delete tags from this list. TIP To filter the version list based on a tag, right-click on the Version Tags column heading, enter a filter string in the Filter box, and press Enter. To clear the filter, delete the string from the Filter box, and press Enter.58Chapter 2 / Working with Rule Sets",474
656,7. Checking Out and Committing Code File Versions . . . . . . . . . . . . . . . . . . . . . . . . . . 182 Managing Version Tags for Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 Testing Code Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187 Manage Comments for a Code File Test . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195 Chapter 7 /Using Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197 About Custom Functions . . . . . . . . . . . . . . . . . . . . . . . .,273
657,. . . . . . . . . . . . . . . . . . . . . . . . 198 Using Custom Functions in a Rule Set or Code File . . . . . . . . . . . . . . . . . . . . . . . . . 198 Create a Custom Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199 Using the Custom Function Editor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200 Rules for Writing Custom Function Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201 Managing the Variables in a Custom Function File . . . . . . . . . . . . . . . . . . . . . . . . . . 202 Validate a Custom Function File . . . . . . . . . . . . . . . . . . . . . . . . . . . .,275
658,. . . . . . . . . . . . . . 207 Testing a Custom Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 Compare Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 Managing Custom Function Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 208 Managing Custom Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209 Restore or Permanently Delete Hidden Functions or Hidden Categories . . . . . . . 211 Chapter 8 /Working with Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,273
659,. . . . . . . . . . . . . . . . . . . 213 About Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 Using SAS Workflow with SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . 216 Create a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220 Views for Editing a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221 Managing the Variables in a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,268
660,. 222 Adding Objects to a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230 Mapping Variables within a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247 Searching for Objects in a Decision Diagram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251 Editing the Objects in a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251 Update Decisions to Use New Object Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253 Validate a Decision in the Decision Editor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254 Change the Workflow Status of a Decision . .,280
661,"70. 4Click Close to close the window. Remove a Version Tag 1On the Versions tab, position your cursor in the Version Tags column for the version whose tag you want to remove, and click . 2Click beside the tag that you want to remove. 3Click OK to close the window. The tag remains in the list of previously entered tags that is displayed when you add a tag, but the tag is no longer associated with version. Modify a Version Tag You cannot modify a version tag that already exists. To change the content of an existing tag, delete the tag as described in “Remove a Version Tag” on page 59, and then add the tag again as described in “Add a Version Tag” on page 58. Publishing a Rule Set Introduction to Publishing Publishing content makes it available to other applications. Publishing a rule set creates an entity that can be managed and run in another environment. When you publish content, SAS Intelligent Decisioning generates code for that content and writes it to the destination. The following table describes what form the generated code takes for each destination type.Table 2.4 What SAS Intelligent Decisioning Publishes to Each Destination Type Destination TypeWhat SAS Intelligent Decisioning Does SAS Cloud Analytic Services (CAS), Teradata, or Apache HadoopAdds a row to the model table for the destinationSAS Micro Analytic ServiceWrites a Micro Analytic Service module in the service Publishing a Rule Set 59",292
662,"71. Destination TypeWhat SAS Intelligent Decisioning Does GitCreates a directory in the remote Git repository with the same name as the published object and writes the generated code to a file named scoreResource.txt .Container destinationsCreates a SAS Container Runtime container and writes it to the destination. Note: The container destination types to which you can publish content from SAS Intelligent Decisioning are Amazon Web Services (AWS), Microsoft Azure, Google Cloud Platform (GCP), and private Docker repositories. The rows in the model tables, the Micro Analytic Service modules, and the SAS Container Runtime containers all become callable REST API endpoints, independent of SAS Intelligent Decisioning . For content that is published to Git destinations, you can use the SAS Intelligent Decisioning Git Deployment CLI to deploy content from the remote repository either to a CAS destination or to a SAS Micro Analytic Service destination. The deployed content then becomes a callable REST API endpoint. Publish Rule Sets 1Open the rule set, and click the Versions tab. By default, the version that is published when you click Publish is the displayed version. 2(Optional) Click the version number to change the displayed version to the version that you want to publish. 3(Optional) Enter any tags that you want to associate with the published object. Press Enter after each tag. 4Either click Publish or select Publish and Lock . nTo publish the selected version without also creating a new minor version, click Publish . nTo lock and publish the selected version and create a new minor version at the same time, click , and select Publish and Lock . The Publish Rule Sets window appears. 5Select the destination to which you want to publish. The publishing destinations that are available to you depend on what is configured at your site. See SAS Viya Platform: Publishing Destinations for more information. Note: You cannot publish filtering rule sets to SAS Micro Analytic Service destinations, to Git destinations, or to container destinations. Also, you cannot publish rule sets that use SAS Data Quality functions to SAS Micro Analytic Service destinations, and rule sets that use these functions will fail if they are run inside the database.60Chapter 2 / Working with Rule Sets",435
663,"72. 6(Optional) In the ITEMS TO PUBLISH section, complete the following steps for each item that you are publishing: aEdit the Published name if you do not want to use the default name for the published module. The maximum length and character restrictions differ depending on your destination. See Table 2.5 .Table 2.5 Requirements and Restrictions for Published Names DestinationMaximu m LengthRequirements And RestrictionsContainer destinations127The published name must start with a letter or an underscore. It cannot contain spaces, multi-byte characters, or special characters other than the underscore. The name that you enter is assigned to the SAS_SCR_APP_PATH environment variable. The value of this variable determines the module name. For more information, see “Changing the Endpoint Name for a Container” in SAS Container Runtime: Programming and Administration Guide .Git128The published name cannot contain forward slashes (/), single quotation marks ('), or double quotation marks ("").SAS Micro Analytic Service100The published name cannot contain the following characters: ! @ # $ % ^ & * ( ) | = ~` \ / . { } "" ' ;SAS Cloud Analytic Services (CAS)128The published name cannot contain single or double quotation marks.Teradata128The published name must start with a letter or an underscore. It cannot contain spaces, multi-byte characters, or special characters other than the underscore.Apache Hadoop128The published name cannot contain colons (:) or double quotation marks. bIf you have previously published the rule set, turn on the Replace item with the same name option in order to replace the previously published rule set of the same name in the same destination. cSelect the Rule-fired tracking check box if you want the published rule set to generate rule-fired data.Publishing a Rule Set 61",362
664,"73. TIP This rule-fired data is recorded in the ruleFiredFlags column in the output table. The rule-fired data that is recorded when you select Record rule-fired data for a record contacts node is recorded in the subject contact history. This option is disabled if you are publishing content to a SAS Micro Analytic Service destination, a Git destination, or a container destination. 7Publish the rule sets. To publish content to a SAS Cloud Analytic Services (CAS) destination, you must reload the CAS destination table in order to make the newly published items available to other applications. You do not need to reload the destination table when you publish content to other destination types. Select one of the following options: Publish publishes the rule sets and, if you are publishing content to a CAS destination, automatically reloads the CAS destination table. If another user is executing the code for an item that was previously published to CAS while the destination table is being reloaded, reloading the table might cause temporary problems with accessing the table content. After the table is reloaded, all authorized users can access all items in the table. Publish without reloading publishes the rule sets but does not reload the CAS destination table. You must manually reload the table in order for the newly published items to be accessible. Publish and lock locks and publishes the rule set and creates a new minor version, but does not reload the CAS destination table. You must manually reload the table in order for the newly published items to be accessible. Note: This option is not available unless you chose Publish and Lock in Step 4 . The Publishing Results window appears. It displays the names of the published items, their status, and a link to the log that was generated during the publishing process. 8After the status changes to Published successfully , click Close to close the Publishing Results window. TIP To view the publishing history for a rule set, click the History tab. 9(Optional) Click Close to close the rule set.62Chapter 2 / Working with Rule Sets",406
665,"74. Testing Rule Sets Ways to Test a Rule Set There are three types of tests: Basic test executes the rule set in the SAS Cloud Analytic Services (CAS) destination using the input table that you specify. You can also specify a debugging variable. For more information, see “Create and Run a New Test” on page 63. Scenario test enables you to enter specific input values and the output values that you expect the test to generate. A scenario test identifies differences between the output that you expect to see and the actual output that is generated when the test is run. You can also compare the test definitions and test results of different scenarios. Scenario tests are also run in CAS. For more information, see “Test a Scenario” on page 289. Publishing validation test executes the rule set in a publishing destination using the input table that you specify. When you publish the rule set, a validation test is automatically defined for that rule set in that destination. For more information, see “Validate a Published Rule Set” on page 73. Test a Rule Set Create and Run a New Test Testing a rule set is optional, but doing so is a best practice. Testing enables you to discover any problems before the rule set is published and incorporated into a production system. IMPORTANT If you are a testing rule set that uses functions that are defined in a custom context file, verify that the context file is specified in the Test custom context field on the Properties tab before running the test. If you are testing a rule set that uses a lookup table and both the rule set and the lookup table are checked out, the rule set test uses the checked-out version of the lookup table. If the lookup table is not checked out, the test uses the activated version of the lookup table.Testing Rule Sets 63",361
666,"75. 1On the Scoring tab, click the Tests tab. 2Click New Test . The New Test window appears. 3Enter a name for the test if you do not want to use the default name. The name cannot contain forward slashes (/) or curly braces ({}). 4(Optional) Enter a description for the test. Descriptions are limited to 1000 characters. 5(Optional) Click for the Location field, and select the folder where you want to save the test definition and results. TIP Selecting a location is optional, but it is highly recommended. Storing test definitions and test results in a folder simplifies the tasks of setting permissions and transferring the test files. 6Click for the Input table field, select the input table for the test, and click OK. 7Verify or change the variable mappings. To run a full test, map all of the input variables to columns in the input table that you selected for the test. To run a partial test, you can map only the input variables that are needed for the test. SAS Intelligent Decisioning automatically maps the input variables in the rule set to columns in the input table when the names and data types of the variables match those of the table columns. If any input variables are not mapped to input columns or to static values, the application displays a warning message. At run time, SAS Intelligent Decisioning assigns missing values to input variables that are not mapped. You can change the automatic variable mappings in the Variable Mappings window. To change variable mappings: aClick Variables . The Variable Mappings window appears. bFor each input variable, select the table column to which the variable should be mapped. If the input table contains more than 25 columns, click More columns to display additional column names. Alternatively, for Decimal, Integer, and Character variables, you can select Use value for the table column, and specify a literal value in the Value column. When you are entering literal values, remember these rules: nDo not enclose character strings in quotation marks. nTo specify a missing value for character variables, select Use value and leave the Value column empty. When SAS Intelligent Decisioning generates code, it generates an empty string ('' ). For numeric values, enter a period (.).64Chapter 2 / Working with Rule Sets",470
667,"76. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published. cClick OK to close the Variable Mappings window. 8(Optional) Click Advanced to display the advanced options. 9(Optional) Click and select the library where you want to write the output of the test. 10(Optional) Enter a name for the test results output table if you do not want to use the default name. The default name is test-name_object-name_timestamp_output . 11(Optional) Select the version of the rule set that you want to test. 12(Optional) Select the variable that you want to serve as an input debug variable. You can specify an input-only variable or an input-output variable. The rule set writes the name and value of this variable to the log for each input record that is processed. It writes the value just before the logic of the rule set is executed for the input record. For more information, see “Debugging Rule Set Tests” on page 66. 13(Optional) Select Preserve unmapped columns in the output table if you want columns that are not mapped to an output variable to be written to the output table. 14(Optional) If you are testing a filtering rule set, select Keep filtered records in output table to include records in the test output that would normally be excluded. When you select this option, SAS Intelligent Decisioning creates a new column in the output table named _filter_. If the value in this column is 0, then the record does not match any of the conditions in the rule set, and the record is filtered out of the output when the rule set is run in a production environment. If the value in this column is 1, then the record matches at least one condition in the rule set, and the record is included in the output. Note: This option is ignored for assignment rule sets. 15Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 76. 16Click in the Results column to view the results of the test.",490
668,"77. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Log page, you can click to download the log file. Debugging Rule Set Tests When you create a test, you can specify a variable to use as a debugging variable in the Input debug variable field. You can specify an input-only variable or an input- output variable. The rule set writes the name and value of this variable to the log for each input record that is processed. It writes the value just before the logic of the rule set is executed for the input record. For more information, see Step 12 of “Create and Run a New Test” on page 63. When you specify an input debug variable, you can use the sas.businessRules.messageOrder configuration option to control whether the log messages are written as they are produced or after the rule set executes. For more information, see “sas.businessrules.messageOrder” in SAS Intelligent Decisioning: Administrator’s Guide . When you specify an input debug variable, SAS Intelligent Decisioning automatically sets the maximum number of threads that can be allocated for the test to 1. Setting the thread count to 1 ensures that the variable's values are written to the log in the correct order and are not affected by different threads completing at different times. To capture variable values for input-only or temporary variables after the rule set logic has executed for a specific record, you can specify that the variable is an output variable, and then re-run the test. Before publishing the rule set to a production environment, return the input and output settings for the variable to their previous settings. For more information, see “Input Variables, Output Variables, and Temporary Variables” on page 17 and “Edit Variable Properties” on page 23.66Chapter 2 / Working with Rule Sets",444
669,"78. Test a Scenario Create and Run a Scenario Test IMPORTANT If you are a testing rule set that uses functions that are defined in a custom context file, verify that the context file is specified in the Test custom context field on the Properties tab before running the test. If you are testing a rule set that uses a lookup table and both the rule set and the lookup table are checked out, the rule set test uses the checked-out version of the lookup table. If the lookup table is not checked out, the test uses the activated version of the lookup table. 1On the Scoring tab, click the Scenarios tab. 2Click New Test . The New Scenario Test window appears. 3Enter a name for the test if you do not want to use the default name. The name cannot contain forward slashes (/) or curly braces ({}). 4(Optional) Click for the Test definition location field, and select the folder where you want to save the test definition. TIP Selecting a test definition location is optional, but it is highly recommended. Storing test definitions in a folder simplifies the tasks of setting permissions and transferring the test files. 5Click for the Output table location field, and select the folder where you want to save the test results. 6(Optional) Select the version of the rule set that you want to test. 7(Optional) Enter a description for the test. Descriptions are limited to 1000 characters. 8Enter the values that you want to use for each input variable. You do not have to enter values for every input variable. At run time, SAS Intelligent Decisioning uses missing values to input variables for which you do not specify a value. Note: Values longer than 32767 characters for character variables that are either input-only or input-output will be truncated. You cannot enter input values for variables of type binary or of type varying-length binary. To enter values for the columns in a data grid variable: aClick in the Value field, and then click . The Edit Data Grid window appears.Testing Rule Sets 67",421
670,"79. bClick to add the row, and then enter the values for each column. Repeat this step for each row of values that you want to add to the data grid. TIP By default, data grid column names appear across the top of the data grid view, and row numbers appear down the left side. You can click to change the view of the data grid so that row numbers appear across the top and data grid column names appear down the left side. cClick OK to save the data grid values and close the Edit Data Grid window. 9(Optional) For each output variable, select the Include check box and enter the expected output value. The Include check box controls whether a variable’s expected value is used to determine the status of a scenario test. If you select Include for a variable and the test does not return the expected value, the test status is set to Completed with warnings ( ). If you do not select the check box, the application ignores the expected value of that variable when it determines the status of the test. To enter expected values for the columns in a data grid variable, click in the Expected Output field, and follow the instructions in Step 8 . Note: A scenario test cannot verify issues with trailing spaces. For example, it cannot distinguish between a string that contains a single space ' ' and a string that contains three spaces ' ' . 10Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 76. 11Click in the Results column to view the results of the test. 12On the Test Results page, click Test Results in the navigation panel to display the URIs and other information for the test. Click Input to display the values of input variables and dynamic attributes. Click Output , Code , or Log to display the output data set, the code that was generated by SAS Intelligent Decisioning , or the SAS log that was generated when the code was run. On the Output page, click Show All to display the expected and actual values of all output variables. Click Show Differences to display only the variables whose expected values do not match the actual values that were returned by the test.68Chapter 2 / Working with Rule Sets",477
671,8. Compare Decision Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258 Generate PDF Documentation for a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258 Managing Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260 Managing Versions of Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 262 Determine Which Objects Use a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271 Checking Out and Committing Decision Versions . . . . . . . . . . . . . . . . . . . . . .,271
672,. . . . . 272 Managing Version Tags for Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277 Publishing a Decision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278 Testing Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284 Manage Comments for Decision Nodes and Tests . . . . . . . . . . . . . . . . . . . . . . . . . . 306 Executing Published Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307 View All Published Decisions . . . . . . . . . . .,270
673,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310 Appendix 1 /Querying the Subject Contact Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313 About the Subject Contact Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313 How to Query the Subject Contacts Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314 Using Views Defined by SAS Intelligent Decisioning . . . . . . . . . . . . . . . . . . . . . . . . . 315 Columns in the dcm_trt_fixed_attr_vw and dcm_trt_dynamic_attr_vw Views . . . . 316 Columns in the dcm_treatments_contacts_vw View . . . . . . . . . . . . . . . . . . . . . . . . . 318 Appendix 2 /Import File Formats . . . . . . . . . . . . . . .,292
674,"80. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Output page, click Export to export the output table as a comma-separated values (CSV) file. On the Log page, click to download the log file. Import Scenario Test Definitions You can import scenario test values from a comma-delimited (CSV) file. Each line in the CSV file is imported as one scenario test. In the CSV file, add a column of values for each variable. In the header row, enter the names of the input variables and of the output variables with _expected appended to the name. For example, suppose your scenario test has the input variables policyholder , cscore , and claims , and it has the output variables eligible and policies . An import file for this test might appear in a spreadsheet application as shown in the following figure. The policies output variable in this example is a data grid variable. To enter values for data grid variables, use the JSON string format described in “Introduction to Data Grids” in SAS Intelligent Decisioning: Using Data Grids . The format for date and datetime variables depends on your locale. Use the same format that is created by the date and datetime pickers when you click or to enter initial values for custom variables on the Variables tab. To import scenario test definitions: 1On the Scoring tab, click the Scenarios subtab, and then click Import Scenarios . The Import Scenarios window appears. 2In the Import from field, click and select the CSV file that contains the scenario test values. Note: The import file is limited to 10 MB.Testing Rule Sets 69",410
675,"81. 3Select or enter the encoding of the CSV file. 4Enter a prefix for the scenario test definitions. SAS Intelligent Decisioning appends a number to this prefix for each test definition. The prefix can include double-byte characters and special characters, including single quotation marks. 5(Optional) Click for the Folder location field, and select the folder where you want to save the test definitions. 6Click for the Output table location field, and select the folder where you want to save the test results. 7Click Import . Compare Different Scenarios You can display the scenario definitions or results of two or more tests side-by-side. On the Scenarios tab, select two or more tests, click , and select one of the following options: Compare ð Definitions displays the input values and the expected output values that you entered for both tests. To edit the input values for a scenario test definition, click next to the test name under Input Table . To edit the expected output values for a test, click next to the test name under Output Table . Compare ð Results displays the input values and the actual output values that were generated by the test. To display both the expected values and the actual values in the output table, select Display expected values . For each variable for which you selected Include in Step 9 on page 68, the application highlights the variable if the actual and expected values do not match. Click Export to export the results comparison as a comma-separated values (CSV) file. The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application. Run a Rule-Fired Analysis If a rule’s conditions evaluate to true, then the rule is said to have fired. Rule-fired data includes summary information about how many times each rule fired and detailed information for each time that a rule evaluates to true. See “How Rules Are Evaluated and When Rule-Fired Records Are Generated” on page 32 for more information. Note: Rule-fired data is recorded only for rule sets, including rule sets in nested decisions and filtering rule sets that are included directly in a decision. Rule-fired 70Chapter 2 / Working with Rule Sets",476
676,"82. data is not recorded for other objects, including filtering rule sets that are used as eligibility rule sets in treatments. For filtering rule sets that are included directly in a decision, rule-fired data is recorded for an input record if the rule set does not filter out the record. When the rule set filters out an input record, rule-fired data is not recorded for that input record. For rule sets that iterate over a data grid (in other words, the rule sets score the rows in the data grid), the rule-fired data indicates that the rules in the rule set fire once for the entire data grid instead of firing once for each row in the data grid. If the sas.decisions.nodetraces.includeRuleFiredPathTrackInfoInVariableAssignmentLogging configuration option is turned off, you cannot run rule-fired analyses for scenario tests. For more information, see “Decisions Service Properties” in SAS Intelligent Decisioning: Administrator’s Guide . TIP This rule-fired analysis uses the data that is in the ruleFiredFlags column in the test results output table. To analyze rule-fired data that is in the subject contact history, use the %DCM_GET_SUBJECTCONTACT_HISTORY and %DCM_RULEFIRE_DETAIL macros. For more information, see SAS Intelligent Decisioning: Macro Guide . To run a rule-fired analysis: 1In the test results window, click Rule-Fired Analysis in the navigation panel. 2Click Run Rule-Fired Analysis . SAS Intelligent Decisioning analyzes the test results to determine which rules fired for each row in the input table, and displays the Analysis page. The Analysis page displays the number of rules that fired for each output record that was generated by the decision. The number in the Rules Fired Count column is a link to more information. You can click on this link to display the rules that fired for that output row. For example, the following displays shows the rule-fired analysis for the low_ratio rule set.Testing Rule Sets 71",398
677,83. 3Click on a number in the Rule Fired Count column. SAS Intelligent Decisioning displays the Rule Fired Count window. This window shows which rules produced the selected output record. Note: The value in the Rule Order column is the ordinal number of the rule as it occurs in the rule set diagram. The values in this column do not indicate the order in which the rules in the rule set fired. 4Click Close to close the Rule Fired Count window. 5Click Plot in the navigation panel. SAS Intelligent Decisioning displays a bar chart that shows how many times each rule fired. Position your cursor over a bar to display the name of the rule and the number of times that the rule fired.72Chapter 2 / Working with Rule Sets,152
678,"84. 6Click Rule-Fired Analysis in the navigation panel to display the URIs and other information for the rule-fired test. 7Click Close to close the rule set. Validate a Published Rule Set You can test the published rule set in the target publishing destination. When you publish the rule set to any destination type except Git, a validation test is automatically defined for that rule set in that destination. To run the publishing validation test: 1On the Scoring tab, click the Publishing Validation tab. The icon in the Status column indicates that the test is not ready to run. The icon indicates that the test is ready to run. 2Click on the test name. The Edit Publishing Validation Test window appears.Testing Rule Sets 73",151
679,"85. Note: To generate the name of the publishing validation test, SAS Intelligent Decisioning appends a timestamp to the rule set name. The timestamp indicates when the rule set was published. 3(Optional) Click in the Location field, and select the folder where you want to save the test definition and results. TIP Selecting a location is optional, but it is highly recommended. Storing test definitions and test results in a folder simplifies the tasks of setting permissions and transferring the test files. 4Click in the Input table field, and select the input table for the test. Note: For content that will be published to a SAS Micro Analytic Service destination, the values of date and datetime input variables must be numeric. They cannot be formatted values such as 18jul2019 . Also, integer variables are converted to decimal variables when the content is published. Note: If the input table contains a character column, and that column contains control characters in any row, do not use the table as input for publishing validation tests. If you are validating content that was published to SAS Micro Analytic Service, the time required to run the test depends on the number of worker threads on your system, the number of threads in the middle tier, and the network latency between CAS and the middle tier server. It is recommended that you select an input table with as few input records as needed to accurately test the published content. See SAS Micro Analytic Service: Programming and Administration Guide for more information. 5(Optional) Expand the Advanced section, click in the Output data library field, and select a library to store the validation test output data. 6Click Run to run the test. Alternatively, click Save to save the test definition without running it. The status of the test is indicated by the icon in the Status column. For explanations of each icon, see “Status Icons for Tests” on page 76. 7Click in the Results column to view the test results. 8In the test results window, click Test Results in the navigation panel to display the URIs and other information for the test. Click Output , Code , or Log to display the output data set, the code that was generated by SAS Intelligent Decisioning , or the SAS log that was generated when the code was run.74Chapter 2 / Working with Rule Sets",473
680,"86. TIP You can click on the values of character variables to display the entire value in a separate window. For data grid variables, you can choose to view the variable value in three different formats: nClick the Data Grid tab to view the data grid value as a table. nClick the Formatted tab to view the data grid as a formatted JSON character string. nClick the Plain tab to view the data grid as an unformatted character string. TIP On the Log page, you can click to download the log file. 9Click Close to close the rule set. Working with Test and Validation Test Output Data After you run a test or a publishing validation test, you can work with the output table in other SAS applications to analyze the data, create and compare models, discover relationships hidden in the data, and generate reports based on the data. Note: The actions available to you depend on the applications that are available at your site. On the Test Results page, select the Output table in the navigation pane, click Actions , and select one of the following options: Explore Lineage opens SAS Lineage Viewer. SAS Lineage Viewer enables you to better understand the relationships between objects in your SAS Viya applications. These objects include data, transformation processes, reports, and visualizations. For more information, see SAS Lineage: User’s Guide . Explore and Visualize Data opens the output table in SAS Visual Analytics. SAS Visual Analytics enables you to create, test, and compare models based on the patterns discovered during exploration of the data. You can export the model before or after performing model comparison for use with other SAS products or to put the model into production. SAS Visual Analytics supports a range of visualization, discovery, and reporting features. For more information, see Welcome to SAS Visual Analytics . Prepare Data opens the output table in SAS Data Studio. SAS Data Studio enables you to perform data transforms such as joining tables, appending data to a table, transposing columns, creating calculated columns, and so on. For more information, see SAS Data Studio: User’s Guide .Testing Rule Sets 75",423
681,"87. Status Icons for TestsIconStatusThe test is not ready to run. The test definition is not complete, or it might contain errors.The test has been defined and can be run. Some input variables have not been mapped or have not been assigned a value, so the test might execute only a subset of the rules in the rule set.The test is defined correctly and is ready to run.The test is running.The test completed successfully.The test completed, but warnings were issued in the SAS log. The URI to the log file is shown on the Test Results page. On the Test Results page, click Test Results in the navigation panel to display the URI.The test did not run successfully. Check the SAS log for information. The URI to the log file is shown on the Test Results page. On the Test Results page, click Test Results in the navigation panel to display the URI. Manage Comments for a Rule Set Test You can associate comments and attachments with rule set tests. To open the Comments properties pane, select the rule set test on the Scoring tab, and click in the property pane. To add a new comment, enter the comment in the text box and click Post . To add an attachment to a comment, click , select the file that you want to attach, and click Post . (The attachment icon appears after you enter text in text box.) You cannot attach executable files such as BAT and EXE files. To reply to a comment, click Reply , enter your reply in the text box, and click Post . To delete a comment, click for that comment.76Chapter 2 / Working with Rule Sets",325
682,"88. Executing Published Content How you execute published content depends on the destination to which the content is published. Executing Content Published to SAS Micro Analytic Service Destinations The user who is executing the published content must be authenticated. In SAS Viya, authentication options vary, based on which interface and operating system are used in your environment. External mechanisms include direct LDAP authentication, host authentication, Kerberos, Security Assertion Markup Language (SAML), and OAuth 2.0 with OpenID Connect. For additional information, see SAS Viya Platform: Authentication When a rule set is published from SAS Intelligent Decisioning to a SAS Micro Analytic Service destination, an EXECUTE step is created in the published module. For information about the request and response data formats used in this step, see Execute a step in the REST API documentation for the Micro Analytic Score API. IMPORTANT If the SAS Micro Analytic Service configuration property service.removetrailingunderscoresfrominputs is set to False , add an underscore to the name of each input variable. If this option is set to True , do not add underscores. Your administrator can add this property to the supplementalProperties section in the sas.microanalyticservice.system configuration definition in SAS Environment Manager. The default value for this option is False . For additional information, see “sas.microanalyticservice.system: supplementalProperties” in SAS Micro Analytic Service: Programming and Administration Guide . Executing Content That Has Been Published to SAS Cloud Analytic Services Destinations To execute content that has been published to SAS Cloud Analytic Services (CAS), use the CAS Model Publishing and Scoring action set. For example, the following code runs a model named Evaluate_Loans on the local CAS server./* Start a CAS session named _mmcas_. */cas _mmcas_;/* Create librefs for all existing caslibs so that they */ Executing Published Content 77",381
683,"89. /* are visible in the SAS Studio Libraries tree.   */caslib _all_ assign;proc cas; /* Specify the session to use for the runModelLocal action. */ session _mmcas_;  /* Define the parameter list for the runModelLocal action. */ /* Reload the destination model table (""targetCode"")  */ /* before you execute the decision.      */  destination_model_table = ""targetCode""; destination_model_lib = ""public"";  destination_model = ""Evaluate_Loans"";  dp_inputTable=""hmeq_test""; dp_inputCASLib=""public"";  dp_outputTable=""hmeq_test_dm""; dp_outputCASLib=""public"";  parmlist = {  modelTable={   name=destination_model_table,   caslib=destination_model_lib   },  modelName=destination_model,  inTable={   name=dp_inputTable,   caslib=dp_inputCASLib  },  outTable={   name=dp_outputTable,   caslib=dp_outputCASLib  } }; /* Load the modelPublishing action set. */ loadactionset ""modelPublishing""; /* Run the model locally on the CAS server. */ action runModelLocal submit result=r status=rc / parmlist;run;quit; If SAS Data Studio is licensed at your site, you can submit this code in SAS Data Studio. To open SAS Data Studio, click and select Prepare Data . For more information, see SAS Data Studio: User’s Guide . You can view additional examples of using this CAS action set to execute published content by viewing the test results that are generated by publishing validation tests. On the Test Results page for a rule set, click Code to display the code that was generated by SAS Intelligent Decisioning . For information about running publishing validation tests and viewing the results, see “Validate a Published Rule Set” on page 73. For more information about CAS and the Model Publishing and Scoring action set, see the following documentation:78Chapter 2 / Working with Rule Sets",414
684,9. CSV Format of the Variable Import File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325 JSON Format of the Variable Import File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327viContents,93
685,"90. nGetting Started with CASL Programming nSAS Cloud Analytic Services: CASL Reference n“Model Publishing and Scoring Action Set” in SAS Visual Analytics: Programming Guide nSAS Cloud Analytic Services: User’s Guide Content Executed by Published Rule Sets When you execute a published rule set, the version of the content that is executed depends on the publishing destination.Destination TypeContent That Is Executed by Published Rule SetsSAS Micro Analytic ServiceGlobal variables are not locked. If a new version of a global variable is activated, the newly activated version is used by the published module. Lookup tables are embedded in decisions if the lookupStaticBinding configuration option is turned on. If this option is off, lookup tables are not embedded, and published modules use newly activated versions of lookup tables. For more information, see “sas.businessrules.lookupStaticBinding” in SAS Intelligent Decisioning: Administrator’s Guide .SAS Cloud Analytic ServicesThe current values of global variables are included in generated code if the inlineGlobalVariableValues configuration option is turned on, and published modules do not use newly activated versions of global variables. If this option is turned off, the generated code uses a SAS format to retrieve the current value of the global variable when the published module is run. For more information, see “sas.businessrules.inlineGlobalVariableValues” in SAS Intelligent Decisioning: Administrator’s Guide . Lookup tables are locked if the lookupStaticBinding configuration option is turned on. If this option is off, lookup tables are not locked, and published modules use newly activated versions of lookup tables. For more information, see “sas.businessrules.lookupStaticBinding” in SAS Intelligent Decisioning: Administrator’s Guide .Teradata, Hadoop, and Container DestinationsAll of the published rule set’s content, including custom functions, lookup tables, and global variables is included inline in the published module. Updates to the objects used in the rule set are not used by the published module.Executing Published Content 79",404
686,"91. Importing and Exporting Rule Sets You can import rule sets from and export rule sets to comma-delimited (CSV) files. The format of the CSV file is the same format that is used by the %DCM_IMPORT_RULESET macro. For more information, see “Format of Rule Set CSV Input File” in SAS Intelligent Decisioning: Macro Guide . IMPORTANT The import and export features in SAS Intelligent Decisioning are for modifying an existing rule set. If you do not need to edit content as a CSV file, use either the SAS Viya Command-Line (sas-viya) or SAS Environment Manager to import and export content. The SAS Viya CLI and SAS Environment Manager enable you to import new objects. For information about the CLI, see SAS Viya Platform: Content Migration from SAS Viya 4 . For information about using SAS Environment Manager, see “Content Page” in SAS Environment Manager: User’s Guide and “Import Page” in SAS Environment Manager: User’s Guide . Import a Rule Set IMPORTANT If you import rules from a CSV file into a rule set that already contains rules, the existing rules are replaced with the rules that are defined in the CSV file. To avoid replacing existing rules, create a new empty rule set, and then import the contents of the CSV file into the empty rule set. To append rules to a rule set, you can export the rule set, add content to the CSV file, and then re-import the CSV file. 1Open the rule set into which you want to import new rules. 2Click Import . If the rule set already contains rules, asks you if you want to replace the existing rules. TIP If you do not have permission to update an object, SAS Intelligent Decisioning displays (Read-Only) in the title bar next to the object name, and the buttons for modifying and saving the object are disabled. 3Click , and select the CSV file that you want to import. 4Select the encoding of the CSV file, and click Import .80Chapter 2 / Working with Rule Sets",420
687,"92. Export a Rule Set IMPORTANT Do not modify the file structure or the header row in the exported CSV file. You can modify the data values. To export a rule set, open the rule set and click Export . The result depends on which browser you are using and the browser’s default download actions. The browser might automatically download the file and display a notification in the bar at the bottom of the browser window. Alternatively, the browser might prompt you to save the file or open it with a specific application.Importing and Exporting Rule Sets 81",110
688,93. 82Chapter 2 / Working with Rule Sets,12
689,"94. 3 Working with Treatments and Treatment Groups About Treatments and Decisions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 Example: A Decision That Includes a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . 85 About Attributes, Eligibility Rules, and Effective Dates . . . . . . . . . . . . . . . . . . . . . . . . . 88 Attributes and Attribute Aliases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 88 Eligibility Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 Effective Dates . . . . . . . . . . . . . .",278
690,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 Arbitrating Treatments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 About Channels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 Define a Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 90 Define a Treatment Group . . . . . . . . .,261
691,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 Activating a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 What Does Activating a Treatment Group Do? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93 Controlling Where Treatment Groups Are Activated and How They Are Used . . . . . 94 Activate a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 Managing Attributes and Aliases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,273
692,. . . . 95 About Attributes and Aliases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 Define Custom Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 Add Attributes from a Different Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96 Duplicate Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96 Delete Attributes from a Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,266
693,. . . . . . . . . . . . 96 View Attribute Aliases for a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Remove an Attribute Alias from a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Determine Which Treatments Use an Attribute . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Delete Treatments from a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Managing Eligibility Rules for a Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 Remove Eligibility Rule Set from a Treatment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .,275
694,95. Compare Treatment or Treatment Group Content . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 Compare Treatment Group Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101 Generate PDF Documentation for a Treatment Group . . . . . . . . . . . . . . . . . . . . . . . . . . 101 Managing Treatments and Treatment Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 Duplicate Treatments or Treatment Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102 Delete Treatments or Treatment Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103 Rename a Treatment or Treatment Group . . . . . . . . . . . .,277
695,. . . . . . . . . . . . . . . . . . . . . . . . 103 Move Treatments or Treatment Groups to a Different Folder . . . . . . . . . . . . . . . . . . . 103 Managing Versions of Treatments and Treatment Groups . . . . . . . . . . . . . . . . . . . . . 104 Set the Displayed Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 Create a New Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104 Copy the Content of a Version . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105 Delete a Version . . . . . . . . .,274
696,. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106 Determine Which Objects Use a Treatment or Treatment Group . . . . . . . . . . . . . . . 106 Checking Out and Committing Treatment or Treatment Group Versions . . . . . . . 107 About Checking Out and Committing Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107 Checking Out a Treatment Group from within a Decision . . . . . . . . . . . . . . . . . . . . . . . 108 Checking Out and Committing Treatments from within a Treatment Group . . . . . . 108 Concurrently Checking Out and Committing a Treatment or Treatment Group Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109 Check Out and Commit a Treatment or Treatment Group Version . . . . . . . . . . . . . . . 110 Determine Who Has a Version Checked Out . . . . . .,297
697,. . . . . . . . . . . . . . . . . . . . . . . . . . . . 110 Opening the Original Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 Undoing a Check Out . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 Managing Version Tags for Treatment and Treatment Groups . . . . . . . . . . . . . . . . . . 111 Add a Version Tag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 Remove a Version Tag . . . . . . . . . . . . . . . . . . . . . .,268
698,96. or a human representative enters the subject’s information into a form or a customer service application. The subject usually has an identification number (a subject ID). The customer service application or other calling application uses the subject ID to send a request to SAS Intelligent Decisioning that invokes a decision. The decision typically performs the following tasks:84Chapter 3 / Working with Treatments and Treatment Groups,78
699,"97. 1Uses the subject ID to issue a web service call or to query the company database in order to retrieve additional customer data, such as name, address, and household income, if such information exists. 2Determines the set of offers for which the subject qualifies. 3Arbitrates the set of offers to determine which ones the subject is most likely to respond to. 4Generates a response tracking code and subject contact history data. The subject contact history data typically includes the set of offers from step 3. 5Returns to the calling application the response tracking code and the set of offers for which the subject qualifies. At this point, the calling application or a customer service representative can present the offers to the customer. The calling application can use the response tracking code to update the subject contact history data. For example, it can record which treatments are presented to the customer and the subject’s response to the treatments. “Example: A Decision That Includes a Treatment Group” on page 85 shows how to accomplish the tasks listed above by using a decision in SAS Intelligent Decisioning . Example: A Decision That Includes a Treatment Group Figure 3.1 shows a basic decision that defines offers, arbitrates these offers, and updates the subject contact history. This example contains only one treatment group and one record contacts node, but decisions can include multiple treatment groups and record contacts nodes.Example: A Decision That Includes a Treatment Group 85",293
700,"98. Figure 3.1 Example Decision That Uses Treatments This decision flow has the following elements: 1The data query node named Get_customer_Info queries the company database and retrieves additional information about the subject based on the subject ID. For example, if the treatment is an offer to upgrade the subject’s cell phone, the SQL query could retrieve the model number for the subject’s current phone, if that information is available. For more information, see “Data Query Files” on page 159. Nodes that retrieve additional information about the subject are typical but not required. 2The treatment group name Combined_Treatments_Final defines a set of treatments (offers) and includes rules that define who is eligible to receive the treatments. The decision uses the information about the subject and the eligibility rules to determine the treatments for which the subject qualifies. When you add a treatment group to a decision, SAS Intelligent Decisioning defines an output variable of type data grid. After the decision executes, this data grid contains a row for each treatment for which the subject qualifies.86Chapter 3 / Working with Treatments and Treatment Groups",224
701,"99. Note: See “About Decision Variables and Mapping” on page 247 for information about when variables are created and how they are mapped. You can include as many treatment groups in a decision as necessary. You can merge multiple output data grids into a single data grid if needed. For more information, see the following topics: n“About Attributes, Eligibility Rules, and Effective Dates” on page 88 n“About Channels” on page 90 nSAS Intelligent Decisioning: Using Data Grids 3The model AggregatePromoPrediction and the rule set ArbitrationRules arbitrate the treatments. For example, the subject might qualify for several treatments, but you might want to offer them only the two treatments that they are most likely to accept. You might also want to return only the treatments that are appropriate for the channel. nThe model calculates a probability for each treatment (each row in the data grid) that indicates how likely the subject is to respond to the treatment. nThe rule set uses the DATAGRID_TOPN function to sort the treatment data grid based on the values of the probability column. The function returns the top two treatments to which the subject is most likely to respond. See “DATAGRID_TOPN Function” in SAS Intelligent Decisioning: Using Data Grids for more information. You can use rule sets, scoring models, attribute values, or other methods to arbitrate treatments. For more information, see “Arbitrating Treatments” on page 89. 4The record contacts node records information that you want to track, such as the treatments that are returned to the calling application and whether the record is used in generating aggregate reports for the channel. You can also specify variable values to track. In real-time destinations (SAS Micro Analytic Service destinations), this node writes a record to the subject contact history. In all other destinations (SAS Cloud Analytic Services [CAS], Teradata, and Apache Hadoop), this node creates an output variable that contains the information that you specify that you want to track. Record contacts nodes also create a response tracking code that the calling application can use to add additional information to the subject contact history. TIP You can use record contacts nodes to track variable values even if you are not using treatments. For more information, see the following topics: n“Adding Record Contacts Nodes” on page 233 nSubject Contacts REST APIExample: A Decision That Includes a Treatment Group 87",497
